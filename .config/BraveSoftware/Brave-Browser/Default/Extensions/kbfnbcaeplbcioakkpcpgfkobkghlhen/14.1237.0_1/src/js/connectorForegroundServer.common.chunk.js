(self.webpackChunk=self.webpackChunk||[]).push([[9782],{98456:(e,t,n)=>{n.r(t),n.d(t,{ForegroundConnectorServerImpl:()=>D});var o=n(13391),s=n(86819),c=n(88305),r=n(32082),a=n(88030);const i="fg-connector-d7c96f";(0,a.LK)(5);var h=n(29148),u=n(99208);class l extends u.X{constructor(e,t){super(new h.rr("bg-connector-d7c96f",t,e),void 0)}}class g extends Error{toJSON(){return{message:this.message}}}class d extends Error{constructor(e){super(`Document not available: ${e}`),this.documentID=e}toJSON(){return{documentID:this.documentID,message:this.message}}}class m extends Error{constructor(e){super(`Unknown document: ${e}`),this.documentID=e}toJSON(){return{documentID:this.documentID,message:this.message}}}class _{constructor(){this._connectors=new Map,this._cancellationTokenToConnectorMap=new Map,this._documentToConnectorMap=new Map}add(e){this._connectors.set(e.id,e)}delete(e){e.dispose(),this._connectors.delete(e.id);const t=e.id;this._documentToConnectorMap.forEach(((e,n)=>{e===t&&this._documentToConnectorMap.delete(n)}))}get(e){var t;return null!==(t=this._connectors.get(e))&&void 0!==t?t:null}forEach(e){this._connectors.forEach(e)}getConnectorForDocument(e){const t=this._documentToConnectorMap.get(e);if(null==t)throw new m(e);const n=this.get(t);if(null==n)throw new d(e);return n}getConnectorForCancellationToken(e){const t=this._cancellationTokenToConnectorMap.get(e);return null!=t?this.get(t):null}linkDocumentToConnector(e,t){this._documentToConnectorMap.set(e,t)}async withCancellationToken(e,t,n){try{return this._cancellationTokenToConnectorMap.set(e,t),await n()}finally{this._cancellationTokenToConnectorMap.delete(e)}}dispose(){this._connectors.forEach((e=>e.dispose())),this._connectors.clear(),this._cancellationTokenToConnectorMap.clear(),this._documentToConnectorMap.clear()}}class C extends _{}var T=n(8867);class p{constructor(e,t){this._clientId=e,this._message=t,this.inbound=new T.y((e=>{const t=t=>{t.clientId===this._clientId&&e.next(t)};return this._message.on(i,t),()=>this._message.off(i,t)})),this.outbound=e=>{this._message.sendBackground(i,e)}}}class D extends s.S{get isNativeMessagingHostAvailable(){return this._isConnected}constructor(e){const t=c.iy.create();super(new p(t,e),{connectionStateChanged:(e,t)=>this._isConnected.set(t),cancel:(e,t)=>this._cancel(t),getDocumentText:(e,t,n)=>this._getDocumentText(t,n),getDocumentGeometry:(e,t,n)=>this._getDocumentGeometry(t,n),applyChangesToDocument:(e,t,n)=>this._applyChangesToDocument(t,n),setDocumentSelectedTextRanges:(e,t,n)=>this._setSelectedTextRanges(t,n),getBoundingBoxesForTextRanges:(e,t,n)=>this._getBoundingBoxesForTextRanges(t,n)}),this._manager=new C,this._isConnected=o.h.create(!1),this._logger=r.Y.create("ForegroundConnectorManager"),this.client=new l(t,e)}async setLatestConnectedState(){try{this._isConnected.set(await this.client.api.isConnected())}catch(e){this._logger.error("Failed to check connection",e),this._isConnected.set(!1)}}_cancel(e){var t;return null===(t=this._manager.getConnectorForCancellationToken(e))||void 0===t?void 0:t.cancel(e)}_getDocumentText(e,t){const n=this._manager.getConnectorForDocument(e.documentID);return this._manager.withCancellationToken(t,n.id,(()=>n.getDocumentText(e,t)))}_getBoundingBoxesForTextRanges(e,t){const n=this._manager.getConnectorForDocument(e.documentID);return this._manager.withCancellationToken(t,n.id,(()=>n.getBoundingBoxesForTextRanges(e,t)))}_getDocumentGeometry(e,t){const n=this._manager.getConnectorForDocument(e.documentID);return this._manager.withCancellationToken(t,n.id,(()=>n.getDocumentGeometry(e,t)))}_setSelectedTextRanges(e,t){const n=this._manager.getConnectorForDocument(e.documentID);return this._manager.withCancellationToken(t,n.id,(()=>n.setDocumentSelectedTextRanges(e,t)))}_applyChangesToDocument(e,t){const n=this._manager.getConnectorForDocument(e.documentID);return this._manager.withCancellationToken(t,n.id,(()=>n.applyChangesToDocument(e,t)))}createConnectorSession(e,t){return this._manager.add(t),this._manager.linkDocumentToConnector(e,t.id),()=>this._manager.delete(t)}dispose(){super.dispose()}}}}]);