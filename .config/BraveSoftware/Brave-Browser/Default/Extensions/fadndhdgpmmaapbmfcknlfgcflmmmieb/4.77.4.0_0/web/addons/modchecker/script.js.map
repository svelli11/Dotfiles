{"version":3,"file":"modchecker/script.js","mappings":"oGAAA,MAAM,EAAN,MAAM,UAAmB,kCAAM,CAC9B,eAAeA,EAAM,CACpB,MAAM,GAAGA,CAAI,EACb,KAAK,OAAO,aAAa,EAEzB,KAAK,OAAS,yBACd,KAAK,QAAU,GAAG,KAAK,MAAM,UAC7B,KAAK,UAAY,KAAK,OAEtB,KAAK,kBAAoB,KAAK,OAC9B,KAAK,UAAY,mBACjB,KAAK,SAAW,IAAI,GACrB,CAEA,UAAW,CACV,KAAK,WAAW,CACjB,CAEA,WAAY,CACX,KAAK,aAAa,CACnB,CAEA,MAAM,YAAa,CAClB,MAAMC,EAAS,MAAM,KAAK,eAAe,EAEzC,UAAWC,KAASD,EAAQ,CAC3B,MAAME,EAAU,KAAK,cAAcD,CAAK,EACxC,KAAK,OAAO,QAAQ,KAAK,UAAWC,EAASD,EAAM,KAAK,CACzD,CAEA,KAAK,KAAK,mBAAmB,CAC9B,CAEA,cAAe,CACd,UAAWC,KAAW,KAAK,SAAS,OAAO,EAC1C,KAAK,OAAO,YAAYA,CAAO,EAGhC,KAAK,KAAK,mBAAmB,CAC9B,CAEA,cAAcC,EAAW,CAIxBA,EAAYA,EAAU,YAAY,EAAE,QAAQ,oBAAqB,EAAE,EAAE,QAAQ,OAAQ,GAAG,EAExF,MAAMD,EAAU,GAAG,KAAK,SAAS,UAAUC,CAAS,GACpD,YAAK,SAAS,IAAID,CAAO,EAClBA,CACR,CAEA,cAAcD,EAAO,CACpB,MAAMC,EAAU,KAAK,cAAcD,EAAM,IAAI,EAE7C,YAAK,OAAO,cAAcC,EAAS,CAClC,GAAIA,EACJ,KAAMD,EAAM,KACZ,MAAOA,EAAM,KACb,UAAW,KAAK,kBAChB,MAAOA,EAAM,KACb,KAAM,CACL,EAAGA,EAAM,KACT,EAAGA,EAAM,KACT,EAAGA,EAAM,IACV,EACA,KAAMA,EAAM,OACb,CAAC,EAEMC,CACR,CAEA,gBAAiB,CAChB,OAAO,KAAK,QAAQ,YAAY,CACjC,CAEA,MAAM,QAAQE,EAAMC,EAAe,CAAC,EAAG,CACtC,GAAI,CACH,MAAMC,EAAW,MAAM,MAAM,GAAG,KAAK,OAAO,IAAIF,CAAI,EAAE,EAEtD,GAAIE,EAAS,GACZ,OAAO,MAAMA,EAAS,KAAK,CAE7B,OAASC,EAAK,CACb,KAAK,IAAI,MAAMA,CAAG,CACnB,CAEA,OAAOF,CACR,CACD,EAzF+B,kBAA/B,IAAMG,EAAN,EA2FAA,EAAW,SAAS,wB","sources":["webpack://ffz-addons/./src/modchecker/index.js"],"sourcesContent":["class Modchecker extends Addon {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\t\tthis.inject('chat.badges');\n\n\t\tthis.domain = 'https://modchecker.com';\n\t\tthis.apiBase = `${this.domain}/api/v1`;\n\t\tthis.badgeBase = this.domain;\n\n\t\tthis.clickRedirectLink = this.domain;\n\t\tthis.namespace = 'addon.modchecker';\n\t\tthis.badgeIds = new Set();\n\t}\n\n\tonEnable() {\n\t\tthis.loadBadges();\n\t}\n\t\n\tonDisable() {\n\t\tthis.unloadBadges();\n\t}\n\t\n\tasync loadBadges() {\n\t\tconst badges = await this.fetchBadgeData();\n\n\t\tfor (const badge of badges) {\n\t\t\tconst badgeId = this.registerBadge(badge);\n\t\t\tthis.badges.setBulk(this.namespace, badgeId, badge.users);\n\t\t}\n\n\t\tthis.emit('chat:update-lines');\n\t}\n\n\tunloadBadges() {\n\t\tfor (const badgeId of this.badgeIds.values()) {\n\t\t\tthis.badges.removeBadge(badgeId);\n\t\t}\n\n\t\tthis.emit('chat:update-lines');\n\t}\n\n\tcreateBadgeId(badgeName) {\n\t\t// 1. translate into lower case\n\t\t// 2. remove `modchecker` including spaces around\n\t\t// 3. replace spaces with dashes\n\t\tbadgeName = badgeName.toLowerCase().replace(/\\s*modchecker\\s*/g, '').replace(/\\s+/g, '-');\n\n\t\tconst badgeId = `${this.namespace}.badge-${badgeName}`;\n\t\tthis.badgeIds.add(badgeId);\n\t\treturn badgeId;\n\t}\n\n\tregisterBadge(badge) {\n\t\tconst badgeId = this.createBadgeId(badge.name);\n\n\t\tthis.badges.loadBadgeData(badgeId, {\n\t\t\tid: badgeId,\n\t\t\tname: badge.name,\n\t\t\ttitle: badge.name,\n\t\t\tclick_url: this.clickRedirectLink,\n\t\t\timage: badge.path,\n\t\t\turls: {\n\t\t\t\t1: badge.path,\n\t\t\t\t2: badge.path,\n\t\t\t\t3: badge.path,\n\t\t\t},\n\t\t\tslot: badge.ffzSlot,\n\t\t});\n\n\t\treturn badgeId;\n\t}\n\n\tfetchBadgeData() {\n\t\treturn this.request('chatBadges');\n\t}\n\t\n\tasync request(path, defaultValue = []) {\n\t\ttry {\n\t\t\tconst response = await fetch(`${this.apiBase}/${path}`);\n\n\t\t\tif (response.ok) {\n\t\t\t\treturn await response.json();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis.log.error(err);\n\t\t}\n\n\t\treturn defaultValue;\n\t}\n}\n\nModchecker.register();\n"],"names":["args","badges","badge","badgeId","badgeName","path","defaultValue","response","err","Modchecker"],"sourceRoot":""}