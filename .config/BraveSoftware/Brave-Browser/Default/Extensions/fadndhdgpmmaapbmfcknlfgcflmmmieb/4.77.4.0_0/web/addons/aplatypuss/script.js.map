{"version":3,"file":"aplatypuss/script.js","mappings":"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","sources":["webpack://ffz-addons/./src/aplatypuss/index.js"],"sourcesContent":["class Aplatypuss extends Addon {\n\tHOST_URL = 'https://ffz.thetiki.club';\n\tASSETS_URL = `${this.HOST_URL}/static`;\n\tCHANNELS_IDS = ['39464264'];\n\n\tADDON_ID = 'addon.aplatypuss';\n\tADDON_NAME = 'APlatypuss';\n\n\tADDON_EMOTES_ID = `${this.ADDON_ID}.emotes`;\n\tEMOTICONS_SETTINGS_CHECK = `${this.ADDON_ID}.enable_emotes`;\n\n\tADDON_BADGES_ID = `${this.ADDON_ID}.badges`;\n\tBADGES_SETTINGS_CHECK = `${this.ADDON_ID}.enable_badges`;\n\tBADGE_PREFIX = `${this.ADDON_ID}.badge`;\n\tBADGES_START_SLOT = 420;\n\tDEFAULT_BADGE_URL = 'https://thetiki.club/';\n\n\tREFRESH_TIME_SETTINGS = `${this.ADDON_ID}.refresh_time`;\n\tMIN_REFRESH_TIME_SECONDS = 20;\n\tDEFAULT_REFRESH_TIME_SECONDS = 60;\n\tREFRESH_TIME_SECONDS = this.settings.get(this.REFRESH_TIME_SETTINGS) ?? this.DEFAULT_REFRESH_TIME_SECONDS;\n\tUPDATE_TIMER_ID = null;\n\tSHOULD_REFRESH = true;\n\n\tBADGES_KEYS = [];\n\tCURRENT_BADGES = {};\n\tCURRENT_BADGES_USERS = {};\n\n\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.inject('settings');\n\t\tthis.inject('chat');\n\t\tthis.inject('chat.badges');\n\t\tthis.inject('chat.emotes');\n\n\t\tthis.settings.add(this.EMOTICONS_SETTINGS_CHECK, {\n\t\t\tdefault: true,\n\t\t\tui: {\n\t\t\t\tpath: `Add-Ons > ${this.ADDON_NAME} >> Emotes`,\n\t\t\t\ttitle: 'Show Emotes',\n\t\t\t\tdescription: 'Enable to show custom emotes.',\n\t\t\t\tcomponent: 'setting-check-box',\n\t\t\t},\n\t\t\tchanged: () => this.updateAllChannels()\n\t\t});\n\n\t\tthis.settings.add(this.BADGES_SETTINGS_CHECK, {\n\t\t\tdefault: true,\n\t\t\tui: {\n\t\t\t\tpath: `Add-Ons > ${this.ADDON_NAME} >> Badges`,\n\t\t\t\ttitle: 'Enable Badges',\n\t\t\t\tdescription: 'Enable to show custom badges',\n\t\t\t\tcomponent: 'setting-check-box',\n\t\t\t},\n\t\t\tchanged: () => this.updateAllChannels()\n\t\t});\n\n\t\tthis.settings.add(this.REFRESH_TIME_SETTINGS, {\n\t\t\tdefault: this.DEFAULT_REFRESH_TIME_SECONDS,\n\t\t\tui: {\n\t\t\t\tpath: `Add-Ons > ${this.ADDON_NAME} >> Refresh`,\n\t\t\t\ttitle: 'Refresh Time',\n\t\t\t\tdescription: 'Time in seconds to check for updates',\n\t\t\t\tcomponent: 'setting-text-box',\n\t\t\t\tprocess: (newVal, _oldVal) => {\n\t\t\t\t\tlet newTime = parseInt(newVal);\n\t\t\t\t\tnewTime = newTime < this.MIN_REFRESH_TIME_SECONDS ? this.MIN_REFRESH_TIME_SECONDS : newTime;\n\t\t\t\t\treturn newTime;\n\t\t\t\t},\n\t\t\t},\n\t\t\tchanged: val => {\n\t\t\t\tif (val != this.REFRESH_TIME_SECONDS) {\n\t\t\t\t\tthis.REFRESH_TIME_SECONDS = val;\n\t\t\t\t\tthis.log.info(`new refresh time, ${this.REFRESH_TIME_SECONDS}`)\n\t\t\t\t\tclearInterval(this.UPDATE_TIMER_ID);\n\t\t\t\t\tthis.UPDATE_TIMER_ID = setInterval(() => {\n\t\t\t\t\t\tthis.refreshData();\n\t\t\t\t\t}, this.REFRESH_TIME_SECONDS * 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsetTimeout(() => this.enable(), 0)\n\n\t}\n\n\tenable() {\n\t\tthis.log.info(`addon was enabled`);\n\t\tthis.on('chat:room-add', this.roomChange);\n\t\tthis.on('chat:room-remove', this.roomChange);\n\t\tthis.on('chat:room-update-login', this.roomChange);\n\t\tthis.refreshData();\n\n\t\tthis.UPDATE_TIMER_ID = setInterval(() => {\n\t\t\tthis.refreshData();\n\t\t}, this.REFRESH_TIME_SECONDS * 1000);\n\t}\n\n\tonDisable() {\n\t\tclearInterval(this.UPDATE_TIMER_ID);\n\t}\n\t\n\tasync refreshData() {\n\t\tthis.log.info(`refreshing emotes and badges`)\n\t\tthis.updateAllChannels(false);\n\t\tawait this.updateBadges(0, false);\n\t\tif (!this.SHOULD_REFRESH) {\n\t\t\tclearInterval(this.UPDATE_TIMER_ID);\n\t\t}\n\t}\n\n\troomChange(room) {\n\t\tthis.updateChannel(room);\n\t}\n\n\tupdateChannel(room, retry) {\n\t\tif (this.CHANNELS_IDS.indexOf(room._id) == -1) {\n\t\t\tthis.unloadEmotes();\n\t\t\tthis.disableBadges();\n\t\t\tthis.SHOULD_REFRESH = false;\n\t\t\tthis.log.info(`disabling on room ${room._id} (is not present in the ID's list)`);\n\n\t\t}\n\t\telse {\n\t\t\tthis.updateChannelEmotes(room, retry);\n\t\t}\n\t}\n\n\tupdateAllChannels(retry = true) {\n\t\tfor (const room of this.chat.iterateRooms()) {\n\t\t\tif (room) this.updateChannel(room, retry);\n\t\t}\n\t}\n\n\tasync updateChannelEmotes(room, attempts = 0, retry = true) {\n\t\troom.removeSet(this.ADDON_ID, this.ADDON_EMOTES_ID);\n\t\tif (!this.chat.context.get(this.EMOTICONS_SETTINGS_CHECK)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst response = await fetch(`${this.HOST_URL}/emotes.json`);\n\t\tif (response.ok) {\n\t\t\tconst emotesData = [];\n\n\t\t\tfor (const dataEmote of await response.json()) {\n\n\t\t\t\tconst arbitraryEmote = /[^A-Za-z0-9]/.test(dataEmote.code);\n\n\t\t\t\tconst emote = {\n\t\t\t\t\tid: dataEmote.code,\n\t\t\t\t\turls: {\n\t\t\t\t\t\t1: undefined,\n\t\t\t\t\t},\n\t\t\t\t\tname: dataEmote.code,\n\t\t\t\t\twidth: dataEmote.width,\n\t\t\t\t\theight: dataEmote.width,\n\t\t\t\t\trequire_spaces: arbitraryEmote,\n\t\t\t\t\tmodifier: dataEmote.modifier !== undefined,\n\t\t\t\t\tmodifier_offset: dataEmote.modifier,\n\t\t\t\t};\n\n\t\t\t\temote.urls = {\n\t\t\t\t\t1: `${this.ASSETS_URL}/${dataEmote.id}_1X.webp`,\n\t\t\t\t\t2: `${this.ASSETS_URL}/${dataEmote.id}_2X.webp`,\n\t\t\t\t\t4: `${this.ASSETS_URL}/${dataEmote.id}_3X.webp`,\n\t\t\t\t};\n\t\t\t\temotesData.push(emote);\n\t\t\t}\n\n\t\t\tlet EMOTES_ARRAY = [];\n\t\t\tEMOTES_ARRAY = EMOTES_ARRAY.concat(emotesData);\n\n\t\t\tconst emoteSet = {\n\t\t\t\temoticons: EMOTES_ARRAY,\n\t\t\t\ttitle: 'Channel Emotes',\n\t\t\t\tsource: `${this.ADDON_NAME}`,\n\t\t\t\ticon: `${this.ASSETS_URL}/icon.png`,\n\t\t\t};\n\t\t\troom.addSet(this.ADDON_ID, this.ADDON_EMOTES_ID, emoteSet);\n\n\t\t} else {\n\t\t\tif (response.status === 404 || !retry) return;\n\n\t\t\tconst newAttempts = (attempts || 0) + 1;\n\t\t\tif (newAttempts < 12) {\n\t\t\t\tthis.log.error(`Failed to fetch emotes. Trying again in 5 seconds.`);\n\t\t\t\tsetTimeout(this.updateChannelEmotes.bind(this, room, newAttempts), 5000);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateBadges(attempts = 0, retry = true) {\n\t\tif (!this.settings.get(this.BADGES_SETTINGS_CHECK)) {\n\t\t\treturn;\n\t\t}\n\t\tconst baseBadgesResponse = await fetch(`${this.HOST_URL}/badgesDefinitions.json`);\n\t\tconst baseUsersResponse = await fetch(`${this.HOST_URL}/badgesUsers.json`);\n\n\t\tif (baseBadgesResponse.ok && baseUsersResponse.ok) {\n\t\t\tconst baseBadgeData = await baseBadgesResponse.json();\n\t\t\tconst usersData = await baseUsersResponse.json();\n\t\t\tthis.BADGES_KEYS = Object.keys(baseBadgeData);\n\t\t\tconst NEW_BADGES = {};\n\t\t\tconst NEW_BADGES_USERS = {};\n\n\t\t\tfor (let i = 0; i < this.BADGES_KEYS.length; i++) {\n\t\t\t\tconst badge = baseBadgeData[this.BADGES_KEYS[i]]\n\t\t\t\tconst badgeId = `${this.BADGE_PREFIX}.${this.BADGES_KEYS[i].toLowerCase()}`;\n\t\t\t\tNEW_BADGES[badgeId] = {\n\t\t\t\t\tid: `${badgeId}`,\n\t\t\t\t\taddon: this.ADDON_ID,\n\t\t\t\t\tname: this.BADGES_KEYS[i],\n\t\t\t\t\ttitle: badge.tooltip,\n\t\t\t\t\tslot: this.BADGES_START_SLOT + i,\n\t\t\t\t\timage: this.ASSETS_URL + badge.image1,\n\t\t\t\t\turls: {\n\t\t\t\t\t\t1: `${this.ASSETS_URL}/${badge.image1}`,\n\t\t\t\t\t\t2: `${this.ASSETS_URL}/${badge.image2}`,\n\t\t\t\t\t\t4: `${this.ASSETS_URL}/${badge.image3}`,\n\t\t\t\t\t},\n\t\t\t\t\tclick_url: badge.url ?? this.DEFAULT_BADGE_URL\n\t\t\t\t};\n\t\t\t\tNEW_BADGES_USERS[badgeId] = badge.users ?? [];\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < usersData.length; i++) {\n\t\t\t\tconst userData = usersData[i]\n\t\t\t\tfor (let j = 0; j < userData.badges.length; j++) {\n\t\t\t\t\tconst badgeId = `${this.BADGE_PREFIX}.${userData.badges[j].toLowerCase()}`;\n\t\t\t\t\tNEW_BADGES_USERS[badgeId] = NEW_BADGES_USERS[badgeId].concat(userData.user);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (!(JSON.stringify(NEW_BADGES) === JSON.stringify(this.CURRENT_BADGES) || JSON.stringify(NEW_BADGES_USERS) === JSON.stringify(this.CURRENT_BADGES_USERS))) {\n\t\t\t\tthis.log.info(`Badge info differs, updating ...`);\n\t\t\t\tthis.CURRENT_BADGES = NEW_BADGES;\n\t\t\t\tthis.CURRENT_BADGES_USERS = NEW_BADGES_USERS;\n\n\t\t\t\tfor (let i = 0; i < this.BADGES_KEYS.length; i++) {\n\t\t\t\t\tconst badgeId = `${this.BADGE_PREFIX}.${this.BADGES_KEYS[i].toLowerCase()}`;\n\t\t\t\t\tthis.badges.loadBadgeData(badgeId, (this.CURRENT_BADGES[badgeId]));\n\t\t\t\t\tthis.badges.setBulk(this.ADDON_BADGES_ID, badgeId, (this.CURRENT_BADGES_USERS[badgeId]));\n\t\t\t\t}\n\n\t\t\t\tthis.badges.buildBadgeCSS();\n\t\t\t\tthis.emit('chat:update-lines');\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (baseBadgesResponse.status === 404 || !retry) return;\n\n\t\t\tconst newAttempts = (attempts || 0) + 1;\n\t\t\tif (newAttempts < 12) {\n\t\t\t\tthis.log.error(`Failed to fetch badges. Trying again in 5 seconds.`);\n\t\t\t\tsetTimeout(this.updateBadges.bind(this, newAttempts), 5000);\n\t\t\t}\n\t\t}\n\t}\n\n\tdisableBadges() {\n\t\tfor (let i = 0; i < this.BADGES_KEYS.length; i++) {\n\t\t\tconst badgeId = `${this.BADGE_PREFIX}.${this.BADGES_KEYS[i].toLowerCase()}`;\n\t\t\tthis.badges.deleteBulk(this.ADDON_BADGES_ID, badgeId);\n\t\t}\n\t\tthis.badges.buildBadgeCSS();\n\t\tthis.emit('chat:update-lines');\n\t}\n\n\tunloadEmotes() {\n\t\tthis.emotes.unloadSet(this.ADDON_ID, this.ADDON_EMOTES_ID);\n\t}\n\n}\n\nAplatypuss.register('aplatypuss');"],"names":["args","newVal","_oldVal","newTime","val","room","retry","attempts","response","emotesData","dataEmote","arbitraryEmote","emote","EMOTES_ARRAY","emoteSet","newAttempts","baseBadgesResponse","baseUsersResponse","baseBadgeData","usersData","NEW_BADGES","NEW_BADGES_USERS","i","badge","badgeId","userData","j","Aplatypuss"],"sourceRoot":""}