{"version":3,"file":"menu-md5.js","mappings":"oBACC,WAAW,gBAAqB,WAAW,iBAAsB,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,EAAE,CAE7E,MACEA,GAAW,CAEnBA,EAAO,QAAU,siHAEX,CAEN,CAAC,CAAC","sources":["webpack://frankerfacez/menu-md5.js"],"sourcesContent":["\"use strict\";\n(globalThis[\"ffzWebpackJsonp\"] = globalThis[\"ffzWebpackJsonp\"] || []).push([[8163],{\n\n/***/ 98658:\n/***/ ((module) => {\n\nmodule.exports = \"This is a guide to the different term syntax options available. Internally,\\nFrankerFaceZ converts your highlight and block terms into regular\\nexpressions.\\n\\n\\n### Types\\n\\n#### 1. Text\\n\\nText has no special behavior. Any characters with special meaning in regular\\nexpressions are escaped.\\n\\n\\n#### 2. Glob\\n\\n[Globs](https://en.wikipedia.org/wiki/Glob_(programming)) provide simple, easy\\nto write pattern matching with wildcard characters. For example, the glob\\n`cir*` would match all words starting with the letters `cir`, including just\\n`cir` by itself. The `*` is a wildcard matching any number of characters.\\n\\n| Wildcard | Description | Example | Matches | Does Not Match |\\n| :------: | :---------- | :-----: | :-----: | :------------: |\\n| `*` | Matches any number of non-space characters, including none. | `cir*` | `cir`, `circle`, `cirFairy`, `circumstance` | `ci`, `sir`, `pizza` |\\n| `**` | Matches any number of any characters, including none. Unlike a single `*`, this will match space characters. | `hello**!` | `hello!`, `hello, streamer!` |\\n| `?` | Matches any single character. | `?at` | `cat`, `hat`, `pat` | `at`\\n| `[abc]` | Matches one character from within the brackets. | `[cp]at` | `cat`, `pat` | `hat`, `at`\\n| `[a-z]` | Matches one character from the range within the brackets. | `Kappa[0-9]` | `Kappa1`, `Kappa2`, ... `Kappa0` | `Kappa`, `KappaHD`\\n| `[!abc]` | Matches one character that is *not* within the brackets. | `[!cp]at` | `bat`, `rat`, `hat` | `at`, `cat`, `pat`\\n| `[!a-z]` | Matches one character that is *not* within the range within the brackets. | `Kappa[!0-9]` | `Kappa?`, `KappaF` | `Kappa`, `Kappa0`, `Kappa4`\\n| `'{'abc,d?f'}'` | Matches one of the possibilities from a comma-separated list. | `cir'{'no,Fairy'}'` | `cirno`, `cirFairy` | `cir`, `circle`\\n\\n\\n#### 3. Regex\\n\\n[Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) are complex\\npattern strings used in programming. They are meant for advanced users.\\n\\nFrankerFaceZ uses your browser's built-in engine for handling regular expressions,\\nwith all the limitations that come with it. Regex terms are packaged into the\\ngenerated regular expressions the same as both other modes. You should not and can\\nnot use capture groups.\\n\\nFrankerFaceZ uses rudimentary logic to ensure your regular expression is not\\ncatastrophically slow, but you should still be careful to avoid slow expressions\\nas they are run frequently.\\n\\n\\n### Modes\\n\\n#### Case Sensitive\\n\\nThis attempts to match your term in a case-sensitive manner. Effectively, this\\noption disables the `/i` flag on the generated regular expression. Due to\\nlimitations in your browser's regex engine, case insensitivity may not work on\\nsome characters.\\n\\n\\n#### Match Whole Word\\n\\nThis requires that your term is an entire word. For example, the term `test`\\nwithout \\\"Match Whole Word\\\" could just as easily match `testing` or `tested`\\nas it matches `test`. With \\\"Match Whole Word\\\" enabled, it will **only** match\\n`test`.\\n\\nThis is done by wrapping the generated regular expression in extra pattern\\nmatchers for non-word characters, such as spaces and punctuation.\\n\\n\\n#### Highlight Matches\\n\\nWhen this is enabled, and the matching setting in [Chat > Filtering > General](~)\\nis enabled, any matched terms will be highlighted in chat so you can see what\\nexactly matched your term.\\n\\nAny matches will not be displayed as emotes, links, etc.\\n\\nThis is a bit slower than not highlighting the match, so you may wish to only use\\nthis when testing and then disable it when you know your term works how you wish.\\n\";\n\n/***/ })\n\n}]);"],"names":["module"],"sourceRoot":""}