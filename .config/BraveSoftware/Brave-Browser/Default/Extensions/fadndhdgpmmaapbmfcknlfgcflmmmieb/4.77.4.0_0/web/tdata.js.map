{"version":3,"file":"tdata.js","mappings":"0SAsCO,MAAM,EAAN,MAAM,UAAoB,UAAS,CACzC,YAAYA,EAAM,CACjB,MAAMA,CAAI,EAEV,KAAK,SAAW,EACjB,CAEA,aAAc,CACb,YAAK,SAAW,GACT,IACR,CACD,EAX0C,mBAAnC,IAAMC,EAAN,EAcA,MAAM,EAAN,MAAM,UAAiB,KAAM,CACnC,YAAYC,EAAK,CAChB,MAAM,GAAGA,EAAI,OAAO,eAAeA,EAAI,SAAS,EAAE,CACnD,CACD,EAJoC,gBAA7B,IAAMC,EAAN,EAOQ,MAAM,EAAN,MAAM,UAAe,SAAO,CAC1C,eAAeC,EAAM,CACpB,MAAM,GAAGA,CAAI,EAEb,KAAK,UAAY,CAAC,EAClB,KAAK,eAAiB,CAAC,EAEvB,KAAK,OAAO,QAAQ,CACrB,CAEA,IAAI,UAAW,CACd,GAAK,KAAK,WACT,OAAO,KAAK,WAEb,MAAMC,EAAY,KAAK,QAAQ,gBAAgB,EAG/C,OAFW,KAAK,WAAaA,GAAW,YAAY,aAAa,CAGlE,CAEA,UAAW,CAEV,IAAIC,EAAS,KAAK,OAElB,GAAK,CAAEA,EAAS,CACf,MAAMC,EAAO,KAAK,KAAK,MAIvB,GADAD,GAFQC,GAAQA,EAAK,YAEN,OAAO,OACjBA,GAAQ,CAAED,EAAS,CACvB,IAAIE,EAAE,EAAGC,EAAOF,EAChB,KAAO,CAAED,GAAQ,cAAgBG,GAAQD,IAAM,IAC9CF,EAASG,GAAM,eAAe,OAC9BA,EAAOA,GAAM,MAGd,GAAK,CAAEH,EAAS,CACf,MAAMI,EAAO,KAAK,KAAK,WAAW,KAAMC,GAAKA,EAAE,OAAO,QAAQ,aAAc,GAAG,EAC1ED,IACJJ,EAASI,EAAK,MAAM,OACtB,CACD,CAEA,KAAK,OAASJ,CACf,CAEA,GAAK,CAAEA,EACN,OAAO,IAAI,QAAQ,IAAM,KAAK,SAAS,EAAG,EAAE,EAG7C,GAAK,CAAE,KAAK,OAAO,MAAQ,CAAE,KAAK,OAAO,cAAgB,CAAE,KAAK,OAAO,aAAa,KAAO,CAC1F,KAAK,IAAI,MAAM,mEAAmE,EAClF,MACD,CAEA,KAAK,kBAAoB,GAEzB,MAAMM,EAAI,KACTC,EAAQ,KAAK,OAAO,aAAa,YAAY,UAC7CC,EAAaD,EAAM,sBAqCpB,GAnCAA,EAAM,sBAAwB,SAASE,EAAOC,EAAa,GAAM,CAChE,MAAMC,EAAMH,EAAW,KAAK,KAAMC,EAAOC,CAAU,EACnD,GAAKC,GAAOA,EAAI,QACf,GAAI,CACH,GAAI,CACH,MAAMC,EAAOH,EAAM,cAAc,EAChCI,EAAOJ,EAAM,QACd,KAAK,UAAU,SAAS,EAAE,KAAK,CAC9B,MAAOI,EAAK,MACZ,UAAWA,EAAK,UAChB,eAAgBD,EAAOA,EAAK,KAAO,OACnC,WAAAF,CACD,CAAC,CAEF,OAAQd,EAAK,CAEZ,GAAKA,EAAI,SAAS,EAAE,SAAS,kBAAkB,GAAKa,EAAM,YAAc,CAAEA,EAAM,WAAW,SAAW,CAAEA,EAAM,WACxG,KAAK,IAAI,GAAKA,EAAM,iBAAmB,IAAM,KAAS,CAC1D,MAAMK,KAAW,OAAI,mCAAoCL,CAAK,EAC7DM,EAAOD,GAAYA,EAAS,OAAS,OAASA,EAAS,MAAQ,IAAIL,EAAM,OAAO,GAEjFH,EAAE,IAAI,KAAK,iDAAkDS,CAAI,EACjEN,EAAM,gBAAkB,KAAK,IAAI,EACjCA,EAAM,QAAQ,CACf,CAEF,CAED,OAAQb,EAAK,CACZU,EAAE,IAAI,QAAQV,CAAG,CAClB,CAED,OAAOe,CACR,EAEK,KAAK,OAAO,aAAa,WAAa,CAC1C,MAAMK,EAAc,KAAK,OAAO,aAAa,WAAW,UACxD,KAAK,kBAAoB,GACzB,KAAK,OAAO,aAAa,WAAW,UAAY,SAASC,EAAG,CAC3D,MAAMX,EAAI,KAAK,MAAMW,EAAE,OAAO,EAC9B,OAAKX,GAAKA,EAAE,cAAgBW,EAAE,cAC7BX,EAAE,YAAcW,EAAE,aAEZD,EAAY,KAAK,KAAMC,CAAC,CAChC,CACD,CAEA,MAAMC,EAAa,KAAK,WAAa,KAAK,OAAO,KAAK,YAEtD,KAAK,KAAO,IAAIA,EAAW,CAACC,EAAWC,IAAY,CAClD,GAAK,CAAE,KAAK,QACX,OAAOA,EAAQD,CAAS,EAEzB,IAAIE,EAAOF,EAAU,UACd,OAAO,KAAKE,CAAI,EAAE,SACxBA,EAAO,QAER,GAAI,CAGE,KAAK,mBACT,KAAK,gBAAgBF,CAAS,CAEhC,OAAQvB,EAAK,CACZ,YAAK,IAAI,QAAQA,EAAK,CACrB,KAAM,CACL,UAAWuB,EAAU,aACtB,EACA,MAAO,CACN,UAAWE,CACZ,CACD,CAAC,EACD,KAAK,IAAI,MAAM,2BAA4BzB,EAAKuB,CAAS,EAClDC,EAAQD,CAAS,CACzB,CAEA,OAAOC,EAAQD,CAAS,EAAE,IAAIG,GAAU,CAClCA,EAAO,YAAcA,EAAO,WAAW,gBAAkBH,EAAU,eACvE,KAAK,IAAI,MAAM,CACd,MAAO,OACP,SAAU,MACV,QAAS,GAAGA,EAAU,aAAa,KAAKG,EAAO,YAAcA,EAAO,WAAW,sBAAwB,IAAI,MAC3G,KAAM,CACL,UAAWD,CACZ,CACD,CAAC,EAEF,GAAI,CACH,KAAK,iBAAiBC,CAAM,CAC7B,OAAQ1B,EAAK,CACZ,KAAK,IAAI,QAAQA,EAAK,CACrB,KAAM,CACL,UAAWuB,EAAU,aACtB,EACA,MAAO,CACN,UAAWE,CACZ,CACD,CAAC,EACD,KAAK,IAAI,MAAM,4BAA6BzB,EAAK0B,CAAM,CACxD,CAEA,OAAOA,CACR,CAAC,CACF,CAAC,EAED,KAAK,SAAW,KAAK,OAAO,KAC5B,KAAK,YAAc,KAAK,OAAO,aAAa,KAG5C,KAAK,OAAO,KAAOJ,EAAW,KAAK,CAClC,KAAK,KACL,KAAK,QACN,CAAC,EAED,KAAK,OAAO,aAAa,KAAOA,EAAW,KAAK,CAC/C,KAAK,KACL,KAAK,WACN,CAAC,CAUF,CAGA,WAAY,CAEX,KAAK,OAAS,KAAK,QAAU,KAAK,WAAa,KAAK,SAAW,KAAK,aAAe,KAAK,YAAc,IACvG,CAGA,gBAAgBK,EAAS,CACxB,MAAMJ,EAAYI,EAAQ,cACzBC,EAAY,KAAK,UAAUL,CAAS,EACpCM,EAAQ,YAAYN,CAAS,GAC7BO,EAAgB,KAAK,aAAaD,CAAK,EAExC,GAAK,CAAED,GAAa,CAAEE,EACrB,OAED,MAAMC,EAAK,KAAK,OAAO,aACtBC,EAASD,GAAMA,EAAG,eAClBE,EAAYF,GAAMA,EAAG,QACrBG,EAASF,GAAUA,EAAOT,CAAS,EACnCY,EAAK,MAAM,QAAQD,CAAM,EAAIA,EAAO,CAAC,EAAIA,EACzCrB,EAAQoB,GAAaA,EAAU,IAAIE,CAAE,EAEtC,GAAKP,EACJ,UAAUQ,KAAOR,EACX,OAAOQ,GAAQ,WACnBA,EAAIT,CAAO,EACFS,EAAI,CAAC,GACd,KAAK,cAAcT,EAASS,EAAI,CAAC,CAAC,EAIrC,IAAIC,EAAW,CAAC,CAAET,EAElB,GAAKE,EAAgB,CACpB,MAAMT,EAAI,IAAItB,EAAY,CACzB,UAAAwB,EACA,QAAAI,CACD,CAAC,EAED,KAAK,KAAKE,EAAOR,CAAC,EACbA,EAAE,WACNgB,EAAW,GACb,CAEA,GAAKA,EAAW,CAIf,MAAMC,EAAI,KAAK,OAAO,aAAa,WAAW,MAAMH,CAAE,EACrDI,EAAK,KAAK,UAAY,KAAK,SAASZ,EAAQ,KAAK,EAE7CW,IACCC,GACJD,EAAE,YAAcC,EAChBZ,EAAQ,MAAM,IAAI,OAAO,KAAOY,EAChCZ,EAAQ,MAAM,IAAI,IAAMY,EAAG,OAEtB1B,IACJA,EAAM,SAAWc,EAAQ,MACpBd,EAAM,iBAAmBA,EAAM,gBAAgB,UACnDA,EAAM,gBAAgB,QAAQ,MAAQc,EAAQ,UAIhD,KAAK,IAAI,KAAK,sDAAuDJ,CAAS,EAC9E,KAAK,OAAO,aAAa,WAAW,MAAMY,CAAE,EAAI,MAEnD,CACD,CAEA,iBAAiBK,EAAU,CAC1B,GAAK,CAAEA,EAAS,WACf,OAED,MAAMjB,EAAYiB,EAAS,WAAW,cACrCZ,EAAY,KAAK,eAAeL,CAAS,EAE1C,GAAKK,EACJ,UAAUQ,KAAOR,EAChBQ,EAAII,CAAQ,EAEd,KAAK,KAAK,aAAajB,CAAS,GAAIiB,EAAS,IAAI,CAClD,CAGA,cAAcb,EAASc,EAAU,CAChCd,EAAQ,SAAQ,WAAMA,EAAQ,MAAOc,CAAQ,CAC9C,CAGA,iBAAiBlB,EAAWkB,EAAUC,EAAI,GAAM,CAC/C,GAAK,OAAOD,GAAa,WAAa,CACrC,GAAK,CAAEC,EACN,MAAM,IAAI,MAAM,kCAAkC,EAUnDD,EAAW,CAACA,EAAUA,CAAQ,CAC/B,EAEaC,EACT,KAAK,UAAUnB,CAAS,EAAI,KAAK,UAAUA,CAAS,GAAK,CAAC,EAC1D,KAAK,eAAeA,CAAS,EAAI,KAAK,eAAeA,CAAS,GAAK,CAAC,GAEnE,KAAKkB,CAAQ,CACnB,CAEA,mBAAmBlB,EAAWkB,EAAUC,EAAI,GAAM,CACjD,MAAMC,EAAOD,EAAM,KAAK,UAAUnB,CAAS,EAAI,KAAK,eAAeA,CAAS,EAC5E,GAAOoB,EAGP,IAAK,OAAOF,GAAa,WACxB,MAAM,IAAI,MAAM,qCAAqC,EAEtD,QAAQnC,EAAE,EAAGA,EAAIqC,EAAK,OAAQrC,IAAK,CAClC,MAAM8B,EAAMO,EAAKrC,CAAC,EAClB,GAAK,OAAO8B,GAAQ,WAAaA,IAAQK,EAAWL,EAAI,CAAC,IAAMK,EAAW,CACzEE,EAAK,OAAOrC,EAAG,CAAC,EAChB,MACD,CACD,EACD,CAOA,SAASiB,EAAW,CACnB,MAAMU,EAAY,KAAK,OAAO,cAAc,QAE5C,GAAOA,EAGP,UAAUW,KAAOX,EAAU,OAAO,EAAG,CACpC,MAAMY,EAAMD,GAAK,gBACjB,GAAKC,GAAK,YAActB,EACvB,OAAOsB,CACT,CACD,CAGA,aAAatB,EAAW,CACvB,MAAMV,EAAQ,KAAK,SAASU,CAAS,EAChC,CAAEV,GAAS,CAAEA,EAAM,YAAcA,EAAM,WAAW,OAGvDA,EAAM,QAAQ,CACf,CAGA,YAAYU,EAAWuB,EAAWC,EAAQ,IAAKC,EAAa,KAAQ,CACnE,MAAMnC,EAAQ,KAAK,SAASU,CAAS,EAErC,GAAKV,EAAQ,CACZ,MAAMa,EAASb,EAAM,WACrB,IAAIoC,EACGvB,EAEGA,EAAO,QAChBuB,EAAS,GACA,OAAOH,GAAc,WAC9BG,EAASH,EAAUpB,CAAM,EAEzBuB,KAAS,OAAIH,EAAWpB,CAAM,IAAM,OANpCuB,EAAS,GAQL,CAAEA,GAAU,KAAK,IAAI,GAAKpC,EAAM,iBAAmB,IAAMmC,IAC7DnC,EAAM,gBAAkB,KAAK,IAAI,EAIjCA,EAAM,QAAQ,MAAQ,OAAO,OAAO,CAAC,EAAGA,EAAM,QAAQ,KAAK,EAEtDkC,IAAU,EACdlC,EAAM,QAAQ,EACLkC,EAAQ,GACjB,WAAW,IAAM,CAEhBlC,EAAM,QAAQ,CACf,EAAGkC,CAAK,EAEX,CAEA,OAAOlC,CACR,CAGA,aAAaU,EAAWuB,EAAWC,EAAQ,IAAKC,EAAa,KAAQ,CACpE,MAAMnC,EAAQ,KAAK,SAASU,CAAS,EACpCG,EAASb,GAASA,EAAM,WAEzB,GAAK,CAAEA,EACN,OAED,IAAIE,EAEJ,GAAK,EAAAW,IACC,OAAOoB,GAAc,WACzB/B,EAAM+B,EAAUpB,CAAM,EAEtBX,KAAM,OAAI+B,EAAWpB,CAAM,EAEvBA,EAAO,UAIb,OAAKX,IAAQ,QAAa,KAAK,IAAI,GAAKF,EAAM,iBAAmB,IAAMmC,IACtEnC,EAAM,gBAAkB,KAAK,IAAI,EAIjCA,EAAM,QAAQ,MAAQ,OAAO,OAAO,CAAC,EAAGA,EAAM,QAAQ,KAAK,EAEtDkC,IAAU,EACdlC,EAAM,QAAQ,EACLkC,EAAQ,GACjB,WAAW,IAAMlC,EAAM,QAAQ,EAAGkC,CAAK,GAGlChC,CACR,CAED,EApa2C,cAA5B,IAAMmC,EAAN,C,wCClDR,MAAMC,EAAyD,CACrE,SAAU,CAACC,EAAiBC,KACtBD,EAAE,aAAeC,EAAE,YACtBD,EAAU,YAAcE,EAAUF,EAAE,YAAiCC,EAAE,WAAkB,EACjFA,EAAE,cACVD,EAAU,YAAcC,EAAE,aAErBD,GAGR,MAAO,CAACA,EAAcC,KAChBD,EAAE,OAAS,CAAEC,EAAE,MAAQA,EAAE,KAAK,QAAUD,EAAE,KAAK,SAM/CA,EAAE,cAAgBC,EAAE,aACvBD,EAAU,aAAeG,EAAMH,EAAE,aAAcC,EAAE,YAAY,EACrDA,EAAE,eACVD,EAAU,aAAeC,EAAE,eAEtBD,GAGR,oBAAqB,CAACA,EAA4BC,KAC5CD,EAAE,YAAcC,EAAE,YAMlBD,EAAE,cAAgBC,EAAE,aACvBD,EAAU,aAAeG,EAAMH,EAAE,aAAcC,EAAE,YAAY,EACrDA,EAAE,eACVD,EAAU,aAAeC,EAAE,eAEtBD,GAGR,mBAAoB,CAACA,EAA2BC,KAC1CD,EAAE,eAAiBC,EAAE,gBACpBD,EAAE,cAAc,OAASC,EAAE,cAAc,MAGzCD,EAAE,cAAc,KAAK,OAASC,EAAE,cAAc,KAAK,SAMpDD,EAAE,cAAgBC,EAAE,aACvBD,EAAU,aAAeG,EAAMH,EAAE,aAAcC,EAAE,YAAY,EACrDA,EAAE,eACVD,EAAU,aAAeC,EAAE,eAEtBD,GAGR,aAAc,CAACA,EAAqBC,KAC9BD,EAAE,YAAcC,EAAE,WACtBD,EAAE,WAAaE,EAAUF,EAAE,WAA+BC,EAAE,UAAiB,EACpEA,EAAE,aACXD,EAAE,WAAaC,EAAE,YAEXD,EAET,EAGO,SAASE,EAAUF,EAAUC,EAAU,CAC7C,IAAIG,EAAgB,GACpB,MAAMC,EAA+B,CAAC,EACtC,UAAUC,KAAQN,EACZ,CAAEM,GAAQ,CAAEA,EAAK,MAAQA,EAAK,KAAK,OAAS,SAG5CA,EAAK,YACTF,EAAgB,IAEjBC,EAAQC,EAAK,KAAK,KAAK,EAAIA,GAG5B,UAAUA,KAAQL,EAAG,CACpB,GAAK,CAAEK,GAAQ,CAAEA,EAAK,MAAQA,EAAK,KAAK,OAAS,OAChD,SAED,MAAMvC,EAAOuC,EAAK,KAAK,MACtBC,EAAMF,EAAQtC,CAAI,EAAIiC,EAAE,QAAQK,EAAQtC,CAAI,CAAC,EAAI,GAElD,GAAKwC,IAAQ,GAAK,CACjB,GAAKP,EAAEO,CAAG,EAAE,WAAaD,EAAK,WAAaN,EAAEO,CAAG,EAAE,YAAcD,EAAK,UACpE,SAEDN,EAAEO,CAAG,EAAIJ,EAAMH,EAAEO,CAAG,EAAGD,CAAI,EACtBN,EAAEO,CAAG,EAAE,YACXH,EAAgB,GAElB,KAAO,CACN,GAAKA,GAAiBE,EAAK,UAC1B,SAEDN,EAAE,KAAKM,CAAI,CACZ,CACD,CAEA,OAAON,CACR,CArCgB,EAAAE,EAAA,aAwCD,SAASC,EAAMH,EAAQC,EAAQ,CAC7C,OAAKD,EAAE,OAASC,EAAE,KACVD,EAEHD,EAAcC,EAAE,IAAI,EACjBD,EAAcC,EAAE,IAAI,EAAEA,EAAGC,CAAC,EAE3BD,CACR,CARwB,EAAAG,EAAA,Q,0ECuBT,MAAM,EAAN,MAAM,UAAmB,SAAO,CAkB9C,YAAYpC,EAAeyC,EAAwB,CAClD,MAAMzC,EAAMyC,CAAM,EAjBnB,YAAiB,KACjB,UAAsB,KAkBrB,KAAK,KAAO,KAAK,OAEjB,KAAK,OAAO,aAAa,EAEzB,KAAK,kBAAoB,IAAI,IAC7B,KAAK,qBAAuB,IAAI,IAEhC,KAAK,oBAAsB,IAAI,IAC/B,KAAK,uBAAyB,IAAI,IAElC,KAAK,kBAAoB,IAAI,IAC7B,KAAK,qBAAuB,IAAI,IAIhC,KAAK,gBAAe,YAAS,KAAK,aAAc,EAAE,EAClD,KAAK,oBAAmB,YAAS,KAAK,iBAAkB,EAAE,EAC1D,KAAK,cAAa,YAAS,KAAK,WAAY,EAAE,CAC/C,CAEA,YACC/C,EACAgD,EACAC,EACC,CACD,IAAIC,EACJ,MAAK,CAAEF,GAAa,CAAEC,GAAW,UAAWjD,GAASA,EAAM,MAC1DkD,EAAQlD,GAERkD,EAAQ,CACP,MAAAlD,EACA,UAAAgD,CACD,EAEKC,IACJC,EAAQ,OAAO,OAAOA,EAAOD,CAAO,IAG/B,KAAK,OAAO,OAAO,MAAMC,CAAK,CACtC,CAEA,OACCC,EACAH,EACAC,EACC,CACD,IAAIC,EACJ,MAAK,CAAEF,GAAa,CAAEC,GAAW,aAAcE,GAAYA,EAAS,SACnED,EAAQC,GAERD,EAAQ,CACP,SAAAC,EACA,UAAAH,CACD,EAEKC,IACJC,EAAQ,OAAO,OAAOA,EAAOD,CAAO,IAG/B,KAAK,OAAO,OAAO,OAAOC,CAAK,CACvC,CAEA,IAAI,cAAuB,CAC1B,MAAME,EAAU,KAAK,KAAK,WAAW,EACrC,OAAOA,GAAWA,EAAQ,cAAgB,IAC3C,CAEA,IAAI,QAAiB,CACpB,MAAMA,EAAU,KAAK,KAAK,WAAW,EACrC,OAAOA,GAAWA,EAAQ,QAAU,OACrC,CAUA,MAAM,WAAY,CAOjB,OANa,MAAM,KAAK,YAGvB,MAAM,oCACP,IAEa,MAAM,MACpB,CAcA,MAAM,sBACLpD,EACAqD,EAAgB,GAChBC,EAAwB,KACvB,CACD,MAAMrE,EAAO,MAAM,KAAK,YAGvB,MAAM,qCACN,CACC,MAAAe,EACA,MAAAqD,EACA,OAAAC,CACD,CACD,EAEMC,KAAQ,OAAI,yCAA0CtE,CAAI,GAAK,CAAC,EACrEuE,EAASxD,EAAM,YAAY,EAE5B,OAAK,MAAM,QAAQuD,CAAK,GACvBA,EAAM,KAAK,CAAChB,EAAEC,IAAM,CACnB,MAAMiB,EAAUlB,IAAMA,EAAE,MAAM,cAAc,IAAMiB,GAAUjB,GAAG,aAAa,cAAc,IAAMiB,GAC/FE,EAAUnB,IAAMC,EAAE,MAAM,cAAc,IAAMgB,GAAUhB,GAAG,aAAa,cAAc,IAAMgB,GAE3F,OAAKC,GAAW,CAAEC,EAAiB,GAC9B,CAAED,GAAWC,EAAiB,EAC5B,CACR,CAAC,EAEK,CACN,UAAQ,OAAI,2CAA4CzE,CAAI,EAC5D,MAAAsE,EACA,SAAU,IAAE,OAAI,6CAA8CtE,CAAI,EAClE,SAAO,OAAI,mCAAoCA,CAAI,GAAK,CACzD,CACD,CAQA,MAAM,YAAYqC,EAAShB,EAAsB,CAQhD,OAPa,MAAM,KAAK,YAGvB,MAAM,qCACN,CAAE,GAAAgB,EAAI,KAAAhB,CAAK,CACZ,IAEa,MAAM,IACpB,CAaA,MAAM,kBACLqD,EACAC,EACC,CACDD,EAAa,OAAOA,CAAU,EAE9B,MAAM1E,EAAO,MAAM,KAAK,OAIrB,CACF,SAAU,MAAM,oCAChB,UAAW,CACV,MAAO,CACN,UAAW0E,EACX,UAAWC,CACZ,CACD,CACD,CAAC,EAEKC,EAAO5E,GAAM,MAAM,mBAAmB,aAE5C,GAAK4E,IAAS,wBACb,MAAM,IAAI,oBACT,gDACA,mCACD,EAED,GAAKA,IAAS,sBACb,MAAM,IAAI,oBACT,2DACA,qCACA,OAAI,wCAAyC5E,CAAI,CAClD,EAED,GAAK4E,IAAS,UACb,MAAM,IAAI,oBACT,gDACA,uBACD,EAED,MAAO,EACR,CAcA,MAAM,iBAAiB7D,EAAeqD,EAAQ,GAAIC,EAAwB,KAAM,CAC/E,MAAMrE,EAAO,MAAM,KAAK,YAYvB,MAAM,oCACN,CACC,MAAAe,EACA,MAAAqD,EACA,OAAAC,CACD,CACD,EAEMC,KAAQ,OAAI,oCAAqCtE,CAAI,GAAK,CAAC,EAChEuE,EAASxD,EAAM,YAAY,EAE5B,OAAK,MAAM,QAAQuD,CAAK,GACvBA,EAAM,KAAK,CAAChB,EAAEC,IAAM,CACnB,MAAMiB,EAAUlB,IAAMA,EAAE,OAAO,cAAc,IAAMiB,GAAUjB,GAAG,aAAa,cAAc,IAAMiB,GAChGE,EAAUnB,IAAMC,EAAE,OAAO,cAAc,IAAMgB,GAAUhB,GAAG,aAAa,cAAc,IAAMgB,GAE5F,OAAKC,GAAW,CAAEC,EAAiB,GAC9B,CAAED,GAAWC,EAAiB,EAC5B,CACR,CAAC,EAEK,CACN,UAAQ,OAAI,sCAAuCzE,CAAI,EACvD,MAAAsE,EACA,SAAU,IAAE,OAAI,wCAAyCtE,CAAI,EAC7D,SAAO,OAAI,8BAA+BA,CAAI,GAAK,CACpD,CACD,CAQA,MAAM,QAAQqC,EAASwC,EAAe,CAQrC,OAPa,MAAM,KAAK,YAGvB,MAAM,oCACN,CAAE,GAAAxC,EAAI,MAAAwC,CAAM,CACb,IAEa,MAAM,IACpB,CAQA,MAAM,YAAYxC,EAASwC,EAAe,CAYzC,OAXa,MAAM,KAAK,YAOvB,MAAM,qCACN,CAAE,GAAAxC,EAAI,MAAAwC,CAAM,CACb,IAEa,MAAM,MAAM,mBAAmB,IAC7C,CAQA,MAAM,YAAYxC,EAASwC,EAAe,CAazC,OAZa,MAAM,KAAK,YAQvB,MAAM,qCACN,CAAE,GAAAxC,EAAI,MAAAwC,CAAM,CACb,IAEa,MAAM,MAAM,IAC1B,CAQA,MAAM,gBAAgBxC,EAASwC,EAAe,CAY7C,OAXa,MAAM,KAAK,YAOvB,MAAM,qCACN,CAAE,GAAAxC,EAAI,MAAAwC,CAAM,CACb,IAEa,MAAM,MAAM,MAAM,QAChC,CAQA,MAAM,WAAWH,EAAgBI,EAAwB,GAAO,CAC/DJ,EAAa,OAAOA,CAAU,EAC9BI,EAAwB,CAAC,CAAEA,EAE3B,MAAM9E,EAAO,MAAM,KAAK,OAOrB,CACF,SAAU,MAAM,qCAChB,UAAW,CACV,MAAO,CACN,SAAU0E,EACV,qBAAsBI,CACvB,CACD,CACD,CAAC,EAED,QAAQ,IAAI,gBAAiB9E,CAAI,EACjC,MAAME,EAAMF,GAAM,MAAM,YAAY,MACpC,GAAKE,GAAK,KACT,MAAM,IAAI,MAAMA,EAAI,IAAI,EAEzB,OAAOF,GAAM,MAAM,YAAY,MAChC,CAOA,MAAM,aAAa0E,EAAgB,CAClCA,EAAa,OAAOA,CAAU,EAE9B,MAAM1E,EAAO,MAAM,KAAK,OAIrB,CACF,SAAU,MAAM,qCAChB,UAAW,CACV,MAAO,CACN,SAAU0E,CACX,CACD,CACD,CAAC,EAED,eAAQ,IAAI,kBAAmB1E,CAAI,EAC5BA,GAAM,MAAM,cAAc,MAClC,CASA,MAAM,iBAAiBqC,EAASwC,EAAe,CAuB9C,OAtBa,MAAM,KAAK,YAavB,MAAM,qCACN,CACC,GAAAxC,EAAI,MAAAwC,EACJ,KAAM,UACN,KAAM,OACN,MAAO,CACR,CACD,IAEa,MAAM,MAAM,QAAQ,QAAQ,CAAC,GAAG,IAC9C,CAUA,aAAaxC,EAASwC,EAAe,CACpC,IAAIE,EACAC,EACAC,EAEJ,GAAK5C,EACJ0C,EAAQ,KAAK,kBACbE,EAAM,OAAO5C,CAAE,UACJwC,EACXE,EAAQ,KAAK,qBACbE,EAAMJ,MAEN,QAAO,QAAQ,OAAO,kCAAkC,EAEzD,IAAIK,EAASH,EAAM,IAAIE,CAAG,EAC1B,GAAIC,EACH,OAAOA,EAAO,CAAC,EAEhB,IAAIC,EACHC,EAED,OAAAJ,EAAS,IAAI,QAAgC,CAACK,EAAGC,IAAM,CACtDH,EAAUE,EACVD,EAAUE,CACX,CAAC,EAEDP,EAAM,IAAIE,EAAK,CAACD,EAAQG,EAAUC,CAAQ,CAAC,EAEpC,KAAK,gBACX,KAAK,WAAW,EAEVJ,CACR,CAEA,MAAM,YAAa,CAClB,GAAK,KAAK,eACT,OAED,KAAK,eAAiB,GAGtB,MAAMO,EAAM,CAAC,GAAG,KAAK,kBAAkB,KAAK,CAAC,EAAE,MAAM,EAAG,EAAE,EACzDC,EAAY,GAAKD,EAAI,OACrBE,EAASD,EAAY,EAAI,CAAC,GAAG,KAAK,qBAAqB,KAAK,CAAC,EAAE,MAAM,EAAGA,CAAS,EAAI,CAAC,EAEvF,IAAIE,EAEJ,GAAI,CAWHA,GAVa,MAAM,KAAK,YAErB,CACF,MAAO,MAAM,qCACb,UAAW,CACV,IAAKH,EAAI,OAASA,EAAM,KACxB,OAAQE,EAAO,OAASA,EAAS,IAClC,CACD,CAAC,IAEa,MAAM,OAAS,CAAC,CAE/B,OAAQvF,EAAK,CACZ,UAAUmC,KAAMkD,EAAK,CACpB,MAAML,EAAS,KAAK,kBAAkB,IAAI7C,CAAE,EAC5C,KAAK,kBAAkB,OAAOA,CAAE,EAC5B6C,GACHA,EAAO,CAAC,EAAEhF,CAAG,CACf,CAEA,UAAU2E,KAASY,EAAQ,CAC1B,MAAMP,EAAS,KAAK,qBAAqB,IAAIL,CAAK,EAClD,KAAK,qBAAqB,OAAOA,CAAK,EAClCK,GACHA,EAAO,CAAC,EAAEhF,CAAG,CACf,CAEA,MACD,CAEA,MAAMyF,EAAS,IAAI,IAAIJ,CAAG,EACzBK,EAAY,IAAI,IAAIH,CAAM,EAE3B,GAAK,MAAM,QAAQC,CAAK,EACvB,UAAUjF,KAAQiF,EAAO,CACxB,GAAK,CAAEjF,GAAQ,CAAEA,EAAK,GACrB,SAEDkF,EAAO,OAAOlF,EAAK,EAAE,EACrBmF,EAAU,OAAOnF,EAAK,KAAK,EAE3B,IAAIyE,EAAS,KAAK,kBAAkB,IAAIzE,EAAK,EAAE,EAC1CyE,IACJ,KAAK,kBAAkB,OAAOzE,EAAK,EAAE,EACrCyE,EAAO,CAAC,EAAEzE,CAAI,GAGfyE,EAAS,KAAK,qBAAqB,IAAIzE,EAAK,KAAK,EAC5CyE,IACJ,KAAK,qBAAqB,OAAOzE,EAAK,KAAK,EAC3CyE,EAAO,CAAC,EAAEzE,CAAI,EAEhB,CAED,UAAU4B,KAAMsD,EAAQ,CACvB,MAAMT,EAAS,KAAK,kBAAkB,IAAI7C,CAAE,EACvC6C,IACJ,KAAK,kBAAkB,OAAO7C,CAAE,EAChC6C,EAAO,CAAC,EAAE,IAAI,EAEhB,CAEA,UAAUL,KAASe,EAAW,CAC7B,MAAMV,EAAS,KAAK,qBAAqB,IAAIL,CAAK,EAC7CK,IACJ,KAAK,qBAAqB,OAAOL,CAAK,EACtCK,EAAO,CAAC,EAAE,IAAI,EAEhB,CAEA,KAAK,eAAiB,IAEjB,KAAK,kBAAkB,MAAQ,KAAK,qBAAqB,OAC7D,KAAK,WAAW,CAClB,CAaA,MAAM,eAAe7C,EAASwC,EAAe,CAE5C,OADa,MAAM,KAAK,iBAAiBxC,EAAIwC,CAAK,IACrC,EACd,CAGA,MAAM,gBAAgBxC,EAASwC,EAAe,CAa7C,OAZa,MAAM,KAAK,YAIrB,CACF,MAAO,MAAM,qCACb,UAAW,CACV,GAAAxC,EACA,MAAAwC,CACD,CACD,CAAC,IAEY,MAAM,MAAM,eAC1B,CAoBA,MAAM,QAAQgB,EAAa,CAC1B,MAAM7F,EAAO,MAAM,KAAK,YAAY,CACnC,MAAO,MAAM,qCACb,UAAW,CACV,GAAI6F,CACL,CACD,CAAC,EAED,SAAO,OAAI,YAAa7F,CAAI,CAC7B,CAsBA,MAAM,WAAW0E,EAAYoB,EAAOC,EAAS/B,EAAU,CAAC,EAAG,CAC1D,GAAK,OAAO8B,GAAU,SACrB,MAAM,IAAI,UAAU,sBAAsB,EAE3C,GAAK,CAAE,MAAM,QAAQC,CAAO,GAAKA,EAAQ,KAAKC,GAAK,OAAOA,GAAM,QAAQ,EACvE,MAAM,IAAI,UAAU,kCAAkC,EAEvD,IAAIC,EAAOjC,EAAQ,MAAQ,EAC1BkC,EAAWlC,EAAQ,UAAY,IAC3B,OAAOiC,GAAS,UAAYA,EAAO,KACvCA,EAAO,IACH,OAAOC,GAAa,UAAYA,EAAW,KAC/CA,EAAW,IAEZ,MAAMlG,EAAO,MAAM,KAAK,OAAO,CAC9B,SAAU,MAAM,qCAChB,UAAW,CACV,MAAO,CACN,SAAUiG,EACV,WAAYA,EAAO,EACnB,QAASF,EAAQ,IAAIC,IAAM,CAAC,MAAOA,CAAC,EAAE,EACtC,gBAAiBE,EACjB,QAAS,GAAGxB,CAAU,GACtB,qBAAsBV,EAAQ,sBAAwB,GACtD,eAAgBA,EAAQ,gBAAkB,GAC1C,MAAA8B,CACD,CACD,CACD,CAAC,EAED,SAAO,OAAI,uBAAwB9F,CAAI,CACxC,CAeA,MAAM,YAAY6F,EAAS,CAC1B,MAAM7F,EAAO,MAAM,KAAK,OAAO,CAC9B,SAAU,MAAM,qCAChB,UAAW,CACV,GAAI6F,CACL,CACD,CAAC,EAED,SAAO,OAAI,wBAAyB7F,CAAI,CACzC,CAeA,MAAM,cAAc6F,EAAS,CAC5B,MAAM7F,EAAO,MAAM,KAAK,OAAO,CAC9B,SAAU,MAAM,qCAChB,UAAW,CACV,GAAI6F,CACL,CACD,CAAC,EAED,SAAO,OAAI,0BAA2B7F,CAAI,CAC3C,CAaA,cAAcqC,EAASwC,EAAe,CACrC,IAAIE,EACAC,EACAC,EAEJ,GAAK5C,EACJ0C,EAAQ,KAAK,oBACbE,EAAM,OAAO5C,CAAE,UACJwC,EACXE,EAAQ,KAAK,uBACbE,EAAMJ,MAEN,QAAO,QAAQ,OAAO,kCAAkC,EAEzD,IAAIK,EAASH,EAAM,IAAIE,CAAG,EAC1B,GAAIC,EACH,OAAOA,EAAO,CAAC,EAEhB,IAAIC,EACHC,EAED,OAAAJ,EAAS,IAAI,QAAsC,CAACK,EAAGC,IAAM,CAC5DH,EAAUE,EACVD,EAAUE,CACX,CAAC,EAEDP,EAAM,IAAIE,EAAK,CAACD,EAAQG,EAAUC,CAAQ,CAAC,EAEpC,KAAK,kBACX,KAAK,aAAa,EAEZJ,CACR,CAEA,MAAM,cAAe,CACpB,GAAK,KAAK,iBACT,OAED,KAAK,iBAAmB,GAGxB,MAAMO,EAAM,CAAC,GAAG,KAAK,oBAAoB,KAAK,CAAC,EAAE,MAAM,EAAG,EAAE,EAC3DC,EAAY,GAAKD,EAAI,OACrBE,EAASD,EAAY,EAAI,CAAC,GAAG,KAAK,uBAAuB,KAAK,CAAC,EAAE,MAAM,EAAGA,CAAS,EAAI,CAAC,EAEzF,IAAIE,EAMJ,GAAI,CAeHA,GAda,MAAM,KAAK,YAMrB,CACF,MAAO,MAAM,qCACb,UAAW,CACV,IAAKH,EAAI,OAASA,EAAM,KACxB,OAAQE,EAAO,OAASA,EAAS,IAClC,CACD,CAAC,IAEa,MAAM,KAErB,OAAQvF,EAAK,CACZ,UAAUmC,KAAMkD,EAAK,CACpB,MAAML,EAAS,KAAK,oBAAoB,IAAI7C,CAAE,EAC9C,KAAK,oBAAoB,OAAOA,CAAE,EAC7B6C,GACJA,EAAO,CAAC,EAAEhF,CAAG,CACf,CAEA,UAAU2E,KAASY,EAAQ,CAC1B,MAAMP,EAAS,KAAK,uBAAuB,IAAIL,CAAK,EACpD,KAAK,uBAAuB,OAAOA,CAAK,EACnCK,GACJA,EAAO,CAAC,EAAEhF,CAAG,CACf,CAEA,MACD,CAEA,MAAMyF,EAAS,IAAI,IAAIJ,CAAG,EACzBK,EAAY,IAAI,IAAIH,CAAM,EAE3B,GAAK,MAAM,QAAQC,CAAK,EACvB,UAAUjF,KAAQiF,EAAO,CACxB,GAAK,CAAEjF,GAAQ,CAAEA,EAAK,GACrB,SAEDkF,EAAO,OAAOlF,EAAK,EAAE,EACrBmF,EAAU,OAAOnF,EAAK,KAAK,EAE3B,IAAIyE,EAAS,KAAK,oBAAoB,IAAIzE,EAAK,EAAE,EAC5CyE,IACJ,KAAK,oBAAoB,OAAOzE,EAAK,EAAE,EACvCyE,EAAO,CAAC,EAAEzE,EAAK,MAAM,GAGtByE,EAAS,KAAK,uBAAuB,IAAIzE,EAAK,KAAK,EAC9CyE,IACJ,KAAK,uBAAuB,OAAOzE,EAAK,KAAK,EAC7CyE,EAAO,CAAC,EAAEzE,EAAK,MAAM,EAEvB,CAED,UAAU4B,KAAMsD,EAAQ,CACvB,MAAMT,EAAS,KAAK,oBAAoB,IAAI7C,CAAE,EACzC6C,IACJ,KAAK,oBAAoB,OAAO7C,CAAE,EAClC6C,EAAO,CAAC,EAAE,IAAI,EAEhB,CAEA,UAAUL,KAASe,EAAW,CAC7B,MAAMV,EAAS,KAAK,uBAAuB,IAAIL,CAAK,EAC/CK,IACJ,KAAK,uBAAuB,OAAOL,CAAK,EACxCK,EAAO,CAAC,EAAE,IAAI,EAEhB,CAEA,KAAK,iBAAmB,IAEnB,KAAK,oBAAoB,MAAQ,KAAK,uBAAuB,OACjE,KAAK,aAAa,CACpB,CAaA,eAAe7C,EAASwC,EAAe,CACtC,IAAIE,EACAC,EACAC,EAEJ,GAAK5C,EACJ0C,EAAQ,KAAK,kBACbE,EAAM,OAAO5C,CAAE,UACJwC,EACXE,EAAQ,KAAK,qBACbE,EAAMJ,MAEN,QAAO,QAAQ,OAAO,kCAAkC,EAEzD,IAAIK,EAASH,EAAM,IAAIE,CAAG,EAC1B,GAAIC,EACH,OAAOA,EAAO,CAAC,EAEhB,IAAIC,EACHC,EAED,OAAAJ,EAAS,IAAI,QAAqC,CAACK,EAAGC,IAAM,CAC3DH,EAAUE,EACVD,EAAUE,CACX,CAAC,EAEDP,EAAM,IAAIE,EAAK,CAACD,EAAQG,EAAUC,CAAQ,CAAC,EAEpC,KAAK,gBACX,KAAK,iBAAiB,EAEhBJ,CACR,CAEA,MAAM,kBAAmB,CACxB,GAAK,KAAK,eACT,OAED,KAAK,eAAiB,GAGtB,MAAMO,EAAM,CAAC,GAAG,KAAK,kBAAkB,KAAK,CAAC,EAAE,MAAM,EAAG,EAAE,EACzDC,EAAY,GAAKD,EAAI,OACrBE,EAASD,EAAY,EAAI,CAAC,GAAG,KAAK,qBAAqB,KAAK,CAAC,EAAE,MAAM,EAAGA,CAAS,EAAI,CAAC,EAEvF,IAAIE,EAQJ,GAAI,CAWHA,GAVa,MAAM,KAAK,YAErB,CACF,MAAO,MAAM,oCACb,UAAW,CACV,IAAKH,EAAI,OAASA,EAAM,KACxB,OAAQE,EAAO,OAASA,EAAS,IAClC,CACD,CAAC,IAEa,MAAM,KAErB,OAAQvF,EAAK,CACZ,UAAUmC,KAAMkD,EAAK,CACpB,MAAML,EAAS,KAAK,kBAAkB,IAAI7C,CAAE,EACvC6C,IACJ,KAAK,kBAAkB,OAAO7C,CAAE,EAChC6C,EAAO,CAAC,EAAEhF,CAAG,EAEf,CAEA,UAAU2E,KAASY,EAAQ,CAC1B,MAAMP,EAAS,KAAK,qBAAqB,IAAIL,CAAK,EAC7CK,IACJ,KAAK,qBAAqB,OAAOL,CAAK,EACtCK,EAAO,CAAC,EAAEhF,CAAG,EAEf,CAEA,MACD,CAEA,MAAMyF,EAAS,IAAI,IAAIJ,CAAG,EACzBK,EAAY,IAAI,IAAIH,CAAM,EAE3B,GAAK,MAAM,QAAQC,CAAK,EACvB,UAAUjF,KAAQiF,EAAO,CACxB,GAAK,CAAEjF,GAAQ,CAAEA,EAAK,GACrB,SAEDkF,EAAO,OAAOlF,EAAK,EAAE,EACrBmF,EAAU,OAAOnF,EAAK,KAAK,EAE3B,IAAIyE,EAAS,KAAK,kBAAkB,IAAIzE,EAAK,EAAE,EAC1CyE,IACJ,KAAK,kBAAkB,OAAOzE,EAAK,EAAE,EACrCyE,EAAO,CAAC,EAAEzE,EAAK,QAAQ,6BAA+B,IAAI,GAG3DyE,EAAS,KAAK,qBAAqB,IAAIzE,EAAK,KAAK,EAC5CyE,IACJ,KAAK,qBAAqB,OAAOzE,EAAK,KAAK,EAC3CyE,EAAO,CAAC,EAAEzE,EAAK,QAAQ,6BAA+B,IAAI,EAE5D,CAED,UAAU4B,KAAMsD,EAAQ,CACvB,MAAMT,EAAS,KAAK,kBAAkB,IAAI7C,CAAE,EACvC6C,IACJ,KAAK,kBAAkB,OAAO7C,CAAE,EAChC6C,EAAO,CAAC,EAAE,IAAI,EAEhB,CAEA,UAAUL,KAASe,EAAW,CAC7B,MAAMV,EAAS,KAAK,qBAAqB,IAAIL,CAAK,EAC7CK,IACJ,KAAK,qBAAqB,OAAOL,CAAK,EACtCK,EAAO,CAAC,EAAE,IAAI,EAEhB,CAEA,KAAK,eAAiB,IAEjB,KAAK,kBAAkB,MAAQ,KAAK,qBAAqB,OAC7D,KAAK,iBAAiB,CACxB,CAYA,MAAM,gBAAgBnE,EAAe,CAiBpC,MAAMoF,GAhBO,MAAM,KAAK,YAQrB,CACF,MAAO,MAAM,qCACb,UAAW,CACV,MAAApF,EACA,MAAO,GACR,CACD,CAAC,IAEmB,MAAM,oBAAoB,MAC9C,GAAK,CAAE,MAAM,QAAQoF,CAAK,GAAK,CAAEA,EAAM,OACtC,MAAO,CAAC,EAET,MAAMlF,EAAgB,CAAC,EACvB,UAAUmF,KAAQD,EAAO,CACxB,MAAME,EAAMD,GAAM,MAAM,QACnBC,GACJpF,EAAI,KAAKoF,CAAG,CACd,CAEA,OAAOpF,CACR,CACD,EAzjC+C,kBAAhC,IAAMqF,EAAN,C","sources":["webpack://frankerfacez/./src/utilities/compat/apollo.js","webpack://frankerfacez/./src/utilities/graphql.ts","webpack://frankerfacez/./src/utilities/twitch-data.ts"],"sourcesContent":["'use strict';\n\n// ============================================================================\n// Apollo\n// Legendary Data Access Layer\n// ============================================================================\n\nimport Module from 'utilities/module';\nimport {get} from 'utilities/object';\nimport merge from 'utilities/graphql';\nimport { FFZEvent } from 'utilities/events';\n\n\n/*const BAD_ERRORS = [\n\t'timeout',\n\t'unable to load',\n\t'error internal',\n\t'context deadline exceeded',\n\t'unexpected service response',\n\t'service unavailable',\n\t'404',\n\t'500',\n\t'501',\n\t'502',\n\t'503',\n\t'504',\n\t'Internal Server Error',\n\t'http://',\n\t'https://'\n];\n\nfunction skip_error(err) {\n\tfor(const m of BAD_ERRORS)\n\t\tif ( err.message.includes(m) )\n\t\t\treturn true;\n}*/\n\n\nexport class ApolloEvent extends FFZEvent {\n\tconstructor(data) {\n\t\tsuper(data);\n\n\t\tthis._changed = false;\n\t}\n\n\tmarkChanged() {\n\t\tthis._changed = true;\n\t\treturn this;\n\t}\n}\n\n\nexport class GQLError extends Error {\n\tconstructor(err) {\n\t\tsuper(`${err.message}; Location: ${err.locations}`);\n\t}\n}\n\n\nexport default class Apollo extends Module {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.modifiers = {};\n\t\tthis.post_modifiers = {};\n\n\t\tthis.inject('..fine');\n\t}\n\n\tget gqlPrint() {\n\t\tif ( this._gql_print )\n\t\t\treturn this._gql_print;\n\n\t\tconst web_munch = this.resolve('site.web_munch'),\n\t\t\tprinter = this._gql_print = web_munch?.getModule?.('gql-printer');\n\n\t\treturn printer;\n\t}\n\n\tonEnable() {\n\t\t// TODO: Come up with a better way to await something existing.\n\t\tlet client = this.client;\n\n\t\tif ( ! client ) {\n\t\t\tconst root = this.fine.react,\n\t\t\t\tinst = root && root.stateNode;\n\n\t\t\tclient = inst?.props?.client;\n\t\t\tif ( root && ! client ) {\n\t\t\t\tlet i=0, node = root;\n\t\t\t\twhile( ! client?.queryManager && node && i++ < 20 ) {\n\t\t\t\t\tclient = node?.memoizedProps?.client;\n\t\t\t\t\tnode = node?.child;\n\t\t\t\t}\n\n\t\t\t\tif ( ! client ) {\n\t\t\t\t\tconst host = this.fine.searchTree(null, n => n.props?.client?.queryManager, 500);\n\t\t\t\t\tif ( host )\n\t\t\t\t\t\tclient = host.props.client;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.client = client;\n\t\t}\n\n\t\tif ( ! client )\n\t\t\treturn new Promise(() => this.onEnable(), 50);\n\n\t\t// Register middleware so that we can intercept requests.\n\t\tif ( ! this.client.link || ! this.client.queryManager || ! this.client.queryManager.link ) {\n\t\t\tthis.log.error('Apollo does not have a Link. We are unable to manipulate queries.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hooked_query_init = false;\n\n\t\tconst t = this,\n\t\t\tproto = this.client.queryManager.constructor.prototype,\n\t\t\told_qm_get = proto.getCurrentQueryResult;\n\n\t\tproto.getCurrentQueryResult = function(query, optimistic = true) {\n\t\t\tconst out = old_qm_get.call(this, query, optimistic);\n\t\t\tif ( out && out.partial )\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst prev = query.getLastResult(),\n\t\t\t\t\t\t\topts = query.options;\n\t\t\t\t\t\tthis.dataStore.getCache().read({\n\t\t\t\t\t\t\tquery: opts.query,\n\t\t\t\t\t\t\tvariables: opts.variables,\n\t\t\t\t\t\t\tpreviousResult: prev ? prev.data : undefined,\n\t\t\t\t\t\t\toptimistic\n\t\t\t\t\t\t});\n\n\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\t// If there's a missing field, and we have a lastResult, and lastResult is not loading, and lastResult is not error...\n\t\t\t\t\t\tif ( err.toString().includes(\"Can't find field\") && query.lastResult && ! query.lastResult.loading && ! query.lastError ) {\n\t\t\t\t\t\t\tif ( Date.now() - (query._ffz_last_retry || 0) >= 120000 ) {\n\t\t\t\t\t\t\t\tconst raw_name = get('options.query.definitions.0.name', query),\n\t\t\t\t\t\t\t\t\tname = raw_name && raw_name.kind === 'Name' ? raw_name.value : `#${query.queryId}`;\n\n\t\t\t\t\t\t\t\tt.log.info('Forcing query to refetch due to missing field:', name);\n\t\t\t\t\t\t\t\tquery._ffz_last_retry = Date.now();\n\t\t\t\t\t\t\t\tquery.refetch();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} catch(err) {\n\t\t\t\t\tt.log.capture(err);\n\t\t\t\t}\n\n\t\t\treturn out;\n\t\t}\n\n\t\tif ( this.client.queryManager.queryStore ) {\n\t\t\tconst old_qm_init = this.client.queryManager.queryStore.initQuery;\n\t\t\tthis.hooked_query_init = true;\n\t\t\tthis.client.queryManager.queryStore.initQuery = function(e) {\n\t\t\t\tconst t = this.store[e.queryId];\n\t\t\t\tif ( t && t.queryString !== e.queryString )\n\t\t\t\t\tt.queryString = e.queryString;\n\n\t\t\t\treturn old_qm_init.call(this, e);\n\t\t\t}\n\t\t}\n\n\t\tconst ApolloLink = this.ApolloLink = this.client.link.constructor;\n\n\t\tthis.link = new ApolloLink((operation, forward) => {\n\t\t\tif ( ! this.enabled )\n\t\t\t\treturn forward(operation);\n\n\t\t\tlet vars = operation.variables;\n\t\t\tif ( ! Object.keys(vars).length )\n\t\t\t\tvars = undefined;\n\n\t\t\ttry {\n\t\t\t\t// ONLY do this if we've hooked query init, thus letting us ignore certain issues\n\t\t\t\t// that would cause Twitch to show lovely \"Error loading data\" messages everywhere.\n\t\t\t\tif ( this.hooked_query_init )\n\t\t\t\t\tthis.apolloPreFlight(operation);\n\n\t\t\t} catch(err) {\n\t\t\t\tthis.log.capture(err, {\n\t\t\t\t\ttags: {\n\t\t\t\t\t\toperation: operation.operationName\n\t\t\t\t\t},\n\t\t\t\t\textra: {\n\t\t\t\t\t\tvariables: vars\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.log.error('Error running Pre-Flight', err, operation);\n\t\t\t\treturn forward(operation);\n\t\t\t}\n\n\t\t\treturn forward(operation).map(result => {\n\t\t\t\tif ( result.extensions && result.extensions.operationName === operation.operationName )\n\t\t\t\t\tthis.log.crumb({\n\t\t\t\t\t\tlevel: 'info',\n\t\t\t\t\t\tcategory: 'gql',\n\t\t\t\t\t\tmessage: `${operation.operationName} [${result.extensions && result.extensions.durationMilliseconds || '??'}ms]`,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tvariables: vars,\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.apolloPostFlight(result);\n\t\t\t\t} catch(err) {\n\t\t\t\t\tthis.log.capture(err, {\n\t\t\t\t\t\ttags: {\n\t\t\t\t\t\t\toperation: operation.operationName\n\t\t\t\t\t\t},\n\t\t\t\t\t\textra: {\n\t\t\t\t\t\t\tvariables: vars\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.log.error('Error running Post-Flight', err, result);\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t})\n\n\t\tthis.old_link = this.client.link;\n\t\tthis.old_qm_link = this.client.queryManager.link;\n\t\t//this.old_qm_dedup = this.client.queryManager.deduplicator;\n\n\t\tthis.client.link = ApolloLink.from([\n\t\t\tthis.link,\n\t\t\tthis.old_link\n\t\t]);\n\n\t\tthis.client.queryManager.link = ApolloLink.from([\n\t\t\tthis.link,\n\t\t\tthis.old_qm_link\n\t\t]);\n\n\t\t/*this.client.queryManager.deduplicator = ApolloLink.from([\n\t\t\tthis.link,\n\t\t\tthis.old_qm_dedup\n\t\t]);*/\n\n\t\t/*this.client.link = this.link.concat(this.old_link);\n\t\tthis.client.queryManager.link = this.link.concat(this.old_qm_link);\n\t\tthis.client.queryManager.deduplicator = this.link.concat(this.old_qm_dedup);*/\n\t}\n\n\n\tonDisable() {\n\t\t// Remove our references to things.\n\t\tthis.client = this.printer = this._gql_print = this.old_link = this.old_qm_dedup = this.old_qm_link = null;\n\t}\n\n\n\tapolloPreFlight(request) {\n\t\tconst operation = request.operationName,\n\t\t\tmodifiers = this.modifiers[operation],\n\t\t\tevent = `:request.${operation}`,\n\t\t\thas_listeners = this.hasListeners(event);\n\n\t\tif ( ! modifiers && ! has_listeners )\n\t\t\treturn;\n\n\t\tconst qm = this.client.queryManager,\n\t\t\tid_map = qm && qm.queryIdsByName,\n\t\t\tquery_map = qm && qm.queries,\n\t\t\traw_id = id_map && id_map[operation],\n\t\t\tid = Array.isArray(raw_id) ? raw_id[0] : raw_id,\n\t\t\tquery = query_map && query_map.get(id);\n\n\t\tif ( modifiers ) {\n\t\t\tfor(const mod of modifiers) {\n\t\t\t\tif ( typeof mod === 'function' )\n\t\t\t\t\tmod(request);\n\t\t\t\telse if ( mod[1] )\n\t\t\t\t\tthis.applyModifier(request, mod[1]);\n\t\t\t}\n\t\t}\n\n\t\tlet modified = !! modifiers;\n\n\t\tif ( has_listeners ) {\n\t\t\tconst e = new ApolloEvent({\n\t\t\t\toperation,\n\t\t\t\trequest\n\t\t\t});\n\n\t\t\tthis.emit(event, e);\n\t\t\tif ( e._changed )\n\t\t\t\tmodified = true;\n\t\t}\n\n\t\tif ( modified ) {\n\t\t\t// Wipe the old query data. This is obviously not optimal, but Apollo will\n\t\t\t// raise an exception otherwise because the query string doesn't match.\n\n\t\t\tconst q = this.client.queryManager.queryStore.store[id],\n\t\t\t\tqs = this.gqlPrint && this.gqlPrint(request.query);\n\n\t\t\tif ( q )\n\t\t\t\tif ( qs ) {\n\t\t\t\t\tq.queryString = qs;\n\t\t\t\t\trequest.query.loc.source.body = qs;\n\t\t\t\t\trequest.query.loc.end = qs.length;\n\n\t\t\t\t\tif ( query ) {\n\t\t\t\t\t\tquery.document = request.query;\n\t\t\t\t\t\tif ( query.observableQuery && query.observableQuery.options )\n\t\t\t\t\t\t\tquery.observableQuery.options.query = request.query;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.info('Unable to find GQL Print. Clearing store for query:', operation);\n\t\t\t\t\tthis.client.queryManager.queryStore.store[id] = null;\n\t\t\t\t}\n\t\t}\n\t}\n\n\tapolloPostFlight(response) {\n\t\tif ( ! response.extensions )\n\t\t\treturn;\n\n\t\tconst operation = response.extensions.operationName,\n\t\t\tmodifiers = this.post_modifiers[operation];\n\n\t\tif ( modifiers )\n\t\t\tfor(const mod of modifiers)\n\t\t\t\tmod(response);\n\n\t\tthis.emit(`:response.${operation}`, response.data);\n\t}\n\n\n\tapplyModifier(request, modifier) { // eslint-disable-line class-methods-use-this\n\t\trequest.query = merge(request.query, modifier);\n\t}\n\n\n\tregisterModifier(operation, modifier, pre=true) {\n\t\tif ( typeof modifier !== 'function' ) {\n\t\t\tif ( ! pre )\n\t\t\t\tthrow new Error('post modifiers must be functions');\n\n\t\t\t/*let parsed;\n\t\t\ttry {\n\t\t\t\tparsed = this.graphql ? this.graphql.parse(modifier, {noLocation: true}) : null;\n\t\t\t} catch(err) {\n\t\t\t\tthis.log.error(`Error parsing GraphQL statement for \"${operation}\" modifier.`, err);\n\t\t\t\tparsed = false;\n\t\t\t}*/\n\n\t\t\tmodifier = [modifier, modifier]; // parsed];\n\t\t}\n\n\t\tconst mods = pre\n\t\t\t? (this.modifiers[operation] = this.modifiers[operation] || [])\n\t\t\t: (this.post_modifiers[operation] = this.post_modifiers[operation] || []);\n\n\t\tmods.push(modifier);\n\t}\n\n\tunregisterModifier(operation, modifier, pre=true) {\n\t\tconst mods = pre ? this.modifiers[operation] : this.post_modifiers[operation];\n\t\tif ( ! mods )\n\t\t\treturn;\n\n\t\tif ( typeof modifier !== 'function' )\n\t\t\tthrow new Error('graphql modifiers cannot be removed');\n\n\t\tfor(let i=0; i < mods.length; i++) {\n\t\t\tconst mod = mods[i];\n\t\t\tif ( typeof mod === 'function' ? mod === modifier : mod[0] === modifier ) {\n\t\t\t\tmods.splice(i, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// ========================================================================\n\t// Querying\n\t// ========================================================================\n\n\tgetQuery(operation) {\n\t\tconst query_map = this.client.queryManager?.queries;\n\n\t\tif ( ! query_map )\n\t\t\treturn;\n\n\t\tfor(const val of query_map.values()) {\n\t\t\tconst obs = val?.observableQuery;\n\t\t\tif ( obs?.queryName === operation )\n\t\t\t\treturn obs;\n\t\t}\n\t}\n\n\n\tmaybeRefetch(operation) {\n\t\tconst query = this.getQuery(operation);\n\t\tif ( ! query || ! query.lastResult || query.lastResult.stale )\n\t\t\treturn;\n\n\t\tquery.refetch();\n\t}\n\n\n\tensureQuery(operation, predicate, delay = 500, retry_wait = 120000) {\n\t\tconst query = this.getQuery(operation);\n\n\t\tif ( query ) {\n\t\t\tconst result = query.lastResult;\n\t\t\tlet passed;\n\t\t\tif ( ! result )\n\t\t\t\tpassed = false;\n\t\t\telse if ( result.loading )\n\t\t\t\tpassed = true;\n\t\t\telse if ( typeof predicate === 'function' )\n\t\t\t\tpassed = predicate(result);\n\t\t\telse\n\t\t\t\tpassed = get(predicate, result) !== undefined;\n\n\t\t\tif ( ! passed && Date.now() - (query._ffz_last_retry || 0) >= retry_wait ) {\n\t\t\t\tquery._ffz_last_retry = Date.now();\n\n\t\t\t\t// Make a shallow clone of the query document to avoid hitting the\n\t\t\t\t// cache in transformDocument.\n\t\t\t\tquery.options.query = Object.assign({}, query.options.query);\n\n\t\t\t\tif ( delay === 0 )\n\t\t\t\t\tquery.refetch();\n\t\t\t\telse if ( delay > 0 )\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\tquery.refetch()\n\t\t\t\t\t}, delay);\n\t\t\t}\n\t\t}\n\n\t\treturn query;\n\t}\n\n\n\tgetFromQuery(operation, predicate, delay = 500, retry_wait = 120000) {\n\t\tconst query = this.getQuery(operation),\n\t\t\tresult = query && query.lastResult;\n\n\t\tif ( ! query )\n\t\t\treturn undefined;\n\n\t\tlet out;\n\n\t\tif ( result ) {\n\t\t\tif ( typeof predicate === 'function' )\n\t\t\t\tout = predicate(result);\n\t\t\telse\n\t\t\t\tout = get(predicate, result)\n\n\t\t\tif ( result.loading )\n\t\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( out === undefined && Date.now() - (query._ffz_last_retry || 0) >= retry_wait ) {\n\t\t\tquery._ffz_last_retry = Date.now();\n\n\t\t\t// Make a shallow clone of the query document to avoid hitting the\n\t\t\t// cache in transformDocument.\n\t\t\tquery.options.query = Object.assign({}, query.options.query);\n\n\t\t\tif ( delay === 0 )\n\t\t\t\tquery.refetch();\n\t\t\telse if ( delay > 0 )\n\t\t\t\tsetTimeout(() => query.refetch(), delay);\n\t\t}\n\n\t\treturn out;\n\t}\n\n}\n","'use strict';\n\nimport type { DefinitionNode, DocumentNode, FieldNode, FragmentDefinitionNode, OperationDefinitionNode, SelectionNode, SelectionSetNode } from 'graphql';\n\n\n// ============================================================================\n// GraphQL Document Manipulation\n// ============================================================================\n\nexport const MERGE_METHODS: Record<string, (a: any, b: any) => any> = {\n\tDocument: (a: DocumentNode, b: DocumentNode) => {\n\t\tif ( a.definitions && b.definitions )\n\t\t\t(a as any).definitions = mergeList(a.definitions as DefinitionNode[], b.definitions as any);\n\t\telse if ( b.definitions )\n\t\t\t(a as any).definitions = b.definitions;\n\n\t\treturn a;\n\t},\n\n\tField: (a: FieldNode, b: FieldNode) => {\n\t\tif ( a.name && (! b.name || b.name.value !== a.name.value) )\n\t\t\treturn a;\n\n\t\t// TODO: arguments\n\t\t// TODO: directives\n\n\t\tif ( a.selectionSet && b.selectionSet )\n\t\t\t(a as any).selectionSet = merge(a.selectionSet, b.selectionSet);\n\t\telse if ( b.selectionSet )\n\t\t\t(a as any).selectionSet = b.selectionSet;\n\n\t\treturn a;\n\t},\n\n\tOperationDefinition: (a: OperationDefinitionNode, b: OperationDefinitionNode) => {\n\t\tif ( a.operation !== b.operation )\n\t\t\treturn a;\n\n\t\t// TODO: variableDefinitions\n\t\t// TODO: directives\n\n\t\tif ( a.selectionSet && b.selectionSet )\n\t\t\t(a as any).selectionSet = merge(a.selectionSet, b.selectionSet);\n\t\telse if ( b.selectionSet )\n\t\t\t(a as any).selectionSet = b.selectionSet;\n\n\t\treturn a;\n\t},\n\n\tFragmentDefinition: (a: FragmentDefinitionNode, b: FragmentDefinitionNode) => {\n\t\tif ( a.typeCondition && b.typeCondition ) {\n\t\t\tif ( a.typeCondition.kind !== b.typeCondition.kind )\n\t\t\t\treturn a;\n\n\t\t\tif ( a.typeCondition.name.value != b.typeCondition.name.value )\n\t\t\t\treturn a;\n\t\t}\n\n\t\t// TODO: directives\n\n\t\tif ( a.selectionSet && b.selectionSet )\n\t\t\t(a as any).selectionSet = merge(a.selectionSet, b.selectionSet);\n\t\telse if ( b.selectionSet )\n\t\t\t(a as any).selectionSet = b.selectionSet;\n\n\t\treturn a;\n\t},\n\n\tSelectionSet: (a: SelectionSetNode, b: SelectionSetNode) => {\n\t\tif ( a.selections && b.selections )\n\t\t\ta.selections = mergeList(a.selections as SelectionNode[], b.selections as any);\n\t\telse if ( b.selections )\n\t\t\ta.selections = b.selections;\n\n\t\treturn a;\n\t}\n}\n\n// TODO: Type safe this\nexport function mergeList(a: any[], b: any[]) {\n\tlet has_operation = false;\n\tconst a_names: Record<string, any> = {};\n\tfor(const item of a) {\n\t\tif ( ! item || ! item.name || item.name.kind !== 'Name' )\n\t\t\tcontinue;\n\n\t\tif ( item.operation )\n\t\t\thas_operation = true;\n\n\t\ta_names[item.name.value] = item;\n\t}\n\n\tfor(const item of b) {\n\t\tif ( ! item || ! item.name || item.name.kind !== 'Name' )\n\t\t\tcontinue;\n\n\t\tconst name = item.name.value,\n\t\t\tidx = a_names[name] ? a.indexOf(a_names[name]) : -1;\n\n\t\tif ( idx !== -1 ) {\n\t\t\tif ( a[idx].operation && item.operation && a[idx].operation !== item.operation )\n\t\t\t\tcontinue;\n\n\t\t\ta[idx] = merge(a[idx], item);\n\t\t\tif ( a[idx].operation )\n\t\t\t\thas_operation = true;\n\n\t\t} else {\n\t\t\tif ( has_operation && item.operation )\n\t\t\t\tcontinue;\n\n\t\t\ta.push(item);\n\t\t}\n\t}\n\n\treturn a;\n}\n\n\nexport default function merge(a: any, b: any) {\n\tif ( a.kind !== b.kind )\n\t\treturn a;\n\n\tif ( MERGE_METHODS[a.kind] )\n\t\treturn MERGE_METHODS[a.kind](a, b);\n\n\treturn a;\n}\n","'use strict';\n\n// ============================================================================\n// Twitch Data\n// Get data, from Twitch.\n// ============================================================================\n\nimport Module, { GenericModule } from 'utilities/module';\nimport {get, debounce, TranslatableError} from 'utilities/object';\nimport type Apollo from './compat/apollo';\nimport type { DocumentNode } from 'graphql';\n\n\ndeclare module 'utilities/types' {\n\tinterface ModuleEventMap {\n\n\t}\n\tinterface ModuleMap {\n\t\t'site.twitch_data': TwitchData;\n\t}\n}\n\ntype ID = string | number | null;\ntype LOGIN = string | null;\n\nexport type QueryResult<T> = {\n\tdata: T;\n\tloading: boolean;\n\tnetworkStatus: number;\n}\n\nexport type MutationResult<T> = {\n\tdata: T;\n\textensions: {\n\t\tdurationMilliseconds: number;\n\t\toperationName: string;\n\t\trequestID: string;\n\t}\n}\n\nexport type CategorySearch = {\n\ttotalCount: number;\n\tpageInfo: {\n\t\thasNextPage: boolean;\n\t}\n\tedges: {\n\t\tcursor: string;\n\t\tnode: TwitchCategory\n\t}[];\n}\n\nexport type FollowState = {\n\tdisableNotifications: boolean;\n\tfollowedAt: string;\n} | null;\n\nexport type TwitchBadge = {\n\tid: string;\n\timage1x: string;\n\timage2x: string;\n\timage4x: string;\n\tsetID: string;\n\ttitle: string;\n\tversion: string;\n\tclickURL: string | null;\n\tonClickAction: string | null;\n}\n\nexport type TwitchRecentBroadcast = {\n\tid: string;\n\ttitle: string | null;\n\tcreatedAt: string;\n\tpublishedAt: string | null;\n}\n\nexport type TwitchCategory = {\n\tid: string;\n\tname: string;\n\tdisplayName: string;\n\tboxArtURL: string;\n}\n\nexport type TwitchBasicUser = {\n\tid: string;\n\tlogin: string;\n\tdisplayName: string;\n\tprofileImageURL: string | null;\n\troles: {\n\t\tisPartner: boolean;\n\t}\n}\n\nexport type TwitchUser = {\n\tid: string;\n\tlogin: string;\n\tdisplayName: string;\n\tdescription: string | null;\n\tprofileImageURL: string | null;\n\tprofileViewCount: number;\n\tprimaryColorHex: string | null;\n\tbroadcastSettings: {\n\t\tid: string;\n\t\ttitle: string | null;\n\t\tgame: TwitchCategory | null;\n\t};\n\tstream: {\n\t\tid: string;\n\t\tpreviewImageURL: string\n\t} | null;\n\tfollowers: {\n\t\ttotalCount: number\n\t};\n\troles: {\n\t\tisAffiliate: boolean;\n\t\tisPartner: boolean;\n\t\tisStaff: boolean;\n\t};\n}\n\nexport type TwitchStreamCreatedAt = {\n\tid: string;\n\tcreatedAt: string;\n}\n\nexport type TwitchContentLabel = {\n\tid: string;\n\tlocalizedName: string;\n}\n\n\nexport type StoredPromise<T> = [\n\tPromise<T>,\n\t(value: T) => void,\n\t(reason?: any) => void\n]\n\n\n/**\n * TwitchData is a container for getting different types of Twitch data\n * @class TwitchData\n * @extends Module\n */\nexport default class TwitchData extends Module {\n\n\tapollo: Apollo = null!;\n\tsite: GenericModule = null!;\n\n\tprivate _waiting_user_ids: Map<string, StoredPromise<TwitchBasicUser | null>>;\n\tprivate _waiting_user_logins: Map<string, StoredPromise<TwitchBasicUser | null>>;\n\n\tprivate _waiting_stream_ids: Map<string, StoredPromise<TwitchStreamCreatedAt | null>>;\n\tprivate _waiting_stream_logins: Map<string, StoredPromise<TwitchStreamCreatedAt | null>>;\n\n\tprivate _waiting_flag_ids: Map<string, StoredPromise<TwitchContentLabel[] | null>>;\n\tprivate _waiting_flag_logins: Map<string, StoredPromise<TwitchContentLabel[] | null>>;\n\n\tprivate _loading_streams?: boolean;\n\tprivate _loading_flags?: boolean;\n\tprivate _loading_users?: boolean;\n\n\tconstructor(name?: string, parent?: GenericModule) {\n\t\tsuper(name, parent);\n\n\t\tthis.site = this.parent as GenericModule;\n\n\t\tthis.inject('site.apollo');\n\n\t\tthis._waiting_user_ids = new Map;\n\t\tthis._waiting_user_logins = new Map;\n\n\t\tthis._waiting_stream_ids = new Map;\n\t\tthis._waiting_stream_logins = new Map;\n\n\t\tthis._waiting_flag_ids = new Map;\n\t\tthis._waiting_flag_logins = new Map;\n\n\t\t// Debounce our loading methods. We don't care that the\n\t\t// return types don't match, so just cast to any.\n\t\tthis._loadStreams = debounce(this._loadStreams, 50) as any;\n\t\tthis._loadStreamFlags = debounce(this._loadStreamFlags, 50) as any;\n\t\tthis._loadUsers = debounce(this._loadUsers, 50) as any;\n\t}\n\n\tqueryApollo<T = any>(\n\t\tquery: DocumentNode | {query: DocumentNode, variables: any},\n\t\tvariables?: any,\n\t\toptions?: any\n\t) {\n\t\tlet thing: {query: DocumentNode, variables: any};\n\t\tif ( ! variables && ! options && 'query' in query && query.query )\n\t\t\tthing = query;\n\t\telse {\n\t\t\tthing = {\n\t\t\t\tquery: query as DocumentNode,\n\t\t\t\tvariables\n\t\t\t};\n\n\t\t\tif ( options )\n\t\t\t\tthing = Object.assign(thing, options);\n\t\t}\n\n\t\treturn this.apollo.client.query(thing) as Promise<QueryResult<T>>;\n\t}\n\n\tmutate<T = any>(\n\t\tmutation: DocumentNode | {mutation: DocumentNode, variables: any},\n\t\tvariables?: any,\n\t\toptions?: any\n\t) {\n\t\tlet thing: {mutation: DocumentNode, variables: any};\n\t\tif ( ! variables && ! options && 'mutation' in mutation && mutation.mutation )\n\t\t\tthing = mutation;\n\t\telse {\n\t\t\tthing = {\n\t\t\t\tmutation: mutation as DocumentNode,\n\t\t\t\tvariables\n\t\t\t};\n\n\t\t\tif ( options )\n\t\t\t\tthing = Object.assign(thing, options);\n\t\t}\n\n\t\treturn this.apollo.client.mutate(thing) as Promise<MutationResult<T>>;\n\t}\n\n\tget languageCode(): string {\n\t\tconst session = this.site.getSession();\n\t\treturn session && session.languageCode || 'en'\n\t}\n\n\tget locale(): string {\n\t\tconst session = this.site.getSession();\n\t\treturn session && session.locale || 'en-US'\n\t}\n\n\n\t// ========================================================================\n\t// Badges\n\t// ========================================================================\n\n\t/**\n\t * Fetch all the global chat badges.\n\t */\n\tasync getBadges() {\n\t\tconst data = await this.queryApollo<{\n\t\t\tbadges: TwitchBadge[]\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/global-badges.gql')\n\t\t);\n\n\t\treturn data?.data?.badges;\n\t}\n\n\n\t// ========================================================================\n\t// Categories\n\t// ========================================================================\n\n\t/**\n\t * Find categories matching the search query\n\t *\n\t * @param query The category name to match\n\t * @param first How many results to return\n\t * @param cursor A cursor, to be used in fetching the next page of results.\n\t */\n\tasync getMatchingCategories(\n\t\tquery: string,\n\t\tfirst: number = 15,\n\t\tcursor: string | null = null\n\t) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tsearchCategories: CategorySearch\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/search-category.gql'),\n\t\t\t{\n\t\t\t\tquery,\n\t\t\t\tfirst,\n\t\t\t\tcursor\n\t\t\t}\n\t\t);\n\n\t\tconst items = get('data.searchCategories.edges.@each.node', data) ?? [],\n\t\t\tneedle = query.toLowerCase();\n\n\t\tif ( Array.isArray(items) )\n\t\t\titems.sort((a,b) => {\n\t\t\t\tconst a_match = a && (a.name?.toLowerCase?.() === needle || a?.displayName?.toLowerCase?.() === needle),\n\t\t\t\t\tb_match = a && (b.name?.toLowerCase?.() === needle || b?.displayName?.toLowerCase?.() === needle);\n\n\t\t\t\tif ( a_match && ! b_match ) return -1;\n\t\t\t\tif ( ! a_match && b_match ) return 1;\n\t\t\t\treturn 0;\n\t\t\t});\n\n\t\treturn {\n\t\t\tcursor: get('data.searchCategories.edges.@last.cursor', data),\n\t\t\titems,\n\t\t\tfinished: ! get('data.searchCategories.pageInfo.hasNextPage', data),\n\t\t\tcount: get('data.searchCategories.totalCount', data) || 0\n\t\t};\n\t}\n\n\t/**\n\t * Look up a category.\n\t *\n\t * @param id - the category id\n\t * @param name - the category name\n\t */\n\tasync getCategory(id?: ID, name?: string | null) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tgame: TwitchCategory | null\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/category-fetch.gql'),\n\t\t\t{ id, name }\n\t\t);\n\n\t\treturn data?.data?.game;\n\t}\n\n\n\t// ========================================================================\n\t// Chat\n\t// ========================================================================\n\n\t/**\n\t * Delete a chat message.\n\t *\n\t * @param channel_id The channel to delete it from.\n\t * @param message_id The message ID.\n\t */\n\tasync deleteChatMessage(\n\t\tchannel_id: ID,\n\t\tmessage_id: string\n\t) {\n\t\tchannel_id = String(channel_id);\n\n\t\tconst data = await this.mutate<{\n\t\t\tdeleteChatMessage: {\n\t\t\t\tresponseCode: string;\n\t\t\t}\n\t\t}>({\n\t\t\tmutation: await import(/* webpackChunkName: 'queries' */ './mutations/delete-chat-message.gql'),\n\t\t\tvariables: {\n\t\t\t\tinput: {\n\t\t\t\t\tchannelID: channel_id,\n\t\t\t\t\tmessageID: message_id\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst code = data?.data?.deleteChatMessage?.responseCode;\n\n\t\tif ( code === 'TARGET_IS_BROADCASTER' )\n\t\t\tthrow new TranslatableError(\n\t\t\t\t\"You cannot delete the broadcaster's messages.\",\n\t\t\t\t\"chat.delete.forbidden.broadcaster\"\n\t\t\t);\n\n\t\tif ( code === 'TARGET_IS_MODERATOR' )\n\t\t\tthrow new TranslatableError(\n\t\t\t\t\"You cannot delete messages from moderator {displayName}.\",\n\t\t\t\t\"chat.delete.forbidden.moderator\",\n\t\t\t\tget('data.deleteChatMessage.message.sender', data)\n\t\t\t);\n\n\t\tif ( code !== 'SUCCESS' )\n\t\t\tthrow new TranslatableError(\n\t\t\t\t\"You don't have permission to delete messages.\",\n\t\t\t\t\"chat.delete.forbidden\"\n\t\t\t);\n\n\t\treturn true;\n\t}\n\n\n\t// ========================================================================\n\t// Users\n\t// ========================================================================\n\n\t/**\n\t * Find users matching the search query.\n\t *\n\t * @param query Text to match in the login or display name\n\t * @param first How many results to return\n\t * @param cursor A cursor, to be used in fetching the next page of results.\n\t */\n\tasync getMatchingUsers(query: string, first = 15, cursor: string | null = null) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tsearchUsers: {\n\t\t\t\tedges: {\n\t\t\t\t\tcursor: string;\n\t\t\t\t\tnode: TwitchBasicUser;\n\t\t\t\t}[];\n\t\t\t\ttotalCount: number;\n\t\t\t\tpageInfo: {\n\t\t\t\t\thasNextPage: boolean;\n\t\t\t\t}\n\t\t\t}\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/search-user.gql'),\n\t\t\t{\n\t\t\t\tquery,\n\t\t\t\tfirst,\n\t\t\t\tcursor\n\t\t\t}\n\t\t);\n\n\t\tconst items = get('data.searchUsers.edges.@each.node', data) ?? [],\n\t\t\tneedle = query.toLowerCase();\n\n\t\tif ( Array.isArray(items) )\n\t\t\titems.sort((a,b) => {\n\t\t\t\tconst a_match = a && (a.login?.toLowerCase?.() === needle || a?.displayName?.toLowerCase?.() === needle),\n\t\t\t\t\tb_match = a && (b.login?.toLowerCase?.() === needle || b?.displayName?.toLowerCase?.() === needle);\n\n\t\t\t\tif ( a_match && ! b_match ) return -1;\n\t\t\t\tif ( ! a_match && b_match ) return 1;\n\t\t\t\treturn 0;\n\t\t\t});\n\n\t\treturn {\n\t\t\tcursor: get('data.searchUsers.edges.@last.cursor', data),\n\t\t\titems,\n\t\t\tfinished: ! get('data.searchUsers.pageInfo.hasNextPage', data),\n\t\t\tcount: get('data.searchUsers.totalCount', data) || 0\n\t\t};\n\t}\n\n\t/**\n\t * Fetch information about a user.\n\t *\n\t * @param id The user's ID\n\t * @param login The user's login\n\t */\n\tasync getUser(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tuser: TwitchUser | null\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/user-fetch.gql'),\n\t\t\t{ id, login }\n\t\t);\n\n\t\treturn data?.data?.user;\n\t}\n\n\t/**\n\t * Fetch a user's current game.\n\t *\n\t * @param id The user's ID\n\t * @param login The user's login\n\t */\n\tasync getUserGame(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tuser: {\n\t\t\t\tbroadcastSettings: {\n\t\t\t\t\tgame: TwitchCategory | null;\n\t\t\t\t}\n\t\t\t} | null;\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/user-game.gql'),\n\t\t\t{ id, login }\n\t\t);\n\n\t\treturn data?.data?.user?.broadcastSettings?.game;\n\t}\n\n\t/**\n\t * Look up the current user's moderator and editor status in a channel.\n\t *\n\t * @param id The target channel's ID\n\t * @param login The target channel's login\n\t */\n\tasync getUserSelf(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tuser: {\n\t\t\t\tself: {\n\t\t\t\t\tisEditor: boolean;\n\t\t\t\t\tisModerator: boolean;\n\t\t\t\t}\n\t\t\t} | null;\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/user-self.gql'),\n\t\t\t{ id, login }\n\t\t);\n\n\t\treturn data?.data?.user?.self;\n\t}\n\n\t/**\n\t * Look up if the current user follows a channel.\n\t *\n\t * @param id The target channel's ID\n\t * @param login The target channel's login\n\t */\n\tasync getUserFollowed(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tuser: {\n\t\t\t\tself: {\n\t\t\t\t\tfollower: FollowState;\n\t\t\t\t}\n\t\t\t} | null;\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/user-followed.gql'),\n\t\t\t{ id, login }\n\t\t);\n\n\t\treturn data?.data?.user?.self?.follower;\n\t}\n\n\t/**\n\t * Follow a channel.\n\t *\n\t * @param channel_id The target channel's ID\n\t * @param disable_notifications Whether or not notifications should be disabled.\n\t */\n\tasync followUser(channel_id: ID, disable_notifications = false) {\n\t\tchannel_id = String(channel_id);\n\t\tdisable_notifications = !! disable_notifications;\n\n\t\tconst data = await this.mutate<{\n\t\t\tfollowUser: {\n\t\t\t\tfollow: FollowState;\n\t\t\t\terror: {\n\t\t\t\t\tcode: string;\n\t\t\t\t} | null;\n\t\t\t}\n\t\t}>({\n\t\t\tmutation: await import(/* webpackChunkName: 'queries' */ './data/follow-user.gql'),\n\t\t\tvariables: {\n\t\t\t\tinput: {\n\t\t\t\t\ttargetID: channel_id,\n\t\t\t\t\tdisableNotifications: disable_notifications\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconsole.log('follow result', data);\n\t\tconst err = data?.data?.followUser?.error;\n\t\tif ( err?.code )\n\t\t\tthrow new Error(err.code);\n\n\t\treturn data?.data?.followUser?.follow;\n\t}\n\n\t/**\n\t * Unfollow a channel.\n\t *\n\t * @param channel_id The target channel's ID\n\t */\n\tasync unfollowUser(channel_id: ID) {\n\t\tchannel_id = String(channel_id);\n\n\t\tconst data = await this.mutate<{\n\t\t\tunfollowUser: {\n\t\t\t\tfollow: FollowState;\n\t\t\t}\n\t\t}>({\n\t\t\tmutation: await import(/* webpackChunkName: 'queries' */ './data/unfollow-user.gql'),\n\t\t\tvariables: {\n\t\t\t\tinput: {\n\t\t\t\t\ttargetID: channel_id\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconsole.log('unfollow result', data);\n\t\treturn data?.data?.unfollowUser?.follow;\n\t}\n\n\n\t/**\n\t * Fetch basic information about a channel's most recent broadcast.\n\t *\n\t * @param id The channel's ID\n\t * @param login The channel's login\n\t */\n\tasync getLastBroadcast(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tuser: {\n\t\t\t\tvideos: {\n\t\t\t\t\tpageInfo: {\n\t\t\t\t\t\thasNextPage: boolean;\n\t\t\t\t\t}\n\t\t\t\t\tedges: {\n\t\t\t\t\t\tcursor: string;\n\t\t\t\t\t\tnode: TwitchRecentBroadcast;\n\t\t\t\t\t}[];\n\t\t\t\t}\n\t\t\t} | null\n\t\t}>(\n\t\t\tawait import(/* webpackChunkName: 'queries' */ './data/recent-broadcasts.gql'),\n\t\t\t{\n\t\t\t\tid, login,\n\t\t\t\ttype: 'ARCHIVE',\n\t\t\t\tsort: 'TIME',\n\t\t\t\tlimit: 1\n\t\t\t}\n\t\t);\n\n\t\treturn data?.data?.user?.videos?.edges?.[0]?.node;\n\t}\n\n\n\t/**\n\t * Fetch basic information on a user from Twitch. This is automatically batched\n\t * for performance, but not directly cached. Either an id or login must be provided.\n\t *\n\t * @param id The channel's ID\n\t * @param login The channel's login\n\t */\n\tgetUserBasic(id?: ID, login?: LOGIN) {\n\t\tlet store: Map<string, StoredPromise<TwitchBasicUser | null>>;\n\t\tlet retval: Promise<TwitchBasicUser | null>;\n\t\tlet key: string;\n\n\t\tif ( id ) {\n\t\t\tstore = this._waiting_user_ids;\n\t\t\tkey = String(id);\n\t\t} else if ( login ) {\n\t\t\tstore = this._waiting_user_logins;\n\t\t\tkey = login;\n\t\t} else\n\t\t\treturn Promise.reject('id and login cannot both be null');\n\n\t\tlet stored = store.get(key);\n\t\tif (stored)\n\t\t\treturn stored[0];\n\n\t\tlet success: (value: TwitchBasicUser | null) => void,\n\t\t\tfailure: (reason?: any) => void;\n\n\t\tretval = new Promise<TwitchBasicUser | null>((s, f) => {\n\t\t\tsuccess = s;\n\t\t\tfailure = f;\n\t\t});\n\n\t\tstore.set(key, [retval, success!, failure!]);\n\n\t\tif ( ! this._loading_users )\n\t\t\tthis._loadUsers();\n\n\t\treturn retval;\n\t}\n\n\tasync _loadUsers() {\n\t\tif ( this._loading_users )\n\t\t\treturn;\n\n\t\tthis._loading_users = true;\n\n\t\t// Get the first 50... things.\n\t\tconst ids = [...this._waiting_user_ids.keys()].slice(0, 50),\n\t\t\tremaining = 50 - ids.length,\n\t\t\tlogins = remaining > 0 ? [...this._waiting_user_logins.keys()].slice(0, remaining) : [];\n\n\t\tlet nodes: TwitchBasicUser[];\n\n\t\ttry {\n\t\t\tconst data = await this.queryApollo<{\n\t\t\t\tusers: TwitchBasicUser[]\n\t\t\t}>({\n\t\t\t\tquery: await import(/* webpackChunkName: 'queries' */ './data/user-bulk.gql'),\n\t\t\t\tvariables: {\n\t\t\t\t\tids: ids.length ? ids : null,\n\t\t\t\t\tlogins: logins.length ? logins : null\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tnodes = data?.data?.users ?? [];\n\n\t\t} catch(err) {\n\t\t\tfor(const id of ids) {\n\t\t\t\tconst stored = this._waiting_user_ids.get(id);\n\t\t\t\tthis._waiting_user_ids.delete(id);\n\t\t\t\tif (stored)\n\t\t\t\t\tstored[2](err);\n\t\t\t}\n\n\t\t\tfor(const login of logins) {\n\t\t\t\tconst stored = this._waiting_user_logins.get(login);\n\t\t\t\tthis._waiting_user_logins.delete(login);\n\t\t\t\tif (stored)\n\t\t\t\t\tstored[2](err);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst id_set = new Set(ids),\n\t\t\tlogin_set = new Set(logins);\n\n\t\tif ( Array.isArray(nodes) )\n\t\t\tfor(const node of nodes) {\n\t\t\t\tif ( ! node || ! node.id )\n\t\t\t\t\tcontinue;\n\n\t\t\t\tid_set.delete(node.id);\n\t\t\t\tlogin_set.delete(node.login);\n\n\t\t\t\tlet stored = this._waiting_user_ids.get(node.id);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_user_ids.delete(node.id);\n\t\t\t\t\tstored[1](node);\n\t\t\t\t}\n\n\t\t\t\tstored = this._waiting_user_logins.get(node.login);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_user_logins.delete(node.login);\n\t\t\t\t\tstored[1](node);\n\t\t\t\t}\n\t\t\t}\n\n\t\tfor(const id of id_set) {\n\t\t\tconst stored = this._waiting_user_ids.get(id);\n\t\t\tif ( stored ) {\n\t\t\t\tthis._waiting_user_ids.delete(id);\n\t\t\t\tstored[1](null);\n\t\t\t}\n\t\t}\n\n\t\tfor(const login of login_set) {\n\t\t\tconst stored = this._waiting_user_logins.get(login);\n\t\t\tif ( stored ) {\n\t\t\t\tthis._waiting_user_logins.delete(login);\n\t\t\t\tstored[1](null);\n\t\t\t}\n\t\t}\n\n\t\tthis._loading_users = false;\n\n\t\tif ( this._waiting_user_ids.size || this._waiting_user_logins.size )\n\t\t\tthis._loadUsers();\n\t}\n\n\n\t// ========================================================================\n\t// Broadcast ID\n\t// ========================================================================\n\n\t/**\n\t * Fetch the id of a channel's most recent broadcast.\n\t *\n\t * @param id The channel's ID\n\t * @param login The channel's login\n\t */\n\tasync getBroadcastID(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.getLastBroadcast(id, login);\n\t\treturn data?.id;\n\t}\n\n\n\tasync getChannelColor(id?: ID, login?: LOGIN) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tuser: {\n\t\t\t\tprimaryColorHex: string | null;\n\t\t\t} | null;\n\t\t}>({\n\t\t\tquery: await import(/* webpackChunkName: 'queries' */ './data/user-color.gql'),\n\t\t\tvariables: {\n\t\t\t\tid,\n\t\t\t\tlogin\n\t\t\t}\n\t\t});\n\n\t\treturn data?.data?.user?.primaryColorHex;\n\t}\n\n\n\t// ========================================================================\n\t// Polls\n\t// ========================================================================\n\n\t/**\n\t * Queries Apollo for information about the specified poll.\n\t * @function getPoll\n\t * @memberof TwitchData\n\t * @async\n\t *\n\t * @param {int|string} poll_id - the poll id number (can be an integer string)\n\t * @returns {Object} information about the specified poll\n\t *\n\t * @example\n\t *\n\t *  console.log(this.twitch_data.getPoll(1337));\n\t */\n\tasync getPoll(poll_id: ID) {\n\t\tconst data = await this.queryApollo({\n\t\t\tquery: await import(/* webpackChunkName: 'queries' */ './data/poll-get.gql'),\n\t\t\tvariables: {\n\t\t\t\tid: poll_id\n\t\t\t}\n\t\t});\n\n\t\treturn get('data.poll', data);\n\t}\n\n\t/**\n\t * Create a new poll\n\t * @function createPoll\n\t * @memberof TwitchData\n\t * @async\n\t *\n\t * @param {int|string} channel_id - the channel id number (can be an integer string)\n\t * @param {string} title - the poll title\n\t * @param {string[]} choices - an array of poll choices\n\t * @param {Object} [options] - an object containing poll options\n\t * @param {int} [options.bits=0] - how many bits it costs to vote\n\t * @param {int} [options.duration=60] - how long the poll will be held for, in seconds\n\t * @param {bool} [options.subscriberMultiplier=false] - whether to activate subsriber 2x multiplier\n\t * @param {bool} [options.subscriberOnly=false] - whether only subscribers may vote\n\t * @returns {Object} poll data\n\t *\n\t * @example\n\t *\n\t *  console.log(this.twitch_data.createPoll(19571641, \"Pick an option:\", [\"One\", \"Two\", \"Three\"], {bits: 10, duration: 120, subscriberMultiplier: false, subscriberOnly: true}));\n\t */\n\tasync createPoll(channel_id, title, choices, options = {}) {\n\t\tif ( typeof title !== 'string' )\n\t\t\tthrow new TypeError('title must be string');\n\n\t\tif ( ! Array.isArray(choices) || choices.some(x => typeof x !== 'string') )\n\t\t\tthrow new TypeError('choices must be array of strings');\n\n\t\tlet bits = options.bits || 0,\n\t\t\tduration = options.duration || 60;\n\t\tif ( typeof bits !== 'number' || bits < 0 )\n\t\t\tbits = 0;\n\t\tif ( typeof duration !== 'number' || duration < 0 )\n\t\t\tduration = 60;\n\n\t\tconst data = await this.mutate({\n\t\t\tmutation: await import(/* webpackChunkName: 'queries' */ './data/poll-create.gql'),\n\t\t\tvariables: {\n\t\t\t\tinput: {\n\t\t\t\t\tbitsCost: bits,\n\t\t\t\t\tbitsVoting: bits > 0,\n\t\t\t\t\tchoices: choices.map(x => ({title: x})),\n\t\t\t\t\tdurationSeconds: duration,\n\t\t\t\t\townedBy: `${channel_id}`,\n\t\t\t\t\tsubscriberMultiplier: options.subscriberMultiplier || false,\n\t\t\t\t\tsubscriberOnly: options.subscriberOnly || false,\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn get('data.createPoll.poll', data);\n\t}\n\n\t/**\n\t * Place specified poll into archive\n\t * @function archivePoll\n\t * @memberof TwitchData\n\t * @async\n\t *\n\t * @param {int|string|null|undefined} poll_id - the poll id number (can be an integer string)\n\t * @returns {Object} information about the specified poll\n\t *\n\t * @example\n\t *\n\t *  console.log(this.twitch_data.archivePoll(1337));\n\t */\n\tasync archivePoll(poll_id) {\n\t\tconst data = await this.mutate({\n\t\t\tmutation: await import(/* webpackChunkName: 'queries' */ './data/poll-archive.gql'),\n\t\t\tvariables: {\n\t\t\t\tid: poll_id\n\t\t\t}\n\t\t});\n\n\t\treturn get('data.archivePoll.poll', data);\n\t}\n\n\t/**\n\t * Terminate specified poll\n\t * @function terminatePoll\n\t * @memberof TwitchData\n\t * @async\n\t *\n\t * @param {int|string|null|undefined} poll_id - the poll id number (can be an integer string)\n\t * @returns {Object} information about the specified poll\n\t *\n\t * @example\n\t *\n\t *  console.log(this.twitch_data.archivePoll(1337));\n\t */\n\tasync terminatePoll(poll_id) {\n\t\tconst data = await this.mutate({\n\t\t\tmutation: await import(/* webpackChunkName: 'queries' */ './data/poll-terminate.gql'),\n\t\t\tvariables: {\n\t\t\t\tid: poll_id\n\t\t\t}\n\t\t});\n\n\t\treturn get('data.terminatePoll.poll', data);\n\t}\n\n\n\t// ========================================================================\n\t// Stream Up-Type (Uptime and Type, for Directory Purposes)\n\t// ========================================================================\n\n\t/**\n\t * Fetch the stream id and creation time for a channel.\n\t *\n\t * @param id The channel's ID\n\t * @param login The channel's login\n\t */\n\tgetStreamMeta(id?: ID, login?: LOGIN) {\n\t\tlet store: Map<string, StoredPromise<TwitchStreamCreatedAt | null>>;\n\t\tlet retval: Promise<TwitchStreamCreatedAt | null>;\n\t\tlet key: string;\n\n\t\tif ( id ) {\n\t\t\tstore = this._waiting_stream_ids;\n\t\t\tkey = String(id);\n\t\t} else if ( login ) {\n\t\t\tstore = this._waiting_stream_logins;\n\t\t\tkey = login;\n\t\t} else\n\t\t\treturn Promise.reject('id and login cannot both be null');\n\n\t\tlet stored = store.get(key);\n\t\tif (stored)\n\t\t\treturn stored[0];\n\n\t\tlet success: (value: TwitchStreamCreatedAt | null) => void,\n\t\t\tfailure: (reason?: any) => void;\n\n\t\tretval = new Promise<TwitchStreamCreatedAt | null>((s, f) => {\n\t\t\tsuccess = s;\n\t\t\tfailure = f;\n\t\t});\n\n\t\tstore.set(key, [retval, success!, failure!]);\n\n\t\tif ( ! this._loading_streams )\n\t\t\tthis._loadStreams();\n\n\t\treturn retval;\n\t}\n\n\tasync _loadStreams() {\n\t\tif ( this._loading_streams )\n\t\t\treturn;\n\n\t\tthis._loading_streams = true;\n\n\t\t// Get the first 50... things.\n\t\tconst ids = [...this._waiting_stream_ids.keys()].slice(0, 50),\n\t\t\tremaining = 50 - ids.length,\n\t\t\tlogins = remaining > 0 ? [...this._waiting_stream_logins.keys()].slice(0, remaining) : [];\n\n\t\tlet nodes: {\n\t\t\tid: string;\n\t\t\tlogin: string;\n\t\t\tstream: TwitchStreamCreatedAt | null;\n\t\t}[];\n\n\t\ttry {\n\t\t\tconst data = await this.queryApollo<{\n\t\t\t\tusers: {\n\t\t\t\t\tid: string;\n\t\t\t\t\tlogin: string;\n\t\t\t\t\tstream: TwitchStreamCreatedAt | null;\n\t\t\t\t}[]\n\t\t\t}>({\n\t\t\t\tquery: await import(/* webpackChunkName: 'queries' */ './data/stream-fetch.gql'),\n\t\t\t\tvariables: {\n\t\t\t\t\tids: ids.length ? ids : null,\n\t\t\t\t\tlogins: logins.length ? logins : null\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tnodes = data?.data?.users;\n\n\t\t} catch(err) {\n\t\t\tfor(const id of ids) {\n\t\t\t\tconst stored = this._waiting_stream_ids.get(id);\n\t\t\t\tthis._waiting_stream_ids.delete(id);\n\t\t\t\tif ( stored )\n\t\t\t\t\tstored[2](err);\n\t\t\t}\n\n\t\t\tfor(const login of logins) {\n\t\t\t\tconst stored = this._waiting_stream_logins.get(login);\n\t\t\t\tthis._waiting_stream_logins.delete(login);\n\t\t\t\tif ( stored )\n\t\t\t\t\tstored[2](err);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst id_set = new Set(ids),\n\t\t\tlogin_set = new Set(logins);\n\n\t\tif ( Array.isArray(nodes) )\n\t\t\tfor(const node of nodes) {\n\t\t\t\tif ( ! node || ! node.id )\n\t\t\t\t\tcontinue;\n\n\t\t\t\tid_set.delete(node.id);\n\t\t\t\tlogin_set.delete(node.login);\n\n\t\t\t\tlet stored = this._waiting_stream_ids.get(node.id);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_stream_ids.delete(node.id);\n\t\t\t\t\tstored[1](node.stream);\n\t\t\t\t}\n\n\t\t\t\tstored = this._waiting_stream_logins.get(node.login);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_stream_logins.delete(node.login);\n\t\t\t\t\tstored[1](node.stream);\n\t\t\t\t}\n\t\t\t}\n\n\t\tfor(const id of id_set) {\n\t\t\tconst stored = this._waiting_stream_ids.get(id);\n\t\t\tif ( stored ) {\n\t\t\t\tthis._waiting_stream_ids.delete(id);\n\t\t\t\tstored[1](null);\n\t\t\t}\n\t\t}\n\n\t\tfor(const login of login_set) {\n\t\t\tconst stored = this._waiting_stream_logins.get(login);\n\t\t\tif ( stored ) {\n\t\t\t\tthis._waiting_stream_logins.delete(login);\n\t\t\t\tstored[1](null);\n\t\t\t}\n\t\t}\n\n\t\tthis._loading_streams = false;\n\n\t\tif ( this._waiting_stream_ids.size || this._waiting_stream_logins.size )\n\t\t\tthis._loadStreams();\n\t}\n\n\n\t// ========================================================================\n\t// Stream Content Flags (for Directory Purposes)\n\t// ========================================================================\n\n\t/**\n\t * Queries Apollo for stream content flags. One of (id, login) MUST be specified\n\t *\n\t * @param id - the channel id number (can be an integer string)\n\t * @param login - the channel name\n\t */\n\tgetStreamFlags(id?: ID, login?: LOGIN) {\n\t\tlet store: Map<string, StoredPromise<TwitchContentLabel[] | null>>;\n\t\tlet retval: Promise<TwitchContentLabel[] | null>;\n\t\tlet key: string;\n\n\t\tif ( id ) {\n\t\t\tstore = this._waiting_flag_ids;\n\t\t\tkey = String(id);\n\t\t} else if ( login ) {\n\t\t\tstore = this._waiting_flag_logins;\n\t\t\tkey = login;\n\t\t} else\n\t\t\treturn Promise.reject('id and login cannot both be null');\n\n\t\tlet stored = store.get(key);\n\t\tif (stored)\n\t\t\treturn stored[0];\n\n\t\tlet success: (value: TwitchContentLabel[] | null) => void,\n\t\t\tfailure: (reason?: any) => void;\n\n\t\tretval = new Promise<TwitchContentLabel[] | null>((s, f) => {\n\t\t\tsuccess = s;\n\t\t\tfailure = f;\n\t\t});\n\n\t\tstore.set(key, [retval, success!, failure!]);\n\n\t\tif ( ! this._loading_flags )\n\t\t\tthis._loadStreamFlags();\n\n\t\treturn retval;\n\t}\n\n\tasync _loadStreamFlags() {\n\t\tif ( this._loading_flags )\n\t\t\treturn;\n\n\t\tthis._loading_flags = true;\n\n\t\t// Get the first 50... things.\n\t\tconst ids = [...this._waiting_flag_ids.keys()].slice(0, 50),\n\t\t\tremaining = 50 - ids.length,\n\t\t\tlogins = remaining > 0 ? [...this._waiting_flag_logins.keys()].slice(0, remaining) : [];\n\n\t\tlet nodes: {\n\t\t\tid: string;\n\t\t\tlogin: string;\n\t\t\tstream: {\n\t\t\t\tcontentClassificationLabels: TwitchContentLabel[];\n\t\t\t} | null;\n\t\t}[];\n\n\t\ttry {\n\t\t\tconst data = await this.queryApollo<{\n\t\t\t\tusers: typeof nodes;\n\t\t\t}>({\n\t\t\t\tquery: await import(/* webpackChunkName: 'queries' */ './data/stream-flags.gql'),\n\t\t\t\tvariables: {\n\t\t\t\t\tids: ids.length ? ids : null,\n\t\t\t\t\tlogins: logins.length ? logins : null\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tnodes = data?.data?.users;\n\n\t\t} catch(err) {\n\t\t\tfor(const id of ids) {\n\t\t\t\tconst stored = this._waiting_flag_ids.get(id);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_flag_ids.delete(id);\n\t\t\t\t\tstored[2](err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(const login of logins) {\n\t\t\t\tconst stored = this._waiting_flag_logins.get(login);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_flag_logins.delete(login);\n\t\t\t\t\tstored[2](err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst id_set = new Set(ids),\n\t\t\tlogin_set = new Set(logins);\n\n\t\tif ( Array.isArray(nodes) )\n\t\t\tfor(const node of nodes) {\n\t\t\t\tif ( ! node || ! node.id )\n\t\t\t\t\tcontinue;\n\n\t\t\t\tid_set.delete(node.id);\n\t\t\t\tlogin_set.delete(node.login);\n\n\t\t\t\tlet stored = this._waiting_flag_ids.get(node.id);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_flag_ids.delete(node.id);\n\t\t\t\t\tstored[1](node.stream?.contentClassificationLabels ?? null);\n\t\t\t\t}\n\n\t\t\t\tstored = this._waiting_flag_logins.get(node.login);\n\t\t\t\tif ( stored ) {\n\t\t\t\t\tthis._waiting_flag_logins.delete(node.login);\n\t\t\t\t\tstored[1](node.stream?.contentClassificationLabels ?? null);\n\t\t\t\t}\n\t\t\t}\n\n\t\tfor(const id of id_set) {\n\t\t\tconst stored = this._waiting_flag_ids.get(id);\n\t\t\tif ( stored ) {\n\t\t\t\tthis._waiting_flag_ids.delete(id);\n\t\t\t\tstored[1](null);\n\t\t\t}\n\t\t}\n\n\t\tfor(const login of login_set) {\n\t\t\tconst stored = this._waiting_flag_logins.get(login);\n\t\t\tif ( stored ) {\n\t\t\t\tthis._waiting_flag_logins.delete(login);\n\t\t\t\tstored[1](null);\n\t\t\t}\n\t\t}\n\n\t\tthis._loading_flags = false;\n\n\t\tif ( this._waiting_flag_ids.size || this._waiting_flag_logins.size )\n\t\t\tthis._loadStreamFlags();\n\t}\n\n\n\t// ========================================================================\n\t// Tags\n\t// ========================================================================\n\n\t/**\n\t * Fetch a list of matching tags.\n\t *\n\t * @param query The string to search for.\n\t */\n\tasync getMatchingTags(query: string) {\n\t\tconst data = await this.queryApollo<{\n\t\t\tsearchFreeformTags: {\n\t\t\t\tedges: {\n\t\t\t\t\tnode: {\n\t\t\t\t\t\ttagName: string;\n\t\t\t\t\t}\n\t\t\t\t}[];\n\t\t\t}\n\t\t}>({\n\t\t\tquery: await import(/* webpackChunkName: 'queries' */ './data/tag-search.gql'),\n\t\t\tvariables: {\n\t\t\t\tquery,\n\t\t\t\tfirst: 100\n\t\t\t}\n\t\t});\n\n\t\tconst edges = data?.data?.searchFreeformTags?.edges;\n\t\tif ( ! Array.isArray(edges) || ! edges.length )\n\t\t\treturn [];\n\n\t\tconst out: string[] = [];\n\t\tfor(const edge of edges) {\n\t\t\tconst tag = edge?.node?.tagName;\n\t\t\tif ( tag )\n\t\t\t\tout.push(tag);\n\t\t}\n\n\t\treturn out;\n\t}\n}\n"],"names":["data","ApolloEvent","err","GQLError","args","web_munch","client","root","i","node","host","n","t","proto","old_qm_get","query","optimistic","out","prev","opts","raw_name","name","old_qm_init","e","ApolloLink","operation","forward","vars","result","request","modifiers","event","has_listeners","qm","id_map","query_map","raw_id","id","mod","modified","q","qs","response","modifier","pre","mods","val","obs","predicate","delay","retry_wait","passed","Apollo","MERGE_METHODS","a","b","mergeList","merge","has_operation","a_names","item","idx","parent","variables","options","thing","mutation","session","first","cursor","items","needle","a_match","b_match","channel_id","message_id","code","login","disable_notifications","store","retval","key","stored","success","failure","s","f","ids","remaining","logins","nodes","id_set","login_set","poll_id","title","choices","x","bits","duration","edges","edge","tag","TwitchData"],"sourceRoot":""}