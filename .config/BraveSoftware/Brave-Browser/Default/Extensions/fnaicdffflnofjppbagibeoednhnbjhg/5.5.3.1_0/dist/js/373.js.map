{"version":3,"file":"373.js","mappings":"2tBACO,MAAMA,EAIT,eAAOC,CAASC,GACZ,OAAOC,KAAKC,qBAAqBF,EAAS,QAC9C,CACA,2BAAOE,CAAqBF,EAASG,GACjC,IAAIC,EAAOJ,EAAQG,GAInB,OAHIH,EAAQK,KAAOF,KAAOH,EAAQK,MAC9BD,EAAOJ,EAAQK,IAAIF,IAEhBC,CACX,CAIA,0BAAOE,CAAoBN,GACvB,IAAIO,EAAMP,EAAQQ,qBAAuB,cAAgBR,EAAQS,MASjE,GARAF,GAAO,kBAAoBP,EAAQU,aAC/BV,EAAQW,cACRJ,GAAO,iBAAmBP,EAAQW,aAElCX,EAAQY,QACRL,GAAO,UAAYP,EAAQY,OAE/BL,GAAO,UAAYP,EAAQa,MACvBb,EAAQc,qBACR,IAAK,MAAMX,KAAOH,EAAQc,qBACtBP,GAAO,IAAMJ,EAAM,IAAMH,EAAQc,qBAAqBX,GAO9D,OAJIH,EAAQe,oBACRR,GAAO,mBAAqBP,EAAQe,kBACpCR,GAAO,0BAA4BP,EAAQgB,yBAExCC,UAAUV,EACrB,CACA,2BAAOW,CAAqBlB,EAASmB,GACjC,IAAIC,EAAO,GAMX,OALAA,GAAQC,mBAAmB,cAAgB,IAAMA,mBAAmB,sBAAwB,IAC5FD,GAAQC,mBAAmB,aAAe,IAAMA,mBAAmBrB,EAAQS,OAAS,IACpFW,GAAQC,mBAAmB,gBAAkB,IAAMA,mBAAmBrB,EAAQW,aAAe,IAC7FS,GAAQC,mBAAmB,QAAU,IAAMA,mBAAmBF,GAAQ,IACtEC,GAAQC,mBAAmB,iBAAmB,IAAMA,mBAAmBrB,EAAQsB,kBACxEF,CACX,CAIA,mBAAOG,CAAahB,GAChB,MAAMiB,EAAY,GAAGjB,QAAiCA,EAAM,KAAKkB,OACjE,GAAyB,IAArBD,EAAUE,OACV,OAEJ,MAAMC,EAAY,IAAIC,IAAIJ,GAC1B,IAAKG,EAAUE,SAAWF,EAAUG,KAChC,OAEJ,IAAIC,EASJ,OAPIA,EADAJ,EAAUE,OACIF,EAAUE,OAAOG,OAAO,GAGxBL,EAAUG,KAAKE,OAAO,GAElBD,EAAYE,MAAM,KAEnBC,QAAO,CAACC,EAAaC,KACtC,MAAOjC,EAAKkC,GAAOD,EAAaH,MAAM,KACtC,GAAI9B,GAAOA,EAAIuB,OAAS,EACpB,OAAOY,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGJ,GAAc,CAAE,CAAChC,GAAMqC,mBAAmBH,IACrF,GACD,CAAC,EACR,CACA,mBAAOI,CAAaf,EAAS,IACzB,MAAMgB,EAAW,mEACjB,IAAIC,EACJ,GAAIC,OAAOC,OAAQ,CACf,IAAIC,EAAc,IAAIC,YAAYrB,GAClCkB,OAAOC,OAAOG,gBAAgBF,GAC9BA,EAAcA,EAAYG,KAAIC,GAAKR,EAASS,WAAWD,EAAIR,MAC3D,IAAIU,EAAc,GAClBN,EAAYO,SAAQH,IAChBE,EAAYE,KAAKZ,EAASa,OAAOL,EAAIR,IAAiB,IAE1DC,EAAYS,EAAYI,KAAK,GACjC,KACK,CACDb,EAAY,GACZ,IAAK,IAAIc,EAAI,EAAGA,EAAI/B,EAAQ+B,IACxBd,GAAaD,EAASa,OAAOG,KAAKC,MAAsBjB,GAAhBgB,KAAKE,UAErD,CACA,OAAOjB,CACX,CACA,4BAAakB,CAAgBC,GACzB,MAAMC,EAAa,IAAIC,EACvBD,EAAWtD,MAAQR,KAAKF,SAAS+D,GACjCC,EAAWvD,qBAAuBP,KAAKC,qBAAqB4D,EAAe,wBAC3EC,EAAWrD,aAAeT,KAAKC,qBAAqB4D,EAAe,gBAC9DC,EAAWrD,eACZqD,EAAWrD,aAAe,SAE9BqD,EAAWpD,YAAcV,KAAKC,qBAAqB4D,EAAe,eAElEC,EAAWE,YAAchE,KAAKC,qBAAqB4D,EAAe,eAClEC,EAAWG,oBAAsBjE,KAAKC,qBAAqB4D,EAAe,uBAC1EC,EAAWI,YAAclE,KAAKC,qBAAqB4D,EAAe,eAC9DC,EAAWI,cACXJ,EAAWzC,iBAAmBrB,KAAKwC,aAAa,IAC5C2B,EAAYC,wBACND,EAAYE,gBAAgBP,EAAWzC,kBAAkBiD,MAAKC,IAChET,EAAWhD,kBAAoByD,EAC/BT,EAAW/C,wBAA0B,MAAM,KAI/C+C,EAAWhD,kBAAoBgD,EAAWzC,iBAC1CyC,EAAW/C,wBAA0B,UAG7C+C,EAAWnD,MAAQX,KAAKC,qBAAqB4D,EAAe,SAC5DC,EAAWlD,MAAQZ,KAAKC,qBAAqB4D,EAAe,SACvDC,EAAWlD,OAAqC,IAA5BkD,EAAWlD,MAAMa,SACtCqC,EAAWlD,MAAQZ,KAAKwC,aAAa,KAEzC,IAAIgC,EAAsBxE,KAAKC,qBAAqB4D,EAAe,wBACnE,GAAIW,EAAqB,CACrBV,EAAWjD,qBAAuB,CAAC,EACnC,IAAK,MAAMX,KAAOsE,EACd,GAAItE,GAAOA,EAAIsB,OAAOC,OAAS,EAAG,CAC9B,IAAIgD,EAAQD,EAAoBtE,GAC5BuE,GAASA,EAAMjD,OAAOC,OAAS,IAC/BqC,EAAWjD,qBAAqBX,GAAOuE,EAE/C,CAER,CACA,IAAIC,EAAmB1E,KAAKC,qBAAqB4D,EAAe,6BAChE,GAAIa,EAAkB,CAClBZ,EAAWa,0BAA4B,CAAC,EACxC,IAAK,MAAMzE,KAAOwE,EACd,GAAIxE,GAAOA,EAAIsB,OAAOC,OAAS,EAAG,CAC9B,IAAIgD,EAAQC,EAAiBxE,GACzBuE,GAASA,EAAMjD,OAAOC,OAAS,IAC/BqC,EAAWa,0BAA0BzE,GAAOuE,EAEpD,CAER,CAEA,OADAX,EAAWc,YAAc5E,KAAKC,qBAAqB4D,EAAe,eAC3DC,CACX,CACA,yBAAOe,CAAmBhB,GACtB,MAAMiB,EAAgB,IAAIf,EAS1B,OARIF,EAAczD,MACVyD,EAAczD,IAAI0E,gBAClBA,EAAcA,cAAgBjB,EAAczD,IAAI0E,eAEhDjB,EAAczD,IAAI2E,eAClBD,EAAcC,aAAelB,EAAczD,IAAI2E,eAGhDD,CACX,EAEG,MAAMX,EACT,mBAAOa,CAAaC,GAChB,MAAMC,EAAM,IAAIC,YAAYF,EAAIxD,QAC1B2D,EAAU,IAAIC,WAAWH,GAC/B,IAAK,IAAI1B,EAAI,EAAGA,EAAIyB,EAAIxD,OAAQ+B,IAC5B4B,EAAQ5B,GAAKyB,EAAI/B,WAAWM,GAEhC,OAAO4B,CACX,CACA,kBAAOE,CAAYC,GACf,OAAOA,EAAOC,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,KAAM,GACxE,CACA,eAAOC,CAASC,GACZ,IAAIC,EAAMD,EAAMjE,OACZ8D,EAAS,GACb,IAAK,IAAI/B,EAAI,EAAGA,EAAImC,EAAKnC,GAAK,EAC1B+B,GAAUvF,KAAK4F,aAAaF,EAAMlC,IAAM,GACxC+B,GAAUvF,KAAK4F,cAA0B,EAAXF,EAAMlC,KAAW,EAAMkC,EAAMlC,EAAI,IAAM,GACrE+B,GAAUvF,KAAK4F,cAA8B,GAAfF,EAAMlC,EAAI,KAAY,EAAMkC,EAAMlC,EAAI,IAAM,GAC1E+B,GAAUvF,KAAK4F,aAA4B,GAAfF,EAAMlC,EAAI,IAQ1C,OANKmC,EAAM,GAAO,EACdJ,EAASA,EAAOM,UAAU,EAAGN,EAAO9D,OAAS,GAAK,IAE7CkE,EAAM,GAAM,IACjBJ,EAASA,EAAOM,UAAU,EAAGN,EAAO9D,OAAS,GAAK,MAE/C8D,CACX,CACA,sBAAOlB,CAAgByB,GACnB,OAAIA,EAAarE,OAAS,IAAMqE,EAAarE,OAAS,IAC3CsE,QAAQC,OAAO,IAAIC,MAAM,0CAE/B9B,EAAYC,kBAGV,IAAI2B,SAAQ,CAACG,EAASF,KACzBpD,OAAOuD,OAAOC,OAAO,UAAWpG,KAAKgF,aAAac,IAAexB,MAAK+B,GAC3DH,EAAQlG,KAAKsF,YAAYtF,KAAKyF,SAAS,IAAIJ,WAAWgB,QAC9DC,GAASN,EAAOM,IAAO,IALnBP,QAAQC,OAAO,IAAIC,MAAM,gCAOxC,EAEJ9B,EAAYyB,aAAe,mEAC3BzB,EAAYC,kBAAsC,oBAAXzB,UAA4BA,OAAOC,UAAYD,OAAOC,OAAOuD,OAC7F,MAAMpC,EACT,WAAAwC,GACIvG,KAAK+E,aAAe,QACxB,ECtNG,MAAMyB,UAA8B,EAAAC,UACvC,WAAAF,GACIG,SAASC,WACT3G,KAAK4G,UAAY,IACjB5G,KAAK6G,eAAiB,IACtB7G,KAAK8G,mBAAqB,iBAC9B,CAIA,kBAAMC,CAAaC,GACf,OAAO,IAAIjB,SAAQ,CAACkB,EAAUjB,KAC1BA,EAAO,IAAIC,MAAM,8CAA8C,GAEvE,CACA,kBAAMiB,CAAanH,GACf,MAAM+E,EAAgBjF,EAASgF,mBAAmB9E,GAKlD,OAFAC,KAAKmH,aAAexE,OAAOyE,KAAK,GAAItC,EAAcC,aAAcD,EAAcA,eAC9E9E,KAAK8D,iBAAmBjE,EAAS+D,gBAAgB7D,GAC1C,IAAIgG,SAAQ,CAACG,EAASF,KAEzB,GAAKhG,KAAK8D,WAAWtD,OAAyC,GAAhCR,KAAK8D,WAAWtD,MAAMiB,OAG/C,GAAKzB,KAAK8D,WAAWvD,sBAAuE,GAA/CP,KAAK8D,WAAWvD,qBAAqBkB,OAGlF,GAAKzB,KAAK8D,WAAWpD,aAAqD,GAAtCV,KAAK8D,WAAWpD,YAAYe,OAGhE,GAAKzB,KAAK8D,WAAWrD,cAAuD,GAAvCT,KAAK8D,WAAWrD,aAAagB,OAGlE,CAED,IAAImF,EAAY5G,KAAK4G,UACrB5G,KAAKqH,sBAAuB,EAE5B,MAAMC,EAAmBzH,EAASQ,oBAAoBL,KAAK8D,YACvD9D,KAAK8D,WAAWc,aAChB5E,KAAKuH,MAAM,sBAAwBD,GAEnCtH,KAAKmH,eACLnH,KAAKmH,aAAaK,SAASC,KAAOH,GAGtCtH,KAAK0H,WAAa/E,OAAOgF,aAAY,KACjC,IAAIC,EAAIC,EACR,GAAIjB,IAAc,EACd5G,KAAK8H,mBAEJ,IAAkC,QAA5BF,EAAK5H,KAAKmH,oBAAiC,IAAPS,OAAgB,EAASA,EAAGG,UAAY/H,KAAKqH,qBACxF1E,OAAOqF,cAAchI,KAAK0H,YAC1B1B,EAAO,IAAIC,MAAM,uBAEhB,CACD,IAAIwB,EACJ,IACIA,EAAoC,QAA5BI,EAAK7H,KAAKmH,oBAAiC,IAAPU,OAAgB,EAASA,EAAGL,SAASC,IACrF,CACA,MAAOQ,GAEP,CACA,GAAY,MAARR,GAAgBA,EAAKS,QAAQlI,KAAK8D,WAAWpD,cAAgB,EAAG,CAC5DV,KAAK8D,WAAWc,aAChB5E,KAAKuH,MAAM,sBAAwBE,GAEvC,IAAIU,EAAmCtI,EAASyB,aAAamG,GAC7D,GAAIU,EAMA,GALInI,KAAK8D,WAAWc,aAChB5E,KAAKuH,MAAM,0BAA2BY,GAE1CxF,OAAOqF,cAAchI,KAAK0H,YAEtBS,EAAiCvH,QAAUZ,KAAK8D,WAAWlD,MAC3D,GAAIZ,KAAK8D,WAAWG,oBAAqB,CACrC,MAAMmE,EAAOpI,KACb,IAAIqI,EAAoBF,EAAiCjH,KACzD,GAAImH,EAAmB,CACnB,MAAMC,EAAe,IAAIC,eACzBD,EAAaE,OAAS,WAClB,GAAoB,MAAhBxI,KAAKyI,OAAgB,CACrB,IAAIC,EAAsBC,KAAKC,MAAM5I,KAAK6I,UACtCT,EAAKtE,WAAWc,aAChBwD,EAAKb,MAAM,yBAA0BmB,GAEzCN,EAAKU,gBAAgBJ,EAAoBK,aAAc7C,EAASF,EAAQmC,EAAkCO,EAC9G,CACJ,EACAJ,EAAaU,QAAU,WAEnBZ,EAAKb,MAAM,gEAAkEvH,KAAKiJ,YAClFjD,EAAO,IAAIC,MAAM,eACrB,EACAqC,EAAalB,KAAK,OAAQpH,KAAK8D,WAAWG,qBAAqB,GAC/DqE,EAAaY,iBAAiB,SAAU,oBACxCZ,EAAaY,iBAAiB,gBAAiB,YAC/CZ,EAAaY,iBAAiB,eAAgB,qCAC9CZ,EAAaa,KAAKtJ,EAASoB,qBAAqBjB,KAAK8D,WAAYuE,GACrE,MAEIrC,EAAO,IAAIC,MAAM,8BAErBjG,KAAK8H,aACT,MAGI9H,KAAK8I,gBAAgBX,EAAiCY,aAAc7C,EAASF,EAAQmC,QAIrFnI,KAAK8D,WAAWc,cAChB5E,KAAKuH,MAAM,2BAA6BvH,KAAK8D,WAAWlD,OACxDZ,KAAKuH,MAAM,iCAAmCY,EAAiCvH,QAEnFoF,EAAO,IAAIC,MAAM,yBACjBjG,KAAK8H,aAIjB,CACJ,IACD9H,KAAK6G,eACZ,MA5FIb,EAAO,IAAIC,MAAM,oCAHjBD,EAAO,IAAIC,MAAM,mCAHjBD,EAAO,IAAIC,MAAM,6CAHjBD,EAAO,IAAIC,MAAM,uBAqGrB,GAER,CACA,eAAA6C,CAAgBM,EAAalD,EAASF,EAAQqD,EAAuBX,EAAsB,MACvF,GAAI1I,KAAK8D,WAAWE,YAAa,CAC7B,MAAMY,EAAc5E,KAAK8D,WAAWc,YAIpC,GAHIA,GACA5E,KAAKuH,MAAM,iBAAmBvH,KAAK8D,WAAWE,aAE9CoF,EAAa,CACTxE,GACA5E,KAAKuH,MAAM,gBAAiB6B,GAEhC,MAAMhB,EAAOpI,KACPsJ,EAAU,IAAIf,eA6BpB,GA5BAe,EAAQd,OAAS,WACb,GAAoB,MAAhBxI,KAAKyI,OAAgB,CACrB,IAAIc,EAAOZ,KAAKC,MAAM5I,KAAK6I,UACvBjE,GACAwD,EAAKb,MAAM,qBAAsBgC,GAEjCA,GACAnB,EAAKoB,gBAAgBD,EAAMH,EAAaC,EAAuBX,GAE/D9D,GACAwD,EAAKb,MAAMa,EAAKtB,mBAAoByC,GAExCrD,EAAQqD,EACZ,MAEIvD,EAAO,IAAIC,MAAMjG,KAAKiJ,aAE1Bb,EAAKN,aACT,EACAwB,EAAQN,QAAU,WACVpE,GACAwD,EAAKb,MAAM,gBAAkBvH,KAAKiJ,YAEtCjD,EAAO,IAAIC,MAAM,gBACjBmC,EAAKN,aACT,EACAwB,EAAQlC,KAAK,MAAOpH,KAAK8D,WAAWE,aAAa,GACjDsF,EAAQJ,iBAAiB,gBAAiB,UAAUE,KAChDpJ,KAAK8D,WAAWa,0BAChB,IAAK,MAAMzE,KAAOF,KAAK8D,WAAWa,0BAC9B2E,EAAQJ,iBAAiBhJ,EAAKF,KAAK8D,WAAWa,0BAA0BzE,IAGhFoJ,EAAQH,MACZ,MAEQvE,GACA5E,KAAKuH,MAAM,8GAEfvB,EAAO,IAAIC,MAAM,wBACjBjG,KAAK8H,aAEb,KACK,CAED,MAAMyB,EAAO,CAAC,EACdvJ,KAAKwJ,gBAAgBD,EAAMH,EAAaC,EAAuBX,GAC3D1I,KAAK8D,WAAWc,aAChB5E,KAAKuH,MAAMvH,KAAK8G,mBAAoByC,GAExCrD,EAAQqD,GACRvJ,KAAK8H,aACT,CACJ,CACA,eAAA0B,CAAgBD,EAAMH,EAAaC,EAAuBX,EAAsB,MAExEW,IACAE,EAA6B,uBAAIF,GAEjCX,IACAa,EAA4B,sBAAIb,GAEpCa,EAAmB,aAAIH,CAC3B,CACA,YAAMK,CAAO1J,GACT,OAAO,IAAIgG,SAAQ,CAACG,EAASwD,KACzBC,aAAaC,WAAW/J,EAASC,SAASC,IAC1CmG,GAAQ,EAAK,GAErB,CACA,WAAA4B,GACI,IAAIF,EACJjF,OAAOqF,cAAchI,KAAK0H,YAKG,QAA5BE,EAAK5H,KAAKmH,oBAAiC,IAAPS,GAAyBA,EAAGiC,QACjE7J,KAAKqH,sBAAuB,CAChC,CACA,KAAAE,CAAMuC,EAAKC,EAAM,MACbC,QAAQC,IAAI,mCAAqCH,EAAKC,EAC1D,E","sources":["webpack://floccus/./node_modules/@byteowls/capacitor-oauth2/dist/esm/web-utils.js","webpack://floccus/./node_modules/@byteowls/capacitor-oauth2/dist/esm/web.js"],"sourcesContent":["// import sha256 from \"fast-sha256\";\r\nexport class WebUtils {\r\n    /**\r\n     * Public only for testing\r\n     */\r\n    static getAppId(options) {\r\n        return this.getOverwritableValue(options, \"appId\");\r\n    }\r\n    static getOverwritableValue(options, key) {\r\n        let base = options[key];\r\n        if (options.web && key in options.web) {\r\n            base = options.web[key];\r\n        }\r\n        return base;\r\n    }\r\n    /**\r\n     * Public only for testing\r\n     */\r\n    static getAuthorizationUrl(options) {\r\n        let url = options.authorizationBaseUrl + \"?client_id=\" + options.appId;\r\n        url += \"&response_type=\" + options.responseType;\r\n        if (options.redirectUrl) {\r\n            url += \"&redirect_uri=\" + options.redirectUrl;\r\n        }\r\n        if (options.scope) {\r\n            url += \"&scope=\" + options.scope;\r\n        }\r\n        url += \"&state=\" + options.state;\r\n        if (options.additionalParameters) {\r\n            for (const key in options.additionalParameters) {\r\n                url += \"&\" + key + \"=\" + options.additionalParameters[key];\r\n            }\r\n        }\r\n        if (options.pkceCodeChallenge) {\r\n            url += \"&code_challenge=\" + options.pkceCodeChallenge;\r\n            url += \"&code_challenge_method=\" + options.pkceCodeChallengeMethod;\r\n        }\r\n        return encodeURI(url);\r\n    }\r\n    static getTokenEndpointData(options, code) {\r\n        let body = '';\r\n        body += encodeURIComponent('grant_type') + '=' + encodeURIComponent('authorization_code') + '&';\r\n        body += encodeURIComponent('client_id') + '=' + encodeURIComponent(options.appId) + '&';\r\n        body += encodeURIComponent('redirect_uri') + '=' + encodeURIComponent(options.redirectUrl) + '&';\r\n        body += encodeURIComponent('code') + '=' + encodeURIComponent(code) + '&';\r\n        body += encodeURIComponent('code_verifier') + '=' + encodeURIComponent(options.pkceCodeVerifier);\r\n        return body;\r\n    }\r\n    /**\r\n     * Public only for testing\r\n     */\r\n    static getUrlParams(url) {\r\n        const urlString = `${url !== null && url !== void 0 ? url : ''}`.trim();\r\n        if (urlString.length === 0) {\r\n            return;\r\n        }\r\n        const parsedUrl = new URL(urlString);\r\n        if (!parsedUrl.search && !parsedUrl.hash) {\r\n            return;\r\n        }\r\n        let urlParamStr;\r\n        if (parsedUrl.search) {\r\n            urlParamStr = parsedUrl.search.substr(1);\r\n        }\r\n        else {\r\n            urlParamStr = parsedUrl.hash.substr(1);\r\n        }\r\n        const keyValuePairs = urlParamStr.split(`&`);\r\n        // @ts-ignore\r\n        return keyValuePairs.reduce((accumulator, currentValue) => {\r\n            const [key, val] = currentValue.split(`=`);\r\n            if (key && key.length > 0) {\r\n                return Object.assign(Object.assign({}, accumulator), { [key]: decodeURIComponent(val) });\r\n            }\r\n        }, {});\r\n    }\r\n    static randomString(length = 10) {\r\n        const haystack = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\r\n        let randomStr;\r\n        if (window.crypto) {\r\n            let numberArray = new Uint32Array(length);\r\n            window.crypto.getRandomValues(numberArray);\r\n            numberArray = numberArray.map(x => haystack.charCodeAt(x % haystack.length));\r\n            let stringArray = [];\r\n            numberArray.forEach(x => {\r\n                stringArray.push(haystack.charAt(x % haystack.length));\r\n            });\r\n            randomStr = stringArray.join(\"\");\r\n        }\r\n        else {\r\n            randomStr = \"\";\r\n            for (let i = 0; i < length; i++) {\r\n                randomStr += haystack.charAt(Math.floor(Math.random() * haystack.length));\r\n            }\r\n        }\r\n        return randomStr;\r\n    }\r\n    static async buildWebOptions(configOptions) {\r\n        const webOptions = new WebOptions();\r\n        webOptions.appId = this.getAppId(configOptions);\r\n        webOptions.authorizationBaseUrl = this.getOverwritableValue(configOptions, \"authorizationBaseUrl\");\r\n        webOptions.responseType = this.getOverwritableValue(configOptions, \"responseType\");\r\n        if (!webOptions.responseType) {\r\n            webOptions.responseType = \"token\";\r\n        }\r\n        webOptions.redirectUrl = this.getOverwritableValue(configOptions, \"redirectUrl\");\r\n        // controlling parameters\r\n        webOptions.resourceUrl = this.getOverwritableValue(configOptions, \"resourceUrl\");\r\n        webOptions.accessTokenEndpoint = this.getOverwritableValue(configOptions, \"accessTokenEndpoint\");\r\n        webOptions.pkceEnabled = this.getOverwritableValue(configOptions, \"pkceEnabled\");\r\n        if (webOptions.pkceEnabled) {\r\n            webOptions.pkceCodeVerifier = this.randomString(64);\r\n            if (CryptoUtils.HAS_SUBTLE_CRYPTO) {\r\n                await CryptoUtils.deriveChallenge(webOptions.pkceCodeVerifier).then(c => {\r\n                    webOptions.pkceCodeChallenge = c;\r\n                    webOptions.pkceCodeChallengeMethod = \"S256\";\r\n                });\r\n            }\r\n            else {\r\n                webOptions.pkceCodeChallenge = webOptions.pkceCodeVerifier;\r\n                webOptions.pkceCodeChallengeMethod = \"plain\";\r\n            }\r\n        }\r\n        webOptions.scope = this.getOverwritableValue(configOptions, \"scope\");\r\n        webOptions.state = this.getOverwritableValue(configOptions, \"state\");\r\n        if (!webOptions.state || webOptions.state.length === 0) {\r\n            webOptions.state = this.randomString(20);\r\n        }\r\n        let parametersMapHelper = this.getOverwritableValue(configOptions, \"additionalParameters\");\r\n        if (parametersMapHelper) {\r\n            webOptions.additionalParameters = {};\r\n            for (const key in parametersMapHelper) {\r\n                if (key && key.trim().length > 0) {\r\n                    let value = parametersMapHelper[key];\r\n                    if (value && value.trim().length > 0) {\r\n                        webOptions.additionalParameters[key] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let headersMapHelper = this.getOverwritableValue(configOptions, \"additionalResourceHeaders\");\r\n        if (headersMapHelper) {\r\n            webOptions.additionalResourceHeaders = {};\r\n            for (const key in headersMapHelper) {\r\n                if (key && key.trim().length > 0) {\r\n                    let value = headersMapHelper[key];\r\n                    if (value && value.trim().length > 0) {\r\n                        webOptions.additionalResourceHeaders[key] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        webOptions.logsEnabled = this.getOverwritableValue(configOptions, \"logsEnabled\");\r\n        return webOptions;\r\n    }\r\n    static buildWindowOptions(configOptions) {\r\n        const windowOptions = new WebOptions();\r\n        if (configOptions.web) {\r\n            if (configOptions.web.windowOptions) {\r\n                windowOptions.windowOptions = configOptions.web.windowOptions;\r\n            }\r\n            if (configOptions.web.windowTarget) {\r\n                windowOptions.windowTarget = configOptions.web.windowTarget;\r\n            }\r\n        }\r\n        return windowOptions;\r\n    }\r\n}\r\nexport class CryptoUtils {\r\n    static toUint8Array(str) {\r\n        const buf = new ArrayBuffer(str.length);\r\n        const bufView = new Uint8Array(buf);\r\n        for (let i = 0; i < str.length; i++) {\r\n            bufView[i] = str.charCodeAt(i);\r\n        }\r\n        return bufView;\r\n    }\r\n    static toBase64Url(base64) {\r\n        return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n    }\r\n    static toBase64(bytes) {\r\n        let len = bytes.length;\r\n        let base64 = \"\";\r\n        for (let i = 0; i < len; i += 3) {\r\n            base64 += this.BASE64_CHARS[bytes[i] >> 2];\r\n            base64 += this.BASE64_CHARS[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n            base64 += this.BASE64_CHARS[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n            base64 += this.BASE64_CHARS[bytes[i + 2] & 63];\r\n        }\r\n        if ((len % 3) === 2) {\r\n            base64 = base64.substring(0, base64.length - 1) + \"=\";\r\n        }\r\n        else if (len % 3 === 1) {\r\n            base64 = base64.substring(0, base64.length - 2) + \"==\";\r\n        }\r\n        return base64;\r\n    }\r\n    static deriveChallenge(codeVerifier) {\r\n        if (codeVerifier.length < 43 || codeVerifier.length > 128) {\r\n            return Promise.reject(new Error('ERR_PKCE_CODE_VERIFIER_INVALID_LENGTH'));\r\n        }\r\n        if (!CryptoUtils.HAS_SUBTLE_CRYPTO) {\r\n            return Promise.reject(new Error('ERR_PKCE_CRYPTO_NOTSUPPORTED'));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            crypto.subtle.digest('SHA-256', this.toUint8Array(codeVerifier)).then(arrayBuffer => {\r\n                return resolve(this.toBase64Url(this.toBase64(new Uint8Array(arrayBuffer))));\r\n            }, error => reject(error));\r\n        });\r\n    }\r\n}\r\nCryptoUtils.BASE64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\nCryptoUtils.HAS_SUBTLE_CRYPTO = typeof window !== 'undefined' && !!window.crypto && !!window.crypto.subtle;\r\nexport class WebOptions {\r\n    constructor() {\r\n        this.windowTarget = \"_blank\";\r\n    }\r\n}\r\n//# sourceMappingURL=web-utils.js.map","import { WebPlugin } from '@capacitor/core';\r\nimport { WebUtils } from \"./web-utils\";\r\nexport class OAuth2ClientPluginWeb extends WebPlugin {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.loopCount = 2000;\r\n        this.intervalLength = 100;\r\n        this.MSG_RETURNED_TO_JS = \"Returned to JS:\";\r\n    }\r\n    /**\r\n     * Get a new access token using an existing refresh token.\r\n     */\r\n    async refreshToken(_options) {\r\n        return new Promise((_resolve, reject) => {\r\n            reject(new Error(\"Functionality not implemented for PWAs yet\"));\r\n        });\r\n    }\r\n    async authenticate(options) {\r\n        const windowOptions = WebUtils.buildWindowOptions(options);\r\n        // we open the window first to avoid popups being blocked because of\r\n        // the asynchronous buildWebOptions call\r\n        this.windowHandle = window.open('', windowOptions.windowTarget, windowOptions.windowOptions);\r\n        this.webOptions = await WebUtils.buildWebOptions(options);\r\n        return new Promise((resolve, reject) => {\r\n            // validate\r\n            if (!this.webOptions.appId || this.webOptions.appId.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_APP_ID\"));\r\n            }\r\n            else if (!this.webOptions.authorizationBaseUrl || this.webOptions.authorizationBaseUrl.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_AUTHORIZATION_BASE_URL\"));\r\n            }\r\n            else if (!this.webOptions.redirectUrl || this.webOptions.redirectUrl.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_REDIRECT_URL\"));\r\n            }\r\n            else if (!this.webOptions.responseType || this.webOptions.responseType.length == 0) {\r\n                reject(new Error(\"ERR_PARAM_NO_RESPONSE_TYPE\"));\r\n            }\r\n            else {\r\n                // init internal control params\r\n                let loopCount = this.loopCount;\r\n                this.windowClosedByPlugin = false;\r\n                // open window\r\n                const authorizationUrl = WebUtils.getAuthorizationUrl(this.webOptions);\r\n                if (this.webOptions.logsEnabled) {\r\n                    this.doLog(\"Authorization url: \" + authorizationUrl);\r\n                }\r\n                if (this.windowHandle) {\r\n                    this.windowHandle.location.href = authorizationUrl;\r\n                }\r\n                // wait for redirect and resolve the\r\n                this.intervalId = window.setInterval(() => {\r\n                    var _a, _b;\r\n                    if (loopCount-- < 0) {\r\n                        this.closeWindow();\r\n                    }\r\n                    else if (((_a = this.windowHandle) === null || _a === void 0 ? void 0 : _a.closed) && !this.windowClosedByPlugin) {\r\n                        window.clearInterval(this.intervalId);\r\n                        reject(new Error(\"USER_CANCELLED\"));\r\n                    }\r\n                    else {\r\n                        let href = undefined;\r\n                        try {\r\n                            href = (_b = this.windowHandle) === null || _b === void 0 ? void 0 : _b.location.href;\r\n                        }\r\n                        catch (ignore) {\r\n                            // ignore DOMException: Blocked a frame with origin \"http://localhost:4200\" from accessing a cross-origin frame.\r\n                        }\r\n                        if (href != null && href.indexOf(this.webOptions.redirectUrl) >= 0) {\r\n                            if (this.webOptions.logsEnabled) {\r\n                                this.doLog(\"Url from Provider: \" + href);\r\n                            }\r\n                            let authorizationRedirectUrlParamObj = WebUtils.getUrlParams(href);\r\n                            if (authorizationRedirectUrlParamObj) {\r\n                                if (this.webOptions.logsEnabled) {\r\n                                    this.doLog(\"Authorization response:\", authorizationRedirectUrlParamObj);\r\n                                }\r\n                                window.clearInterval(this.intervalId);\r\n                                // check state\r\n                                if (authorizationRedirectUrlParamObj.state === this.webOptions.state) {\r\n                                    if (this.webOptions.accessTokenEndpoint) {\r\n                                        const self = this;\r\n                                        let authorizationCode = authorizationRedirectUrlParamObj.code;\r\n                                        if (authorizationCode) {\r\n                                            const tokenRequest = new XMLHttpRequest();\r\n                                            tokenRequest.onload = function () {\r\n                                                if (this.status === 200) {\r\n                                                    let accessTokenResponse = JSON.parse(this.response);\r\n                                                    if (self.webOptions.logsEnabled) {\r\n                                                        self.doLog(\"Access token response:\", accessTokenResponse);\r\n                                                    }\r\n                                                    self.requestResource(accessTokenResponse.access_token, resolve, reject, authorizationRedirectUrlParamObj, accessTokenResponse);\r\n                                                }\r\n                                            };\r\n                                            tokenRequest.onerror = function () {\r\n                                                // always log error because of CORS hint\r\n                                                self.doLog(\"ERR_GENERAL: See client logs. It might be CORS. Status text: \" + this.statusText);\r\n                                                reject(new Error(\"ERR_GENERAL\"));\r\n                                            };\r\n                                            tokenRequest.open(\"POST\", this.webOptions.accessTokenEndpoint, true);\r\n                                            tokenRequest.setRequestHeader('accept', 'application/json');\r\n                                            tokenRequest.setRequestHeader('cache-control', 'no-cache');\r\n                                            tokenRequest.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\r\n                                            tokenRequest.send(WebUtils.getTokenEndpointData(this.webOptions, authorizationCode));\r\n                                        }\r\n                                        else {\r\n                                            reject(new Error(\"ERR_NO_AUTHORIZATION_CODE\"));\r\n                                        }\r\n                                        this.closeWindow();\r\n                                    }\r\n                                    else {\r\n                                        // if no accessTokenEndpoint exists request the resource\r\n                                        this.requestResource(authorizationRedirectUrlParamObj.access_token, resolve, reject, authorizationRedirectUrlParamObj);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (this.webOptions.logsEnabled) {\r\n                                        this.doLog(\"State from web options: \" + this.webOptions.state);\r\n                                        this.doLog(\"State returned from provider: \" + authorizationRedirectUrlParamObj.state);\r\n                                    }\r\n                                    reject(new Error(\"ERR_STATES_NOT_MATCH\"));\r\n                                    this.closeWindow();\r\n                                }\r\n                            }\r\n                            // this is no error no else clause required\r\n                        }\r\n                    }\r\n                }, this.intervalLength);\r\n            }\r\n        });\r\n    }\r\n    requestResource(accessToken, resolve, reject, authorizationResponse, accessTokenResponse = null) {\r\n        if (this.webOptions.resourceUrl) {\r\n            const logsEnabled = this.webOptions.logsEnabled;\r\n            if (logsEnabled) {\r\n                this.doLog(\"Resource url: \" + this.webOptions.resourceUrl);\r\n            }\r\n            if (accessToken) {\r\n                if (logsEnabled) {\r\n                    this.doLog(\"Access token:\", accessToken);\r\n                }\r\n                const self = this;\r\n                const request = new XMLHttpRequest();\r\n                request.onload = function () {\r\n                    if (this.status === 200) {\r\n                        let resp = JSON.parse(this.response);\r\n                        if (logsEnabled) {\r\n                            self.doLog(\"Resource response:\", resp);\r\n                        }\r\n                        if (resp) {\r\n                            self.assignResponses(resp, accessToken, authorizationResponse, accessTokenResponse);\r\n                        }\r\n                        if (logsEnabled) {\r\n                            self.doLog(self.MSG_RETURNED_TO_JS, resp);\r\n                        }\r\n                        resolve(resp);\r\n                    }\r\n                    else {\r\n                        reject(new Error(this.statusText));\r\n                    }\r\n                    self.closeWindow();\r\n                };\r\n                request.onerror = function () {\r\n                    if (logsEnabled) {\r\n                        self.doLog(\"ERR_GENERAL: \" + this.statusText);\r\n                    }\r\n                    reject(new Error(\"ERR_GENERAL\"));\r\n                    self.closeWindow();\r\n                };\r\n                request.open(\"GET\", this.webOptions.resourceUrl, true);\r\n                request.setRequestHeader('Authorization', `Bearer ${accessToken}`);\r\n                if (this.webOptions.additionalResourceHeaders) {\r\n                    for (const key in this.webOptions.additionalResourceHeaders) {\r\n                        request.setRequestHeader(key, this.webOptions.additionalResourceHeaders[key]);\r\n                    }\r\n                }\r\n                request.send();\r\n            }\r\n            else {\r\n                if (logsEnabled) {\r\n                    this.doLog(\"No accessToken was provided although you configured a resourceUrl. Remove the resourceUrl from the config.\");\r\n                }\r\n                reject(new Error(\"ERR_NO_ACCESS_TOKEN\"));\r\n                this.closeWindow();\r\n            }\r\n        }\r\n        else {\r\n            // if no resource url exists just return the accessToken response\r\n            const resp = {};\r\n            this.assignResponses(resp, accessToken, authorizationResponse, accessTokenResponse);\r\n            if (this.webOptions.logsEnabled) {\r\n                this.doLog(this.MSG_RETURNED_TO_JS, resp);\r\n            }\r\n            resolve(resp);\r\n            this.closeWindow();\r\n        }\r\n    }\r\n    assignResponses(resp, accessToken, authorizationResponse, accessTokenResponse = null) {\r\n        // #154\r\n        if (authorizationResponse) {\r\n            resp[\"authorization_response\"] = authorizationResponse;\r\n        }\r\n        if (accessTokenResponse) {\r\n            resp[\"access_token_response\"] = accessTokenResponse;\r\n        }\r\n        resp[\"access_token\"] = accessToken;\r\n    }\r\n    async logout(options) {\r\n        return new Promise((resolve, _reject) => {\r\n            localStorage.removeItem(WebUtils.getAppId(options));\r\n            resolve(true);\r\n        });\r\n    }\r\n    closeWindow() {\r\n        var _a;\r\n        window.clearInterval(this.intervalId);\r\n        // #164 if the provider's login page is opened in the same tab or window it must not be closed\r\n        // if (this.webOptions.windowTarget !== \"_self\") {\r\n        //     this.windowHandle?.close();\r\n        // }\r\n        (_a = this.windowHandle) === null || _a === void 0 ? void 0 : _a.close();\r\n        this.windowClosedByPlugin = true;\r\n    }\r\n    doLog(msg, obj = null) {\r\n        console.log(\"I/Capacitor/OAuth2ClientPlugin: \" + msg, obj);\r\n    }\r\n}\r\n//# sourceMappingURL=web.js.map"],"names":["WebUtils","getAppId","options","this","getOverwritableValue","key","base","web","getAuthorizationUrl","url","authorizationBaseUrl","appId","responseType","redirectUrl","scope","state","additionalParameters","pkceCodeChallenge","pkceCodeChallengeMethod","encodeURI","getTokenEndpointData","code","body","encodeURIComponent","pkceCodeVerifier","getUrlParams","urlString","trim","length","parsedUrl","URL","search","hash","urlParamStr","substr","split","reduce","accumulator","currentValue","val","Object","assign","decodeURIComponent","randomString","haystack","randomStr","window","crypto","numberArray","Uint32Array","getRandomValues","map","x","charCodeAt","stringArray","forEach","push","charAt","join","i","Math","floor","random","buildWebOptions","configOptions","webOptions","WebOptions","resourceUrl","accessTokenEndpoint","pkceEnabled","CryptoUtils","HAS_SUBTLE_CRYPTO","deriveChallenge","then","c","parametersMapHelper","value","headersMapHelper","additionalResourceHeaders","logsEnabled","buildWindowOptions","windowOptions","windowTarget","toUint8Array","str","buf","ArrayBuffer","bufView","Uint8Array","toBase64Url","base64","replace","toBase64","bytes","len","BASE64_CHARS","substring","codeVerifier","Promise","reject","Error","resolve","subtle","digest","arrayBuffer","error","constructor","OAuth2ClientPluginWeb","WebPlugin","super","arguments","loopCount","intervalLength","MSG_RETURNED_TO_JS","refreshToken","_options","_resolve","authenticate","windowHandle","open","windowClosedByPlugin","authorizationUrl","doLog","location","href","intervalId","setInterval","_a","_b","closeWindow","closed","clearInterval","ignore","indexOf","authorizationRedirectUrlParamObj","self","authorizationCode","tokenRequest","XMLHttpRequest","onload","status","accessTokenResponse","JSON","parse","response","requestResource","access_token","onerror","statusText","setRequestHeader","send","accessToken","authorizationResponse","request","resp","assignResponses","logout","_reject","localStorage","removeItem","close","msg","obj","console","log"],"sourceRoot":""}