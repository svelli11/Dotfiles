{"version":3,"file":"210.js","mappings":"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","sources":["webpack://floccus/./node_modules/check-error/index.js","webpack://floccus/./node_modules/chai/lib/chai/utils/flag.js","webpack://floccus/./node_modules/chai/index.mjs","webpack://floccus/./node_modules/chai/lib/chai/utils/overwriteMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/objDisplay.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getProperties.js","webpack://floccus/./node_modules/pathval/index.js","webpack://floccus/./node_modules/chai/lib/chai/core/assertions.js","webpack://floccus/./node_modules/core-js/modules/es.iterator.some.js","webpack://floccus/./node_modules/chai/lib/chai/assertion.js","webpack://floccus/./node_modules/deep-eql/index.js","webpack://floccus/./node_modules/chai-as-promised/lib/chai-as-promised.js","webpack://floccus/./node_modules/chai/lib/chai/interface/expect.js","webpack://floccus/./node_modules/get-func-name/index.js","webpack://floccus/./node_modules/core-js/modules/es.object.define-getter.js","webpack://floccus/./node_modules/core-js/modules/es.iterator.find.js","webpack://floccus/./node_modules/chai/lib/chai/utils/inspect.js","webpack://floccus/./node_modules/chai/lib/chai/utils/isNaN.js","webpack://floccus/./node_modules/core-js/modules/es.array.sort.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addProperty.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getMessage.js","webpack://floccus/./node_modules/core-js/modules/es.array.unscopables.flat-map.js","webpack://floccus/./node_modules/core-js/modules/es.iterator.flat-map.js","webpack://floccus/./node_modules/core-js/modules/esnext.iterator.flat-map.js","webpack://floccus/./node_modules/chai/lib/chai/config.js","webpack://floccus/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/compareByInspect.js","webpack://floccus/./node_modules/core-js/modules/esnext.iterator.some.js","webpack://floccus/./node_modules/loupe/loupe.js","webpack://floccus/./node_modules/core-js/internals/object-prototype-accessors-forced.js","webpack://floccus/./node_modules/chai/lib/chai/utils/test.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getOperator.js","webpack://floccus/./node_modules/chai/lib/chai/utils/transferFlags.js","webpack://floccus/./node_modules/core-js/internals/get-iterator-flattenable.js","webpack://floccus/./node_modules/assertion-error/index.js","webpack://floccus/./node_modules/chai/lib/chai/utils/proxify.js","webpack://floccus/./node_modules/chai/lib/chai/utils/overwriteProperty.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addChainableMethod.js","webpack://floccus/./node_modules/chai/lib/chai/utils/isProxyEnabled.js","webpack://floccus/./node_modules/type-detect/type-detect.js","webpack://floccus/./node_modules/core-js/internals/flatten-into-array.js","webpack://floccus/./node_modules/core-js/modules/esnext.iterator.find.js","webpack://floccus/./node_modules/chai/lib/chai/interface/assert.js","webpack://floccus/./node_modules/chai/lib/chai/utils/expectTypes.js","webpack://floccus/./node_modules/chai/index.js","webpack://floccus/./node_modules/core-js/modules/es.array.flat-map.js","webpack://floccus/./node_modules/chai/lib/chai/utils/getActual.js","webpack://floccus/./node_modules/chai/lib/chai.js","webpack://floccus/./node_modules/chai/lib/chai/interface/should.js","webpack://floccus/./node_modules/chai/lib/chai/utils/index.js","webpack://floccus/./node_modules/core-js/internals/delete-property-or-throw.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addMethod.js","webpack://floccus/./node_modules/core-js/modules/es.object.define-setter.js","webpack://floccus/./node_modules/chai/lib/chai/utils/addLengthGuard.js","webpack://floccus/./node_modules/core-js/internals/does-not-exceed-safe-integer.js"],"sourcesContent":["'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar getFunctionName = require('get-func-name');\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike);\n    if (constructorName === '') {\n      var newConstructorName = getFunctionName(new errorLike()); // eslint-disable-line new-cap\n      constructorName = newConstructorName || constructorName;\n    }\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","import chai from './index.js';\n\nexport const expect = chai.expect;\nexport const version = chai.version;\nexport const Assertion = chai.Assertion;\nexport const AssertionError = chai.AssertionError;\nexport const util = chai.util;\nexport const config = chai.config;\nexport const use = chai.use;\nexport const should = chai.should;\nexport const assert = chai.assert;\nexport const core = chai.core;\n\nexport default chai;\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : ''\n      , isEql = isDeep ? flag(this, 'eql') : SameValueZero;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || isEql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return isEql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    var eql = flag(this, 'eql');\n    this.assert(\n        eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toISOString() + '..' + finish.toISOString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name]\n      , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;;\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && isEql(val, value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    var eql = flag(this, 'eql');\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys\n      , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          return isEql(expectedKey, actualKey);\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          return isEql(expectedKey, actualKey);\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? flag(this, 'eql') : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep')\n      , eql = flag(this, 'eql');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.some` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.some\n$({ target: 'Iterator', proto: true, real: true }, {\n  some: function some(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    return iterate(record, function (value, stop) {\n      if (predicate(value, counter++)) return stop();\n    }, { IS_RECORD: true, INTERRUPTED: true }).stopped;\n  }\n});\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * - `eql`: This flag contains the deepEqual function to be used by the assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n    flag(this, 'eql', config.deepEqual || util.eql);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function get(key) {\n    return key[this._key];\n  },\n  set: function set(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n      return leftHandOperand === rightHandOperand;\n    case 'Error':\n      return keysEqual(leftHandOperand, rightHandOperand, [ 'name', 'message', 'code' ], options);\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Temporal.PlainDate':\n    case 'Temporal.PlainTime':\n    case 'Temporal.PlainDateTime':\n    case 'Temporal.Instant':\n    case 'Temporal.ZonedDateTime':\n    case 'Temporal.PlainYearMonth':\n    case 'Temporal.PlainMonthDay':\n      return leftHandOperand.equals(rightHandOperand);\n    case 'Temporal.Duration':\n      return leftHandOperand.total('nanoseconds') === rightHandOperand.total('nanoseconds');\n    case 'Temporal.TimeZone':\n    case 'Temporal.Calendar':\n      return leftHandOperand.toString() === rightHandOperand.toString();\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  try {\n    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n    if (leftHandOperand.size !== rightHandOperand.size) {\n      return false;\n    }\n    if (leftHandOperand.size === 0) {\n      return true;\n    }\n  } catch (sizeError) {\n    // things that aren't actual Maps or Sets will throw here\n    return false;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\nfunction getEnumerableSymbols(target) {\n  var keys = [];\n  var allKeys = Object.getOwnPropertySymbols(target);\n  for (var i = 0; i < allKeys.length; i += 1) {\n    var key = allKeys[i];\n    if (Object.getOwnPropertyDescriptor(target, key).enumerable) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  var leftHandSymbols = getEnumerableSymbols(leftHandOperand);\n  var rightHandSymbols = getEnumerableSymbols(rightHandOperand);\n  leftHandKeys = leftHandKeys.concat(leftHandSymbols);\n  rightHandKeys = rightHandKeys.concat(rightHandSymbols);\n\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    if (iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\nfunction mapSymbols(arr) {\n  return arr.map(function mapSymbol(entry) {\n    if (typeof entry === 'symbol') {\n      return entry.toString();\n    }\n\n    return entry;\n  });\n}\n","\"use strict\";\n/* eslint-disable no-invalid-this */\nlet checkError = require(\"check-error\");\n\nmodule.exports = (chai, utils) => {\n    const Assertion = chai.Assertion;\n    const assert = chai.assert;\n    const proxify = utils.proxify;\n\n    // If we are using a version of Chai that has checkError on it,\n    // we want to use that version to be consistent. Otherwise, we use\n    // what was passed to the factory.\n    if (utils.checkError) {\n        checkError = utils.checkError;\n    }\n\n    function isLegacyJQueryPromise(thenable) {\n        // jQuery promises are Promises/A+-compatible since 3.0.0. jQuery 3.0.0 is also the first version\n        // to define the catch method.\n        return typeof thenable.catch !== \"function\" &&\n               typeof thenable.always === \"function\" &&\n               typeof thenable.done === \"function\" &&\n               typeof thenable.fail === \"function\" &&\n               typeof thenable.pipe === \"function\" &&\n               typeof thenable.progress === \"function\" &&\n               typeof thenable.state === \"function\";\n    }\n\n    function assertIsAboutPromise(assertion) {\n        if (typeof assertion._obj.then !== \"function\") {\n            throw new TypeError(utils.inspect(assertion._obj) + \" is not a thenable.\");\n        }\n        if (isLegacyJQueryPromise(assertion._obj)) {\n            throw new TypeError(\"Chai as Promised is incompatible with thenables of jQuery<3.0.0, sorry! Please \" +\n                                \"upgrade jQuery or use another Promises/A+ compatible library (see \" +\n                                \"http://promisesaplus.com/).\");\n        }\n    }\n\n    function proxifyIfSupported(assertion) {\n        return proxify === undefined ? assertion : proxify(assertion);\n    }\n\n    function method(name, asserter) {\n        utils.addMethod(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return asserter.apply(this, arguments);\n        });\n    }\n\n    function property(name, asserter) {\n        utils.addProperty(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return proxifyIfSupported(asserter.apply(this, arguments));\n        });\n    }\n\n    function doNotify(promise, done) {\n        promise.then(() => done(), done);\n    }\n\n    // These are for clarity and to bypass Chai refusing to allow `undefined` as actual when used with `assert`.\n    function assertIfNegated(assertion, message, extra) {\n        assertion.assert(true, null, message, extra.expected, extra.actual);\n    }\n\n    function assertIfNotNegated(assertion, message, extra) {\n        assertion.assert(false, message, null, extra.expected, extra.actual);\n    }\n\n    function getBasePromise(assertion) {\n        // We need to chain subsequent asserters on top of ones in the chain already (consider\n        // `eventually.have.property(\"foo\").that.equals(\"bar\")`), only running them after the existing ones pass.\n        // So the first base-promise is `assertion._obj`, but after that we use the assertions themselves, i.e.\n        // previously derived promises, to chain off of.\n        return typeof assertion.then === \"function\" ? assertion : assertion._obj;\n    }\n\n    function getReasonName(reason) {\n        return reason instanceof Error ? reason.toString() : checkError.getConstructorName(reason);\n    }\n\n    // Grab these first, before we modify `Assertion.prototype`.\n\n    const propertyNames = Object.getOwnPropertyNames(Assertion.prototype);\n\n    const propertyDescs = {};\n    for (const name of propertyNames) {\n        propertyDescs[name] = Object.getOwnPropertyDescriptor(Assertion.prototype, name);\n    }\n\n    property(\"fulfilled\", function () {\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                assertIfNegated(this,\n                                \"expected promise not to be fulfilled but it was fulfilled with #{act}\",\n                                { actual: value });\n                return value;\n            },\n            reason => {\n                assertIfNotNegated(this,\n                                   \"expected promise to be fulfilled but it was rejected with #{act}\",\n                                   { actual: getReasonName(reason) });\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    property(\"rejected\", function () {\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                assertIfNotNegated(this,\n                                   \"expected promise to be rejected but it was fulfilled with #{act}\",\n                                   { actual: value });\n                return value;\n            },\n            reason => {\n                assertIfNegated(this,\n                                \"expected promise not to be rejected but it was rejected with #{act}\",\n                                { actual: getReasonName(reason) });\n\n                // Return the reason, transforming this into a fulfillment, to allow further assertions, e.g.\n                // `promise.should.be.rejected.and.eventually.equal(\"reason\")`.\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    method(\"rejectedWith\", function (errorLike, errMsgMatcher, message) {\n        let errorLikeName = null;\n        const negate = utils.flag(this, \"negate\") || false;\n\n        // rejectedWith with that is called without arguments is\n        // the same as a plain \".rejected\" use.\n        if (errorLike === undefined && errMsgMatcher === undefined &&\n            message === undefined) {\n            /* eslint-disable no-unused-expressions */\n            return this.rejected;\n            /* eslint-enable no-unused-expressions */\n        }\n\n        if (message !== undefined) {\n            utils.flag(this, \"message\", message);\n        }\n\n        if (errorLike instanceof RegExp || typeof errorLike === \"string\") {\n            errMsgMatcher = errorLike;\n            errorLike = null;\n        } else if (errorLike && errorLike instanceof Error) {\n            errorLikeName = errorLike.toString();\n        } else if (typeof errorLike === \"function\") {\n            errorLikeName = checkError.getConstructorName(errorLike);\n        } else {\n            errorLike = null;\n        }\n        const everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n\n        let matcherRelation = \"including\";\n        if (errMsgMatcher instanceof RegExp) {\n            matcherRelation = \"matching\";\n        }\n\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                let assertionMessage = null;\n                let expected = null;\n\n                if (errorLike) {\n                    assertionMessage = \"expected promise to be rejected with #{exp} but it was fulfilled with #{act}\";\n                    expected = errorLikeName;\n                } else if (errMsgMatcher) {\n                    assertionMessage = `expected promise to be rejected with an error ${matcherRelation} #{exp} but ` +\n                                       `it was fulfilled with #{act}`;\n                    expected = errMsgMatcher;\n                }\n\n                assertIfNotNegated(this, assertionMessage, { expected, actual: value });\n                return value;\n            },\n            reason => {\n                const errorLikeCompatible = errorLike && (errorLike instanceof Error ?\n                                                        checkError.compatibleInstance(reason, errorLike) :\n                                                        checkError.compatibleConstructor(reason, errorLike));\n\n                const errMsgMatcherCompatible = errMsgMatcher && checkError.compatibleMessage(reason, errMsgMatcher);\n\n                const reasonName = getReasonName(reason);\n\n                if (negate && everyArgIsDefined) {\n                    if (errorLikeCompatible && errMsgMatcherCompatible) {\n                        this.assert(true,\n                                    null,\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n                } else {\n                    if (errorLike) {\n                        this.assert(errorLikeCompatible,\n                                    \"expected promise to be rejected with #{exp} but it was rejected with #{act}\",\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n\n                    if (errMsgMatcher) {\n                        this.assert(errMsgMatcherCompatible,\n                                    `expected promise to be rejected with an error ${matcherRelation} #{exp} but got ` +\n                                    `#{act}`,\n                                    `expected promise not to be rejected with an error ${matcherRelation} #{exp}`,\n                                    errMsgMatcher,\n                                    checkError.getMessage(reason));\n                    }\n                }\n\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    property(\"eventually\", function () {\n        utils.flag(this, \"eventually\", true);\n        return this;\n    });\n\n    method(\"notify\", function (done) {\n        doNotify(getBasePromise(this), done);\n        return this;\n    });\n\n    method(\"become\", function (value, message) {\n        return this.eventually.deep.equal(value, message);\n    });\n\n    // ### `eventually`\n\n    // We need to be careful not to trigger any getters, thus `Object.getOwnPropertyDescriptor` usage.\n    const methodNames = propertyNames.filter(name => {\n        return name !== \"assert\" && typeof propertyDescs[name].value === \"function\";\n    });\n\n    methodNames.forEach(methodName => {\n        Assertion.overwriteMethod(methodName, originalMethod => function () {\n            return doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n        });\n    });\n\n    const getterNames = propertyNames.filter(name => {\n        return name !== \"_obj\" && typeof propertyDescs[name].get === \"function\";\n    });\n\n    getterNames.forEach(getterName => {\n        // Chainable methods are things like `an`, which can work both for `.should.be.an.instanceOf` and as\n        // `should.be.an(\"object\")`. We need to handle those specially.\n        const isChainableMethod = Assertion.prototype.__methods.hasOwnProperty(getterName);\n\n        if (isChainableMethod) {\n            Assertion.overwriteChainableMethod(\n                getterName,\n                originalMethod => function () {\n                    return doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n                },\n                originalGetter => function () {\n                    return doAsserterAsyncAndAddThen(originalGetter, this);\n                }\n            );\n        } else {\n            Assertion.overwriteProperty(getterName, originalGetter => function () {\n                return proxifyIfSupported(doAsserterAsyncAndAddThen(originalGetter, this));\n            });\n        }\n    });\n\n    function doAsserterAsyncAndAddThen(asserter, assertion, args) {\n        // Since we're intercepting all methods/properties, we need to just pass through if they don't want\n        // `eventually`, or if we've already fulfilled the promise (see below).\n        if (!utils.flag(assertion, \"eventually\")) {\n            asserter.apply(assertion, args);\n            return assertion;\n        }\n\n        const derivedPromise = getBasePromise(assertion).then(value => {\n            // Set up the environment for the asserter to actually run: `_obj` should be the fulfillment value, and\n            // now that we have the value, we're no longer in \"eventually\" mode, so we won't run any of this code,\n            // just the base Chai code that we get to via the short-circuit above.\n            assertion._obj = value;\n            utils.flag(assertion, \"eventually\", false);\n\n            return args ? module.exports.transformAsserterArgs(args) : args;\n        }).then(newArgs => {\n            asserter.apply(assertion, newArgs);\n\n            // Because asserters, for example `property`, can change the value of `_obj` (i.e. change the \"object\"\n            // flag), we need to communicate this value change to subsequent chained asserters. Since we build a\n            // promise chain paralleling the asserter chain, we can use it to communicate such changes.\n            return assertion._obj;\n        });\n\n        module.exports.transferPromiseness(assertion, derivedPromise);\n        return assertion;\n    }\n\n    // ### Now use the `Assertion` framework to build an `assert` interface.\n    const originalAssertMethods = Object.getOwnPropertyNames(assert).filter(propName => {\n        return typeof assert[propName] === \"function\";\n    });\n\n    assert.isFulfilled = (promise, message) => (new Assertion(promise, message)).to.be.fulfilled;\n\n    assert.isRejected = (promise, errorLike, errMsgMatcher, message) => {\n        const assertion = new Assertion(promise, message);\n        return assertion.to.be.rejectedWith(errorLike, errMsgMatcher, message);\n    };\n\n    assert.becomes = (promise, value, message) => assert.eventually.deepEqual(promise, value, message);\n\n    assert.doesNotBecome = (promise, value, message) => assert.eventually.notDeepEqual(promise, value, message);\n\n    assert.eventually = {};\n    originalAssertMethods.forEach(assertMethodName => {\n        assert.eventually[assertMethodName] = function (promise) {\n            const otherArgs = Array.prototype.slice.call(arguments, 1);\n\n            let customRejectionHandler;\n            const message = arguments[assert[assertMethodName].length - 1];\n            if (typeof message === \"string\") {\n                customRejectionHandler = reason => {\n                    throw new chai.AssertionError(`${message}\\n\\nOriginal reason: ${utils.inspect(reason)}`);\n                };\n            }\n\n            const returnedPromise = promise.then(\n                fulfillmentValue => assert[assertMethodName].apply(assert, [fulfillmentValue].concat(otherArgs)),\n                customRejectionHandler\n            );\n\n            returnedPromise.notify = done => {\n                doNotify(returnedPromise, done);\n            };\n\n            return returnedPromise;\n        };\n    });\n};\n\nmodule.exports.transferPromiseness = (assertion, promise) => {\n    assertion.then = promise.then.bind(promise);\n};\n\nmodule.exports.transformAsserterArgs = values => values;\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nvar maxFunctionSourceLength = 512;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // eslint-disable-next-line prefer-reflect\n    var functionSource = toString.call(aFunc);\n    // To avoid unconstrained resource consumption due to pathalogically large function names,\n    // we limit the available return value to be less than 512 characters.\n    if (functionSource.indexOf('(') > maxFunctionSourceLength) {\n      return name;\n    }\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = functionSource.match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar FORCED = require('../internals/object-prototype-accessors-forced');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar definePropertyModule = require('../internals/object-define-property');\n\n// `Object.prototype.__defineGetter__` method\n// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__\nif (DESCRIPTORS) {\n  $({ target: 'Object', proto: true, forced: FORCED }, {\n    __defineGetter__: function __defineGetter__(P, getter) {\n      definePropertyModule.f(toObject(this), P, { get: aCallable(getter), enumerable: true, configurable: true });\n    }\n  });\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.find` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.find\n$({ target: 'Iterator', proto: true, real: true }, {\n  find: function find(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    return iterate(record, function (value, stop) {\n      if (predicate(value, counter++)) return stop(value);\n    }, { IS_RECORD: true, INTERRUPTED: true }).result;\n  }\n});\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar loupe = require('loupe');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === 'undefined' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return loupe.inspect(obj, options);\n}\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar deletePropertyOrThrow = require('../internals/delete-property-or-throw');\nvar toString = require('../internals/to-string');\nvar fails = require('../internals/fails');\nvar internalSort = require('../internals/array-sort');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar FF = require('../internals/environment-ff-version');\nvar IE_OR_EDGE = require('../internals/environment-is-ie-or-edge');\nvar V8 = require('../internals/environment-v8-version');\nvar WEBKIT = require('../internals/environment-webkit-version');\n\nvar test = [];\nvar nativeSort = uncurryThis(test.sort);\nvar push = uncurryThis(test.push);\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar STABLE_SORT = !fails(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 70;\n  if (FF && FF > 3) return;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 603;\n\n  var result = '';\n  var code, chr, value, index;\n\n  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)\n  for (code = 65; code < 76; code++) {\n    chr = String.fromCharCode(code);\n\n    switch (code) {\n      case 66: case 69: case 70: case 72: value = 3; break;\n      case 68: case 71: value = 4; break;\n      default: value = 2;\n    }\n\n    for (index = 0; index < 47; index++) {\n      test.push({ k: chr + index, v: value });\n    }\n  }\n\n  test.sort(function (a, b) { return b.v - a.v; });\n\n  for (index = 0; index < test.length; index++) {\n    chr = test[index].k.charAt(0);\n    if (result.charAt(result.length - 1) !== chr) result += chr;\n  }\n\n  return result !== 'DGBEFHACIJK';\n});\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (y === undefined) return -1;\n    if (x === undefined) return 1;\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    return toString(x) > toString(y) ? 1 : -1;\n  };\n};\n\n// `Array.prototype.sort` method\n// https://tc39.es/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    if (comparefn !== undefined) aCallable(comparefn);\n\n    var array = toObject(this);\n\n    if (STABLE_SORT) return comparefn === undefined ? nativeSort(array) : nativeSort(array, comparefn);\n\n    var items = [];\n    var arrayLength = lengthOfArrayLike(array);\n    var itemsLength, index;\n\n    for (index = 0; index < arrayLength; index++) {\n      if (index in array) push(items, array[index]);\n    }\n\n    internalSort(items, getSortCompare(comparefn));\n\n    itemsLength = lengthOfArrayLike(items);\n    index = 0;\n\n    while (index < itemsLength) array[index] = items[index++];\n    while (index < arrayLength) deletePropertyOrThrow(array, index++);\n\n    return array;\n  }\n});\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","'use strict';\n// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flatMap');\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar getIteratorFlattenable = require('../internals/get-iterator-flattenable');\nvar createIteratorProxy = require('../internals/iterator-create-proxy');\nvar iteratorClose = require('../internals/iterator-close');\nvar IS_PURE = require('../internals/is-pure');\n\nvar IteratorProxy = createIteratorProxy(function () {\n  var iterator = this.iterator;\n  var mapper = this.mapper;\n  var result, inner;\n\n  while (true) {\n    if (inner = this.inner) try {\n      result = anObject(call(inner.next, inner.iterator));\n      if (!result.done) return result.value;\n      this.inner = null;\n    } catch (error) { iteratorClose(iterator, 'throw', error); }\n\n    result = anObject(call(this.next, iterator));\n\n    if (this.done = !!result.done) return;\n\n    try {\n      this.inner = getIteratorFlattenable(mapper(result.value, this.counter++), false);\n    } catch (error) { iteratorClose(iterator, 'throw', error); }\n  }\n});\n\n// `Iterator.prototype.flatMap` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.flatmap\n$({ target: 'Iterator', proto: true, real: true, forced: IS_PURE }, {\n  flatMap: function flatMap(mapper) {\n    anObject(this);\n    aCallable(mapper);\n    return new IteratorProxy(getIteratorDirect(this), {\n      mapper: mapper,\n      inner: null\n    });\n  }\n});\n","'use strict';\n// TODO: Remove from `core-js@4`\nrequire('../modules/es.iterator.flat-map');\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON'],\n\n  /**\n   * ### config.deepEqual\n   *\n   * User configurable property, defines which a custom function to use for deepEqual\n   * comparisons.\n   * By default, the function used is the one from the `deep-eql` package without custom comparator.\n   *\n   *     // use a custom comparator\n   *     chai.config.deepEqual = (expected, actual) => {\n   *        return chai.util.eql(expected, actual, {\n   *           comparator: (expected, actual) => {\n   *              // for non number comparison, use the default behavior\n   *              if(typeof expected !== 'number') return null;\n   *              // allow a difference of 10 between compared numbers\n   *              return typeof actual === 'number' && Math.abs(actual - expected) < 10\n   *           }\n   *        })\n   *     };\n   *\n   * @param {Function}\n   * @api public\n   */\n\n  deepEqual: null\n\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","'use strict';\n// TODO: Remove from `core-js@4`\nrequire('../modules/es.iterator.some');\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.loupe = {}));\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39']\n  };\n  var styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red'\n  };\n  var truncator = '…';\n\n  function colorise(value, styleType) {\n    var color = ansiColors[styles[styleType]] || ansiColors[styleType];\n\n    if (!color) {\n      return String(value);\n    }\n\n    return \"\\x1B[\".concat(color[0], \"m\").concat(String(value), \"\\x1B[\").concat(color[1], \"m\");\n  }\n\n  function normaliseOptions() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$showHidden = _ref.showHidden,\n        showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? 2 : _ref$depth,\n        _ref$colors = _ref.colors,\n        colors = _ref$colors === void 0 ? false : _ref$colors,\n        _ref$customInspect = _ref.customInspect,\n        customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect,\n        _ref$showProxy = _ref.showProxy,\n        showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy,\n        _ref$maxArrayLength = _ref.maxArrayLength,\n        maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength,\n        _ref$breakLength = _ref.breakLength,\n        breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength,\n        _ref$seen = _ref.seen,\n        seen = _ref$seen === void 0 ? [] : _ref$seen,\n        _ref$truncate = _ref.truncate,\n        truncate = _ref$truncate === void 0 ? Infinity : _ref$truncate,\n        _ref$stylize = _ref.stylize,\n        stylize = _ref$stylize === void 0 ? String : _ref$stylize;\n\n    var options = {\n      showHidden: Boolean(showHidden),\n      depth: Number(depth),\n      colors: Boolean(colors),\n      customInspect: Boolean(customInspect),\n      showProxy: Boolean(showProxy),\n      maxArrayLength: Number(maxArrayLength),\n      breakLength: Number(breakLength),\n      truncate: Number(truncate),\n      seen: seen,\n      stylize: stylize\n    };\n\n    if (options.colors) {\n      options.stylize = colorise;\n    }\n\n    return options;\n  }\n  function truncate(string, length) {\n    var tail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : truncator;\n    string = String(string);\n    var tailLength = tail.length;\n    var stringLength = string.length;\n\n    if (tailLength > length && stringLength > tailLength) {\n      return tail;\n    }\n\n    if (stringLength > length && stringLength > tailLength) {\n      return \"\".concat(string.slice(0, length - tailLength)).concat(tail);\n    }\n\n    return string;\n  } // eslint-disable-next-line complexity\n\n  function inspectList(list, options, inspectItem) {\n    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ', ';\n    inspectItem = inspectItem || options.inspect;\n    var size = list.length;\n    if (size === 0) return '';\n    var originalLength = options.truncate;\n    var output = '';\n    var peek = '';\n    var truncated = '';\n\n    for (var i = 0; i < size; i += 1) {\n      var last = i + 1 === list.length;\n      var secondToLast = i + 2 === list.length;\n      truncated = \"\".concat(truncator, \"(\").concat(list.length - i, \")\");\n      var value = list[i]; // If there is more than one remaining we need to account for a separator of `, `\n\n      options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n      var string = peek || inspectItem(value, options) + (last ? '' : separator);\n      var nextLength = output.length + string.length;\n      var truncatedLength = nextLength + truncated.length; // If this is the last element, and adding it would\n      // take us over length, but adding the truncator wouldn't - then break now\n\n      if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n        break;\n      } // If this isn't the last or second to last element to scan,\n      // but the string is already over length then break here\n\n\n      if (!last && !secondToLast && truncatedLength > originalLength) {\n        break;\n      } // Peek at the next string to determine if we should\n      // break early before adding this item to the output\n\n\n      peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator); // If we have one element left, but this element and\n      // the next takes over length, the break early\n\n      if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n        break;\n      }\n\n      output += string; // If the next element takes us to length -\n      // but there are more after that, then we should truncate now\n\n      if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n        truncated = \"\".concat(truncator, \"(\").concat(list.length - i - 1, \")\");\n        break;\n      }\n\n      truncated = '';\n    }\n\n    return \"\".concat(output).concat(truncated);\n  }\n\n  function quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n      return key;\n    }\n\n    return JSON.stringify(key).replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n  }\n\n  function inspectProperty(_ref2, options) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    options.truncate -= 2;\n\n    if (typeof key === 'string') {\n      key = quoteComplexKey(key);\n    } else if (typeof key !== 'number') {\n      key = \"[\".concat(options.inspect(key, options), \"]\");\n    }\n\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \": \").concat(value);\n  }\n\n  function inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return '[]';\n    options.truncate -= 4;\n    var listContents = inspectList(array, options);\n    options.truncate -= listContents.length;\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"[ \".concat(listContents).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  /* !\n   * Chai - getFuncName utility\n   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n   * MIT Licensed\n   */\n\n  /**\n   * ### .getFuncName(constructorFn)\n   *\n   * Returns the name of a function.\n   * When a non-function instance is passed, returns `null`.\n   * This also includes a polyfill function if `aFunc.name` is not defined.\n   *\n   * @name getFuncName\n   * @param {Function} funct\n   * @namespace Utils\n   * @api public\n   */\n\n  var toString = Function.prototype.toString;\n  var functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n  var maxFunctionSourceLength = 512;\n  function getFuncName(aFunc) {\n    if (typeof aFunc !== 'function') {\n      return null;\n    }\n\n    var name = '';\n    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n      // eslint-disable-next-line prefer-reflect\n      var functionSource = toString.call(aFunc);\n      // To avoid unconstrained resource consumption due to pathalogically large function names,\n      // we limit the available return value to be less than 512 characters.\n      if (functionSource.indexOf('(') > maxFunctionSourceLength) {\n        return name;\n      }\n      // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n      var match = functionSource.match(functionNameMatch);\n      if (match) {\n        name = match[1];\n      }\n    } else {\n      // If we've got a `name` property we just use it\n      name = aFunc.name;\n    }\n\n    return name;\n  }\n\n  var getFuncName_1 = getFuncName;\n\n  var getArrayName = function getArrayName(array) {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n      return 'Buffer';\n    }\n\n    if (array[Symbol.toStringTag]) {\n      return array[Symbol.toStringTag];\n    }\n\n    return getFuncName_1(array.constructor);\n  };\n\n  function inspectTypedArray(array, options) {\n    var name = getArrayName(array);\n    options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return \"\".concat(name, \"[]\"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n\n    var output = '';\n\n    for (var i = 0; i < array.length; i++) {\n      var string = \"\".concat(options.stylize(truncate(array[i], options.truncate), 'number')).concat(i === array.length - 1 ? '' : ', ');\n      options.truncate -= string.length;\n\n      if (array[i] !== array.length && options.truncate <= 3) {\n        output += \"\".concat(truncator, \"(\").concat(array.length - array[i] + 1, \")\");\n        break;\n      }\n\n      output += string;\n    }\n\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"\".concat(name, \"[ \").concat(output).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  function inspectDate(dateObject, options) {\n    var stringRepresentation = dateObject.toJSON();\n\n    if (stringRepresentation === null) {\n      return 'Invalid Date';\n    }\n\n    var split = stringRepresentation.split('T');\n    var date = split[0]; // If we need to - truncate the time portion, but never the date\n\n    return options.stylize(\"\".concat(date, \"T\").concat(truncate(split[1], options.truncate - date.length - 1)), 'date');\n  }\n\n  function inspectFunction(func, options) {\n    var name = getFuncName_1(func);\n\n    if (!name) {\n      return options.stylize('[Function]', 'special');\n    }\n\n    return options.stylize(\"[Function \".concat(truncate(name, options.truncate - 11), \"]\"), 'special');\n  }\n\n  function inspectMapEntry(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \" => \").concat(value);\n  } // IE11 doesn't support `map.entries()`\n\n\n  function mapToEntries(map) {\n    var entries = [];\n    map.forEach(function (value, key) {\n      entries.push([key, value]);\n    });\n    return entries;\n  }\n\n  function inspectMap(map, options) {\n    var size = map.size - 1;\n\n    if (size <= 0) {\n      return 'Map{}';\n    }\n\n    options.truncate -= 7;\n    return \"Map{ \".concat(inspectList(mapToEntries(map), options, inspectMapEntry), \" }\");\n  }\n\n  var isNaN = Number.isNaN || function (i) {\n    return i !== i;\n  }; // eslint-disable-line no-self-compare\n\n\n  function inspectNumber(number, options) {\n    if (isNaN(number)) {\n      return options.stylize('NaN', 'number');\n    }\n\n    if (number === Infinity) {\n      return options.stylize('Infinity', 'number');\n    }\n\n    if (number === -Infinity) {\n      return options.stylize('-Infinity', 'number');\n    }\n\n    if (number === 0) {\n      return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n\n    return options.stylize(truncate(number, options.truncate), 'number');\n  }\n\n  function inspectBigInt(number, options) {\n    var nums = truncate(number.toString(), options.truncate - 1);\n    if (nums !== truncator) nums += 'n';\n    return options.stylize(nums, 'bigint');\n  }\n\n  function inspectRegExp(value, options) {\n    var flags = value.toString().split('/')[2];\n    var sourceLength = options.truncate - (2 + flags.length);\n    var source = value.source;\n    return options.stylize(\"/\".concat(truncate(source, sourceLength), \"/\").concat(flags), 'regexp');\n  }\n\n  function arrayFromSet(set) {\n    var values = [];\n    set.forEach(function (value) {\n      values.push(value);\n    });\n    return values;\n  }\n\n  function inspectSet(set, options) {\n    if (set.size === 0) return 'Set{}';\n    options.truncate -= 7;\n    return \"Set{ \".concat(inspectList(arrayFromSet(set), options), \" }\");\n  }\n\n  var stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" + \"\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]\", 'g');\n  var escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\'\n  };\n  var hex = 16;\n  var unicodeLength = 4;\n\n  function escape(char) {\n    return escapeCharacters[char] || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));\n  }\n\n  function inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n      string = string.replace(stringEscapeChars, escape);\n    }\n\n    return options.stylize(\"'\".concat(truncate(string, options.truncate - 2), \"'\"), 'string');\n  }\n\n  function inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n      return value.description ? \"Symbol(\".concat(value.description, \")\") : 'Symbol()';\n    }\n\n    return value.toString();\n  }\n\n  var getPromiseValue = function getPromiseValue() {\n    return 'Promise{…}';\n  };\n\n  try {\n    var _process$binding = process.binding('util'),\n        getPromiseDetails = _process$binding.getPromiseDetails,\n        kPending = _process$binding.kPending,\n        kRejected = _process$binding.kRejected;\n\n    if (Array.isArray(getPromiseDetails(Promise.resolve()))) {\n      getPromiseValue = function getPromiseValue(value, options) {\n        var _getPromiseDetails = getPromiseDetails(value),\n            _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2),\n            state = _getPromiseDetails2[0],\n            innerValue = _getPromiseDetails2[1];\n\n        if (state === kPending) {\n          return 'Promise{<pending>}';\n        }\n\n        return \"Promise\".concat(state === kRejected ? '!' : '', \"{\").concat(options.inspect(innerValue, options), \"}\");\n      };\n    }\n  } catch (notNode) {\n    /* ignore */\n  }\n\n  var inspectPromise = getPromiseValue;\n\n  function inspectObject(object, options) {\n    var properties = Object.getOwnPropertyNames(object);\n    var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n\n    if (properties.length === 0 && symbols.length === 0) {\n      return '{}';\n    }\n\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n\n    if (options.seen.indexOf(object) >= 0) {\n      return '[Circular]';\n    }\n\n    options.seen.push(object);\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    var symbolContents = inspectList(symbols.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    options.seen.pop();\n    var sep = '';\n\n    if (propertyContents && symbolContents) {\n      sep = ', ';\n    }\n\n    return \"{ \".concat(propertyContents).concat(sep).concat(symbolContents, \" }\");\n  }\n\n  var toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\n  function inspectClass(value, options) {\n    var name = '';\n\n    if (toStringTag && toStringTag in value) {\n      name = value[toStringTag];\n    }\n\n    name = name || getFuncName_1(value.constructor); // Babel transforms anonymous classes to the name `_class`\n\n    if (!name || name === '_class') {\n      name = '<Anonymous Class>';\n    }\n\n    options.truncate -= name.length;\n    return \"\".concat(name).concat(inspectObject(value, options));\n  }\n\n  function inspectArguments(args, options) {\n    if (args.length === 0) return 'Arguments[]';\n    options.truncate -= 13;\n    return \"Arguments[ \".concat(inspectList(args, options), \" ]\");\n  }\n\n  var errorKeys = ['stack', 'line', 'column', 'name', 'message', 'fileName', 'lineNumber', 'columnNumber', 'number', 'description'];\n  function inspectObject$1(error, options) {\n    var properties = Object.getOwnPropertyNames(error).filter(function (key) {\n      return errorKeys.indexOf(key) === -1;\n    });\n    var name = error.name;\n    options.truncate -= name.length;\n    var message = '';\n\n    if (typeof error.message === 'string') {\n      message = truncate(error.message, options.truncate);\n    } else {\n      properties.unshift('message');\n    }\n\n    message = message ? \": \".concat(message) : '';\n    options.truncate -= message.length + 5;\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, error[key]];\n    }), options, inspectProperty);\n    return \"\".concat(name).concat(message).concat(propertyContents ? \" { \".concat(propertyContents, \" }\") : '');\n  }\n\n  function inspectAttribute(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 3;\n\n    if (!value) {\n      return \"\".concat(options.stylize(key, 'yellow'));\n    }\n\n    return \"\".concat(options.stylize(key, 'yellow'), \"=\").concat(options.stylize(\"\\\"\".concat(value, \"\\\"\"), 'string'));\n  }\n  function inspectHTMLCollection(collection, options) {\n    // eslint-disable-next-line no-use-before-define\n    return inspectList(collection, options, inspectHTML, '\\n');\n  }\n  function inspectHTML(element, options) {\n    var properties = element.getAttributeNames();\n    var name = element.tagName.toLowerCase();\n    var head = options.stylize(\"<\".concat(name), 'special');\n    var headClose = options.stylize(\">\", 'special');\n    var tail = options.stylize(\"</\".concat(name, \">\"), 'special');\n    options.truncate -= name.length * 2 + 5;\n    var propertyContents = '';\n\n    if (properties.length > 0) {\n      propertyContents += ' ';\n      propertyContents += inspectList(properties.map(function (key) {\n        return [key, element.getAttribute(key)];\n      }), options, inspectAttribute, ' ');\n    }\n\n    options.truncate -= propertyContents.length;\n    var truncate = options.truncate;\n    var children = inspectHTMLCollection(element.children, options);\n\n    if (children && children.length > truncate) {\n      children = \"\".concat(truncator, \"(\").concat(element.children.length, \")\");\n    }\n\n    return \"\".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);\n  }\n\n  var symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\n  var chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\n  var nodeInspect = false;\n\n  try {\n    // eslint-disable-next-line global-require\n    var nodeUtil = require('util');\n\n    nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;\n  } catch (noNodeInspect) {\n    nodeInspect = false;\n  }\n\n  function FakeMap() {\n    // eslint-disable-next-line prefer-template\n    this.key = 'chai/loupe__' + Math.random() + Date.now();\n  }\n\n  FakeMap.prototype = {\n    // eslint-disable-next-line object-shorthand\n    get: function get(key) {\n      return key[this.key];\n    },\n    // eslint-disable-next-line object-shorthand\n    has: function has(key) {\n      return this.key in key;\n    },\n    // eslint-disable-next-line object-shorthand\n    set: function set(key, value) {\n      if (Object.isExtensible(key)) {\n        Object.defineProperty(key, this.key, {\n          // eslint-disable-next-line object-shorthand\n          value: value,\n          configurable: true\n        });\n      }\n    }\n  };\n  var constructorMap = new (typeof WeakMap === 'function' ? WeakMap : FakeMap)();\n  var stringTagMap = {};\n  var baseTypesMap = {\n    undefined: function undefined$1(value, options) {\n      return options.stylize('undefined', 'undefined');\n    },\n    null: function _null(value, options) {\n      return options.stylize(null, 'null');\n    },\n    boolean: function boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    Boolean: function Boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    number: inspectNumber,\n    Number: inspectNumber,\n    bigint: inspectBigInt,\n    BigInt: inspectBigInt,\n    string: inspectString,\n    String: inspectString,\n    function: inspectFunction,\n    Function: inspectFunction,\n    symbol: inspectSymbol,\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: inspectSymbol,\n    Array: inspectArray,\n    Date: inspectDate,\n    Map: inspectMap,\n    Set: inspectSet,\n    RegExp: inspectRegExp,\n    Promise: inspectPromise,\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: function WeakSet(value, options) {\n      return options.stylize('WeakSet{…}', 'special');\n    },\n    WeakMap: function WeakMap(value, options) {\n      return options.stylize('WeakMap{…}', 'special');\n    },\n    Arguments: inspectArguments,\n    Int8Array: inspectTypedArray,\n    Uint8Array: inspectTypedArray,\n    Uint8ClampedArray: inspectTypedArray,\n    Int16Array: inspectTypedArray,\n    Uint16Array: inspectTypedArray,\n    Int32Array: inspectTypedArray,\n    Uint32Array: inspectTypedArray,\n    Float32Array: inspectTypedArray,\n    Float64Array: inspectTypedArray,\n    Generator: function Generator() {\n      return '';\n    },\n    DataView: function DataView() {\n      return '';\n    },\n    ArrayBuffer: function ArrayBuffer() {\n      return '';\n    },\n    Error: inspectObject$1,\n    HTMLCollection: inspectHTMLCollection,\n    NodeList: inspectHTMLCollection\n  }; // eslint-disable-next-line complexity\n\n  var inspectCustom = function inspectCustom(value, options, type) {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n      return value[chaiInspect](options);\n    }\n\n    if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {\n      return value[nodeInspect](options.depth, options);\n    }\n\n    if ('inspect' in value && typeof value.inspect === 'function') {\n      return value.inspect(options.depth, options);\n    }\n\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n      return constructorMap.get(value.constructor)(value, options);\n    }\n\n    if (stringTagMap[type]) {\n      return stringTagMap[type](value, options);\n    }\n\n    return '';\n  };\n\n  var toString$1 = Object.prototype.toString; // eslint-disable-next-line complexity\n\n  function inspect(value, options) {\n    options = normaliseOptions(options);\n    options.inspect = inspect;\n    var _options = options,\n        customInspect = _options.customInspect;\n    var type = value === null ? 'null' : _typeof(value);\n\n    if (type === 'object') {\n      type = toString$1.call(value).slice(8, -1);\n    } // If it is a base value that we already support, then use Loupe's inspector\n\n\n    if (baseTypesMap[type]) {\n      return baseTypesMap[type](value, options);\n    } // If `options.customInspect` is set to true then try to use the custom inspector\n\n\n    if (customInspect && value) {\n      var output = inspectCustom(value, options, type);\n\n      if (output) {\n        if (typeof output === 'string') return output;\n        return inspect(output, options);\n      }\n    }\n\n    var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector\n\n    if (proto === Object.prototype || proto === null) {\n      return inspectObject(value, options);\n    } // Specifically account for HTMLElements\n    // eslint-disable-next-line no-undef\n\n\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return inspectHTML(value, options);\n    }\n\n    if ('constructor' in value) {\n      // If it is a class, inspect it like an object but add the constructor name\n      if (value.constructor !== Object) {\n        return inspectClass(value, options);\n      } // If it is an object with an anonymous prototype, display it as an object.\n\n\n      return inspectObject(value, options);\n    } // last chance to check if it's an object\n\n\n    if (value === Object(value)) {\n      return inspectObject(value, options);\n    } // We have run out of options! Just stringify the value\n\n\n    return options.stylize(String(value), type);\n  }\n  function registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n      return false;\n    }\n\n    constructorMap.set(constructor, inspector);\n    return true;\n  }\n  function registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n      return false;\n    }\n\n    stringTagMap[stringTag] = inspector;\n    return true;\n  }\n  var custom = chaiInspect;\n\n  exports.custom = custom;\n  exports.default = inspect;\n  exports.inspect = inspect;\n  exports.registerConstructor = registerConstructor;\n  exports.registerStringTag = registerStringTag;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","'use strict';\n/* eslint-disable no-undef, no-useless-call, sonarjs/no-reference-error -- required for testing */\n/* eslint-disable es/no-legacy-object-prototype-accessor-methods -- required for testing */\nvar IS_PURE = require('../internals/is-pure');\nvar globalThis = require('../internals/global-this');\nvar fails = require('../internals/fails');\nvar WEBKIT = require('../internals/environment-webkit-version');\n\n// Forced replacement object prototype accessors methods\nmodule.exports = IS_PURE || !fails(function () {\n  // This feature detection crashes old WebKit\n  // https://github.com/zloirock/core-js/issues/232\n  if (WEBKIT && WEBKIT < 535) return;\n  var key = Math.random();\n  // In FF throws only define methods\n  __defineSetter__.call(null, key, function () { /* empty */ });\n  delete globalThis[key];\n});\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = function (obj, stringHandling) {\n  if (!stringHandling || typeof obj !== 'string') anObject(obj);\n  var method = getIteratorMethod(obj);\n  return getIteratorDirect(anObject(method !== undefined ? call(method, obj) : obj));\n};\n","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.typeDetect = factory());\n})(this, (function () { 'use strict';\n\n    var promiseExists = typeof Promise === 'function';\n    var globalObject = (function (Obj) {\n        if (typeof globalThis === 'object') {\n            return globalThis;\n        }\n        Object.defineProperty(Obj, 'typeDetectGlobalObject', {\n            get: function get() {\n                return this;\n            },\n            configurable: true,\n        });\n        var global = typeDetectGlobalObject;\n        delete Obj.typeDetectGlobalObject;\n        return global;\n    })(Object.prototype);\n    var symbolExists = typeof Symbol !== 'undefined';\n    var mapExists = typeof Map !== 'undefined';\n    var setExists = typeof Set !== 'undefined';\n    var weakMapExists = typeof WeakMap !== 'undefined';\n    var weakSetExists = typeof WeakSet !== 'undefined';\n    var dataViewExists = typeof DataView !== 'undefined';\n    var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\n    var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\n    var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\n    var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\n    var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\n    var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\n    var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\n    var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\n    var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\n    var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\n    var toStringLeftSliceLength = 8;\n    var toStringRightSliceLength = -1;\n    function typeDetect(obj) {\n        var typeofObj = typeof obj;\n        if (typeofObj !== 'object') {\n            return typeofObj;\n        }\n        if (obj === null) {\n            return 'null';\n        }\n        if (obj === globalObject) {\n            return 'global';\n        }\n        if (Array.isArray(obj) &&\n            (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {\n            return 'Array';\n        }\n        if (typeof window === 'object' && window !== null) {\n            if (typeof window.location === 'object' && obj === window.location) {\n                return 'Location';\n            }\n            if (typeof window.document === 'object' && obj === window.document) {\n                return 'Document';\n            }\n            if (typeof window.navigator === 'object') {\n                if (typeof window.navigator.mimeTypes === 'object' &&\n                    obj === window.navigator.mimeTypes) {\n                    return 'MimeTypeArray';\n                }\n                if (typeof window.navigator.plugins === 'object' &&\n                    obj === window.navigator.plugins) {\n                    return 'PluginArray';\n                }\n            }\n            if ((typeof window.HTMLElement === 'function' ||\n                typeof window.HTMLElement === 'object') &&\n                obj instanceof window.HTMLElement) {\n                if (obj.tagName === 'BLOCKQUOTE') {\n                    return 'HTMLQuoteElement';\n                }\n                if (obj.tagName === 'TD') {\n                    return 'HTMLTableDataCellElement';\n                }\n                if (obj.tagName === 'TH') {\n                    return 'HTMLTableHeaderCellElement';\n                }\n            }\n        }\n        var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n        if (typeof stringTag === 'string') {\n            return stringTag;\n        }\n        var objPrototype = Object.getPrototypeOf(obj);\n        if (objPrototype === RegExp.prototype) {\n            return 'RegExp';\n        }\n        if (objPrototype === Date.prototype) {\n            return 'Date';\n        }\n        if (promiseExists && objPrototype === Promise.prototype) {\n            return 'Promise';\n        }\n        if (setExists && objPrototype === Set.prototype) {\n            return 'Set';\n        }\n        if (mapExists && objPrototype === Map.prototype) {\n            return 'Map';\n        }\n        if (weakSetExists && objPrototype === WeakSet.prototype) {\n            return 'WeakSet';\n        }\n        if (weakMapExists && objPrototype === WeakMap.prototype) {\n            return 'WeakMap';\n        }\n        if (dataViewExists && objPrototype === DataView.prototype) {\n            return 'DataView';\n        }\n        if (mapExists && objPrototype === mapIteratorPrototype) {\n            return 'Map Iterator';\n        }\n        if (setExists && objPrototype === setIteratorPrototype) {\n            return 'Set Iterator';\n        }\n        if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n            return 'Array Iterator';\n        }\n        if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n            return 'String Iterator';\n        }\n        if (objPrototype === null) {\n            return 'Object';\n        }\n        return Object\n            .prototype\n            .toString\n            .call(obj)\n            .slice(toStringLeftSliceLength, toStringRightSliceLength);\n    }\n\n    return typeDetect;\n\n}));\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        doesNotExceedSafeInteger(targetIndex + 1);\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","'use strict';\n// TODO: Remove from `core-js@4`\nrequire('../modules/es.iterator.find');\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","module.exports = require('./lib/chai');\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flatMap` method\n// https://tc39.es/ecma262/#sec-array.prototype.flatmap\n$({ target: 'Array', proto: true }, {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen = lengthOfArrayLike(O);\n    var A;\n    aCallable(callbackfn);\n    A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    return A;\n  }\n});\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.8';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');","'use strict';\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (O, P) {\n  if (!delete O[P]) throw new $TypeError('Cannot delete property ' + tryToString(P) + ' of ' + tryToString(O));\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar FORCED = require('../internals/object-prototype-accessors-forced');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar definePropertyModule = require('../internals/object-define-property');\n\n// `Object.prototype.__defineSetter__` method\n// https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__\nif (DESCRIPTORS) {\n  $({ target: 'Object', proto: true, forced: FORCED }, {\n    __defineSetter__: function __defineSetter__(P, setter) {\n      definePropertyModule.f(toObject(this), P, { set: aCallable(setter), enumerable: true, configurable: true });\n    }\n  });\n}\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","'use strict';\nvar $TypeError = TypeError;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991\n\nmodule.exports = function (it) {\n  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');\n  return it;\n};\n"],"names":["getFunctionName","module","exports","compatibleInstance","thrown","errorLike","Error","compatibleConstructor","constructor","prototype","compatibleMessage","errMatcher","comparisonString","message","RegExp","test","indexOf","getMessage","msg","getConstructorName","constructorName","obj","key","value","flags","__flags","Object","create","arguments","length","addLengthGuard","chai","flag","proxify","transferFlags","ctx","name","method","_method","_super","overwritingMethodWrapper","this","origLockSsfi","result","apply","undefined","newAssertion","Assertion","inspect","config","str","type","toString","call","truncateThreshold","keys","splice","join","getOwnEnumerablePropertySymbols","concat","object","getOwnPropertyNames","addProperty","property","push","proto","getPrototypeOf","forEach","hasProperty","parsePath","path","replace","match","map","mArr","exec","i","parseFloat","p","internalGetPathValue","parsed","pathDepth","temporaryValue","res","part","getPathInfo","last","info","parent","exists","getPathValue","setPathValue","val","tempObj","propName","propVal","next","internalSetPathValue","_","AssertionError","an","toLowerCase","article","charAt","assert","SameValueZero","a","b","isNaN","includeChainingBehavior","include","objType","flagMsg","negate","ssfi","isDeep","descriptor","isEql","included","has","item","some","props","firstErr","numErrs","prop","propAssertion","err","checkError","assertExist","checkArguments","assertEqual","prevLockSsfi","eql","_obj","assertEql","assertAbove","n","errorMessage","doLength","msgPrefix","nType","shouldThrow","to","have","itemsCount","size","assertLeast","assertBelow","assertMost","assertInstanceOf","target","isInstanceOf","TypeError","getName","assertProperty","isNested","isOwn","nameType","pathInfo","val1","val2","hasOwnProperty","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","re","assertKeys","actual","keysType","deepStr","ok","mixedArgsMsg","Array","slice","getOwnEnumerableProperties","String","len","any","all","expected","expectedKey","actualKey","every","pop","sort","compareByInspect","assertThrows","errMsgMatcher","caughtErr","is","everyArgIsUndefined","everyArgIsDefined","Boolean","errorLikeFail","errMsgMatcherFail","errorLikeString","placeholder","respondTo","itself","context","satisfy","matcher","objDisplay","closeTo","delta","Math","abs","assertChanges","subject","initial","fn","final","msgObj","assertIncreases","assertDecreases","chain","addChainableMethod","trim","addMethod","start","finish","startType","finishType","range","toISOString","subset","be","failMsg","failNegateMsg","contains","ordered","cmp","superset","elem","idx","matchIdx","elem2","isSubsetOf","list","possibility","expression","behavior","realDelta","isExtensible","isSealed","isFrozen","isFinite","$","iterate","aCallable","anObject","getIteratorDirect","real","predicate","record","counter","stop","IS_RECORD","INTERRUPTED","stopped","_chai","util","lockSsfi","deepEqual","defineProperty","get","console","warn","includeStack","set","showDiff","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","_actual","assertionErrorObjectProperties","getActual","operator","getOperator","FakeMap","_key","random","Date","now","configurable","MemoizeMap","WeakMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","options","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","valueOf","keysEqual","iterableEqual","regexpEqual","getGeneratorEntries","generatorEqual","Uint8Array","buffer","sizeError","leftHandItems","rightHandItems","entriesEqual","equals","total","leftHandKeys","getEnumerableKeys","rightHandKeys","leftHandSymbols","getEnumerableSymbols","rightHandSymbols","mapSymbols","leftHandEntries","getIteratorEntries","rightHandEntries","objectEqual","extensiveDeepEqualByType","index","Symbol","iterator","hasIteratorFunction","iteratorError","generator","generatorResult","accumulator","done","allKeys","getOwnPropertySymbols","enumerable","arr","entry","utils","assertIsAboutPromise","assertion","then","thenable","catch","always","fail","pipe","progress","state","proxifyIfSupported","asserter","doNotify","promise","assertIfNegated","extra","assertIfNotNegated","getBasePromise","getReasonName","reason","propertyNames","propertyDescs","doAsserterAsyncAndAddThen","args","derivedPromise","transformAsserterArgs","newArgs","transferPromiseness","errorLikeName","rejected","matcherRelation","assertionMessage","errorLikeCompatible","errMsgMatcherCompatible","reasonName","eventually","deep","equal","filter","methodName","originalMethod","getterName","__methods","originalGetter","originalAssertMethods","isFulfilled","fulfilled","isRejected","rejectedWith","becomes","doesNotBecome","notDeepEqual","assertMethodName","otherArgs","customRejectionHandler","returnedPromise","fulfillmentValue","notify","bind","values","expect","Function","functionNameMatch","aFunc","functionSource","DESCRIPTORS","FORCED","toObject","definePropertyModule","forced","__defineGetter__","P","getter","f","find","loupe","showHidden","depth","colors","truncate","Infinity","Number","uncurryThis","lengthOfArrayLike","deletePropertyOrThrow","fails","internalSort","arrayMethodIsStrict","FF","IE_OR_EDGE","V8","WEBKIT","nativeSort","FAILS_ON_UNDEFINED","FAILS_ON_NULL","STRICT_METHOD","STABLE_SORT","code","chr","fromCharCode","k","v","comparefn","array","itemsLength","items","arrayLength","x","y","getSortCompare","isProxyEnabled","propertyGetter","sym","addToUnscopables","getIteratorFlattenable","createIteratorProxy","iteratorClose","IS_PURE","IteratorProxy","inner","mapper","error","flatMap","useProxy","proxyExcludedKeys","chainableBehavior","_chainingBehavior","_typeof","_slicedToArray","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","from","_unsupportedIterableToArray","_nonIterableRest","arr2","ansiColors","bold","dim","italic","underline","inverse","hidden","strike","black","red","green","yellow","blue","magenta","cyan","white","brightblack","brightred","brightgreen","brightyellow","brightblue","brightmagenta","brightcyan","brightwhite","grey","styles","special","number","bigint","boolean","null","string","symbol","date","regexp","truncator","colorise","styleType","color","tail","tailLength","stringLength","inspectList","inspectItem","separator","originalLength","output","peek","truncated","secondToLast","nextLength","truncatedLength","inspectProperty","_ref2","_ref3","JSON","stringify","quoteComplexKey","getFuncName_1","inspectTypedArray","Buffer","toStringTag","getArrayName","nonIndexProperties","stylize","propertyContents","inspectFunction","func","inspectMapEntry","_ref","inspectNumber","inspectBigInt","nums","stringEscapeChars","escapeCharacters","escape","char","charCodeAt","inspectString","inspectSymbol","description","getPromiseValue","_process$binding","process","binding","getPromiseDetails","kPending","kRejected","Promise","resolve","_getPromiseDetails2","innerValue","notNode","inspectPromise","inspectObject","properties","symbols","seen","symbolContents","sep","errorKeys","inspectAttribute","inspectHTMLCollection","collection","inspectHTML","element","getAttributeNames","tagName","head","headClose","getAttribute","children","chaiInspect","for","nodeInspect","nodeUtil","custom","noNodeInspect","constructorMap","stringTagMap","baseTypesMap","BigInt","function","listContents","dateObject","stringRepresentation","toJSON","split","Map","entries","mapToEntries","Set","arrayFromSet","sourceLength","source","WeakSet","Arguments","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Generator","DataView","ArrayBuffer","unshift","HTMLCollection","NodeList","toString$1","_ref$showHidden","_ref$depth","_ref$colors","_ref$customInspect","customInspect","_ref$showProxy","showProxy","_ref$maxArrayLength","maxArrayLength","_ref$breakLength","breakLength","_ref$seen","_ref$truncate","_ref$stylize","normaliseOptions","inspectCustom","HTMLElement","inspectClass","default","registerConstructor","inspector","registerStringTag","stringTag","factory","globalThis","__defineSetter__","isObject","objectType","isObjectType","includeAll","getIteratorMethod","stringHandling","exclude","excludes","excludeProps","_props","ssf","extend","captureStackTrace","e","stack","getProperties","builtins","nonChainableMethodName","Proxy","proxyGetter","Reflect","suggestion","suggestionDistance","dist","strA","strB","cap","memo","fill","j","ch","min","stringDistanceCapped","_get","overwritingPropertyGetter","canSetPrototype","setPrototypeOf","testFn","excludeNames","propDesc","chainableMethodWrapper","asserterName","pd","promiseExists","globalObject","Obj","global","typeDetectGlobalObject","symbolExists","mapExists","setExists","weakMapExists","weakSetExists","dataViewExists","symbolIteratorExists","symbolToStringTagExists","setEntriesExists","mapEntriesExists","setIteratorPrototype","mapIteratorPrototype","arrayIteratorExists","arrayIteratorPrototype","stringIteratorExists","stringIteratorPrototype","typeofObj","window","location","document","navigator","mimeTypes","plugins","objPrototype","doesNotExceedSafeInteger","flattenIntoArray","original","sourceLen","thisArg","elementLen","targetIndex","sourceIndex","mapFn","express","errmsg","isOk","isNotOk","not","act","exp","notEqual","strictEqual","notStrictEqual","deepStrictEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","exist","notExists","isUndefined","isDefined","isFunction","isNotFunction","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","oneOf","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","types","t","art","arraySpeciesCreate","callbackfn","A","O","used","version","use","core","should","loadShould","writable","shouldGetter","errt","errs","Throw","Should","pathval","expectTypes","tryToString","$TypeError","methodWrapper","setter","fnLengthDesc","assertionName","isChainable","it"],"sourceRoot":""}